{"ast":null,"code":"import _toConsumableArray from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/likhitha/Documents/cms/client/src/components/dashboard/EditBuilding.js\",\n    _this = this,\n    _s3 = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState, useMap } from \"react\";\nimport service from './services';\nimport { EditControl } from \"react-leaflet-draw\";\nimport LayersControl2, { ControlledLayerItem } from \"./LayerControl2\"; // import \"./assets/leaflet.css\"\n// import \"./assets/leaflet.draw.css\"\n\nimport { Map, TileLayer, FeatureGroup, useLeaflet, LayersControl, Marker, Polygon, Popup, LayerGroup, Circle, GeoJSON } from \"react-leaflet\";\nimport Control from 'react-leaflet-control';\nimport L, { circleMarker } from \"leaflet\";\nimport { CardBody, Card, Breadcrumb, BreadcrumbItem, ButtonGroup, ButtonToolbar, Form, FormGroup, Label, Input, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap'; // Material components\n\nimport { makeStyles, Button } from \"@material-ui/core\";\nimport { set } from \"mongoose\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar addFloorCounter = 0;\nvar useStyles = makeStyles(function (theme) {\n  return {\n    map: {\n      height: \"calc(90vh - 90px)\",\n      width: '60%',\n      zIndex: 0\n    },\n    buttonWrapper: {\n      zIndex: 1,\n      position: \"absolute\",\n      bottom: theme.spacing(2),\n      marginLeft: \"30%\",\n      marginBottom: \"8%\",\n      transform: \"translateX(-50%)\"\n    },\n    headerWrapper: {\n      zIndex: 1,\n      marginLeft: theme.spacing(3),\n      marginTop: theme.spacing(1)\n    }\n  };\n});\n\nvar EditBuilding = function EditBuilding(props) {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  var editRef = useRef();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      drawing = _useState2[0],\n      setDrawing = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      markers = _useState4[0],\n      setMarkers = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      details = _useState6[0],\n      setDetails = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      boundary = _useState8[0],\n      setBoundary = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      newPosition = _useState10[0],\n      setNewPosition = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      mapLayers = _useState12[0],\n      setMapLayers = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      customLayer = _useState14[0],\n      setCustomLayer = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      activeFloorPolygons = _useState16[0],\n      setActiveFloorPolygons = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      activeFloorBoundary = _useState18[0],\n      setActiveFloorBoundary = _useState18[1];\n\n  var _useState19 = useState(''),\n      _useState20 = _slicedToArray(_useState19, 2),\n      activeFloor = _useState20[0],\n      setActiveFloor = _useState20[1];\n\n  var _useState21 = useState(''),\n      _useState22 = _slicedToArray(_useState21, 2),\n      newDesc = _useState22[0],\n      setNewDesc = _useState22[1];\n\n  var _useState23 = useState(''),\n      _useState24 = _slicedToArray(_useState23, 2),\n      isEdit = _useState24[0],\n      setIsEdit = _useState24[1];\n\n  var _useState25 = useState(0),\n      _useState26 = _slicedToArray(_useState25, 2),\n      boundaryid = _useState26[0],\n      setBoundaryid = _useState26[1];\n\n  var _useState27 = useState(''),\n      _useState28 = _slicedToArray(_useState27, 2),\n      selectedFloorGeoData = _useState28[0],\n      setselectedFloorGeoData = _useState28[1]; // const [addCounter,setAddCounter] = React.useState(0);\n  //const purpleOptions = { color: 'purple' }\n\n\n  var mapRef = useRef();\n  var fgRef = useRef();\n  var refno = window.location.pathname.replace('/ViewBuilding/', '');\n  var leaflet = useLeaflet();\n  var polygon = [];\n  var center = [51.505, -0.09];\n  var rectangle = [[51.49, -0.08], [51.5, -0.06]];\n\n  var _useState29 = useState(0),\n      _useState30 = _slicedToArray(_useState29, 2),\n      selectedLayerIndex = _useState30[0],\n      setSelectedLayerIndex = _useState30[1];\n\n  function Boundary() {\n    var detailLcl = details;\n\n    if (details !== null && details !== undefined && details !== \"\") {\n      if (details.boundaries !== null && details.boundaries !== undefined && details.boundaries !== \"\") {\n        if (details.boundaries.length > 0) {\n          return /*#__PURE__*/_jsxDEV(Polygon, {\n            positions: details.boundaries\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 19\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 19\n          }, this);\n        }\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this);\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }, this);\n    }\n  }\n\n  function EditableLayer(props) {\n    _s();\n\n    var leaflet = useLeaflet();\n    var editLayerRef = React.useRef();\n    var drawControlRef = React.useRef();\n    var map = leaflet.map;\n    useEffect(function () {\n      if (!props.showDrawControl) {\n        map.removeControl(drawControlRef.current);\n      } else {\n        map.addControl(drawControlRef.current);\n      }\n\n      editLayerRef.current.leafletElement.clearLayers();\n      editLayerRef.current.leafletElement.addLayer(props.layer);\n      props.layer.on(\"click\", function (e) {\n        props.onLayerClicked(e, drawControlRef.current);\n      });\n    }, [props, map]);\n\n    function onMounted(ctl) {\n      drawControlRef.current = ctl;\n    }\n\n    function onEditPath(e) {\n      var layerObj = e.layers._layers;\n      var layer = layerObj[Object.keys(layerObj)[0]];\n\n      if (layer !== undefined && layer !== null) {\n        var _props = layer.feature.properties;\n\n        if (_props.hasOwnProperty('id') && _props.hasOwnProperty('ground')) {\n          var polygonId = _props.id;\n          var floorIndex = _props.ground;\n          var latlngs = layer.getLatLngs();\n          latlngs = latlngs.length > 0 ? latlngs[0] : latlngs;\n          crupdateLayer2ActiveFloor(latlngs, polygonId, floorIndex);\n        }\n      }\n    }\n\n    function onPolygonDeleted(e) {\n      console.log(e);\n      var _layers = e.layers._layers;\n      Object.values(_layers).map(function (_ref) {//setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\n\n        var _leaflet_id = _ref._leaflet_id;\n      });\n    }\n\n    function onPolygonCreated(e) {\n      addFloorCounter++;\n\n      if (addFloorCounter === activeFloor.blocks.length) {\n        var latlngs = e.layer.getLatLngs();\n        latlngs = latlngs.length > 0 ? latlngs[0] : latlngs;\n        crupdateLayer2ActiveFloor(latlngs, null, null);\n        addFloorCounter = 0;\n      }\n    }\n\n    function onDeleted() {}\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FeatureGroup, {\n        ref: editLayerRef,\n        children: /*#__PURE__*/_jsxDEV(EditControl, _objectSpread({\n          position: \"topright\",\n          onMounted: onMounted,\n          onCreated: onPolygonCreated,\n          onEdited: onEditPath,\n          onDeleted: onPolygonDeleted,\n          draw: {\n            polygon: true,\n            circle: false,\n            polyline: false,\n            marker: false,\n            rectangle: false,\n            circlemarker: false\n          }\n        }, props), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  }\n\n  _s(EditableLayer, \"mRBzQf4B+lSmsOrt2PcplvXDKEI=\", false, function () {\n    return [useLeaflet];\n  });\n\n  function EditableGroup(props) {\n    _s2();\n\n    var _this2 = this;\n\n    var _useState31 = useState(0),\n        _useState32 = _slicedToArray(_useState31, 2),\n        selectedLayerIndex = _useState32[0],\n        setSelectedLayerIndex = _useState32[1];\n\n    function handleLayerClick(e, drawControl) {\n      setSelectedLayerIndex(e.target.feature.properties.editLayerId);\n    }\n\n    var dataLayer = new L.GeoJSON(props.data);\n    var layers = [];\n    var i = 0;\n    dataLayer.eachLayer(function (layer) {\n      layer.feature.properties.editLayerId = i;\n      layers.push(layer);\n      i++;\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: layers.map(function (layer, i) {\n          return /*#__PURE__*/_jsxDEV(EditableLayer, {\n            layer: layer,\n            showDrawControl: i === selectedLayerIndex,\n            onLayerClicked: handleLayerClick\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, _this2);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this);\n  }\n\n  _s2(EditableGroup, \"Ibts1gRA4nda0R5pUeZ3xqL+kKw=\");\n\n  var updateFloor = {\n    floorno: markers.length + 1,\n    description: \"newDesc\",\n    color: '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6),\n    blocks: [],\n    boundaries: []\n  }; //const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n  var _useState33 = useState(false),\n      _useState34 = _slicedToArray(_useState33, 2),\n      addFloor = _useState34[0],\n      setAddFloor = _useState34[1];\n\n  var _onFeatureGroupReady = function _onFeatureGroupReady(ref) {\n    if (ref !== undefined && ref !== null) {\n      var leafletFG = ref.leafletElement;\n\n      if (customLayer.length > 0) {\n        customLayer.eachLayer(function (layer) {\n          return leafletFG.addLayer(layer);\n        });\n      }\n    }\n  };\n\n  var handleDrawPolygonClick = function handleDrawPolygonClick(e) {\n    var activeFloorLcl = activeFloor;\n    var polygonType = e.target.value;\n\n    switch (polygonType) {\n      case \"BO\":\n        break;\n\n      case \"BL\":\n        break;\n\n      default:\n        break;\n    }\n\n    if (activeFloorLcl !== undefined && activeFloorLcl !== null) {\n      if (activeFloorLcl.boundaries.length > 3) {\n        var layerType = e.layerType,\n            layer = e.layer;\n\n        if (layerType === \"polygon\") {\n          var _leaflet_id = layer._leaflet_id;\n          setMapLayers(function (layers) {\n            return [].concat(_toConsumableArray(layers), [{\n              id: _leaflet_id,\n              latlngs: layer.getLatLngs()[0]\n            } // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n            ]);\n          });\n        } //Edit this method to perform other actions\n\n\n        if (!drawing) {\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable();\n        } else {\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape();\n\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable();\n        }\n\n        setDrawing(!drawing);\n      }\n    }\n  }; //let dataLayer = new L.GeoJSON(props.data);\n\n\n  var onShapeDrawn = function onShapeDrawn(e) {\n    setDrawing(false);\n    var layerType = e.layerType,\n        layer = e.layer;\n\n    if (layerType === \"polygon\") {\n      var _leaflet_id = layer._leaflet_id;\n    }\n\n    var mar = markers;\n\n    for (var k = 0; k < mar.length; k++) {\n      var boundary_id = boundaryid;\n      boundary_id = layer._leaflet_id;\n      setBoundaryid(boundary_id);\n      console.log(boundaryid);\n    } // e.layer.on('click', () => {\n    //     \n    //     setDrawing(layer);\n    //     //setSelectedLayerIndex(e.target.boundaryid);\n    //     console.log(selectedLayerIndex);\n    //     \n    //   editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n    // })\n\n\n    e.layer.on('contextmenu', function () {//do some contextmenu action here\n    });\n    e.layer.bindTooltip(\"Text\", {\n      className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n      sticky: true,\n      direction: 'right'\n    });\n  };\n\n  function handleLayerClick(e, drawControl) {\n    var layerType = e.layerType,\n        layer = e.layer;\n\n    if (layerType === \"polygon\") {\n      var _leaflet_id = layer._leaflet_id;\n    }\n\n    var drawingLcl = drawing;\n    drawingLcl = layer;\n    setDrawing(drawingLcl); //   setSelectedLayerIndex(e.target.boundaryid);\n    //     console.log(selectedLayerIndex);\n    //editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  } //   e.layer.on('click', () => {\n  //     \n  //     setSelectedLayerIndex(e.target.boundaryid);\n  //     console.log(selectedLayerIndex);\n  //     \n  //   editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  // })\n\n\n  function crupdateLayer2ActiveFloor(latlngs, polygonId, floorIndex) {\n    var coordinates = [];\n\n    for (var latlngsIdx = 0; latlngsIdx < latlngs.length; latlngsIdx++) {\n      var latlng = latlngs[latlngsIdx];\n      var coor1 = [];\n      var lat = latlng.hasOwnProperty('lat') ? latlng.lat : false;\n      var lng = latlng.hasOwnProperty('lng') ? latlng.lng : false;\n\n      if (!(lat === false || lng === false)) {\n        coor1.push(lat);\n        coor1.push(lng);\n        coordinates.push(coor1);\n      }\n    }\n\n    var activeFloor4crup = activeFloor;\n\n    if (polygonId === null) {\n      //ask description\n      activeFloor4crup.blocks.push({\n        blockId: new Date().getTime().toString(),\n        text: \"\",\n        bounds: coordinates\n      });\n    } else {\n      for (var flindex = 0; flindex < activeFloor4crup.blocks.length; flindex++) {\n        var block = activeFloor4crup.blocks[flindex];\n\n        if (block.blockId === polygonId) {\n          activeFloor4crup.blocks[flindex].bounds = coordinates;\n        }\n      }\n    }\n\n    updateBuildingFromActiveFloor(floorIndex);\n  }\n\n  function updateBuildingFromActiveFloor(floorIndex) {\n    var detailsLocal = details;\n    var markerLcl = markers;\n\n    if (markerLcl !== undefined && markerLcl !== null) {\n      if (markers.length >= 1 && floorIndex >= 0) {\n        markerLcl[floorIndex] = activeFloor;\n        detailsLocal.floors = markerLcl;\n        setDetails(detailsLocal);\n      }\n    }\n  }\n\n  function reverseCoordinate(coor) {\n    var retCoor = [];\n\n    if (coor !== undefined && coor !== null) {\n      if (coor.length > 0) {\n        for (var coorIdx = 0; coorIdx < coor.length; coorIdx++) {\n          var bound = coor[coorIdx];\n          var row = [];\n\n          if (bound.length === 2) {\n            row.push(bound[1]);\n            row.push(bound[0]);\n            retCoor.push(row);\n          }\n        }\n      }\n    }\n\n    return retCoor;\n  }\n\n  var ondetailChange = function ondetailChange(e) {\n    debugger;\n    var detailLcl = details;\n    var value = e.target.value;\n    var property = e.target.getAttribute('property');\n\n    if (property !== undefined && property !== null && property !== '') {\n      detailLcl[property] = value;\n      setDetails(detailLcl);\n    }\n  };\n\n  var handleSaveFloor = function handleSaveFloor(e) {\n    var detailsLocal = details;\n    var markersLocal = markers;\n    details.floors = markersLocal;\n    service.updateBuilding(details.id, details);\n  };\n\n  function block2Layer(iBlock, floorIndex, floorColor) {\n    return {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"id\": iBlock.blockId,\n        \"ground\": floorIndex\n      },\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"color\": floorColor,\n        \"coordinates\": [reverseCoordinate(iBlock.bounds)]\n      }\n    };\n  }\n\n  function onFloorSelect(e, data) {\n    var index = e.target.value;\n    var selectedFloorPolygonLayers = [];\n    var activeFloorSel = markers[index];\n    var floorColor = '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\n\n    for (var blockIdx = 0; blockIdx < activeFloorSel.blocks.length; blockIdx++) {\n      var blockPolygon = activeFloorSel.blocks[blockIdx];\n      var geoJsonObj = block2Layer(blockPolygon, index, floorColor);\n      selectedFloorPolygonLayers.push(geoJsonObj);\n    }\n\n    var featureCollection = {\n      \"type\": \"FeatureCollection\",\n      \"name\": \"\",\n      \"crs\": {\n        \"type\": \"name\",\n        \"properties\": {\n          \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\"\n        }\n      },\n      \"features\": selectedFloorPolygonLayers\n    }; // const floorLayers = new L.GeoJSON(featureCollection);\n    // setActiveFloorPolygons(floorLayers.getLayers());\n\n    setselectedFloorGeoData(featureCollection);\n    setActiveFloorBoundary(activeFloorSel.boundaries);\n    setActiveFloor(activeFloorSel);\n  }\n\n  var addressCardStyle = {\n    backgroundImage: \"url(\".concat(require('./33.png'), \")\"),\n    backgroundSize: 'cover',\n    height: \"423px\"\n  };\n  var floor = {};\n  useEffect(function () {\n    var refTemp = refno.replace(\"/EditBuilding/\", \"\");\n    service.getBuilding(refTemp).then(function (selBuilding) {\n      console.log(\"returning\", selBuilding);\n      setMarkers(selBuilding[0].floors);\n\n      if (selBuilding[0].floors.length > 0) {\n        setActiveFloor(selBuilding[0].floors[0]);\n      } else {\n        setActiveFloor({\n          \"floorno\": \"1\",\n          \"description\": \"\",\n          \"color\": \"#f18d00\",\n          \"blocks\": []\n        });\n      }\n\n      setDetails(selBuilding[0]);\n      mapRef.current.leafletElement.flyTo([selBuilding[0].latitude, selBuilding[0].longitude], 16); // setBoundary(selBuilding[0].boundary.geometry.coordinates[0]);\n\n      var ml = mapLayers;\n    });\n  }, []);\n\n  function _toggle() {\n    setAddFloor(!addFloor);\n  }\n\n  var moveActiveFloor = function moveActiveFloor() {\n    var markersLcl = markers;\n\n    if (activeFloor !== undefined && activeFloor !== null) {\n      for (var i = 0; i < markersLcl.length; i++) {\n        if (activeFloor.floorno === markersLcl[i].floorno) {\n          markersLcl[i].description = activeFloor.description;\n          markersLcl[i].blocks = activeFloor.blocks;\n          markersLcl[i].boundaries = activeFloor.boundaries;\n        }\n      }\n\n      setMarkers(markersLcl);\n    }\n  };\n\n  var _onCreate = function _onCreate(e) {\n    console.log(e);\n    var layerType = e.layerType,\n        layer = e.layer;\n\n    if (layerType === \"polygon\") {\n      var _leaflet_id = layer._leaflet_id;\n      setMapLayers(function (layers) {\n        return [].concat(_toConsumableArray(layers), [{\n          id: _leaflet_id,\n          latlngs: layer.getLatLngs()[0]\n        }]);\n      });\n    }\n  };\n\n  var _onEdited = function _onEdited(e) {// console.log(e);\n    // const {\n    //   layers: { _layers },\n    // } = e;\n    // Object.values(_layers).map(({ _leaflet_id, editing }) => {\n    //   setMapLayers((layers) =>\n    //     layers.map((l) =>\n    //       l.id === _leaflet_id\n    //         ? { ...l, latlngs: { ...editing.latlngs[0] } }\n    //         : l\n    //     )\n    //   );\n    // });\n  };\n\n  var _onDeleted = function _onDeleted(e) {\n    console.log(e);\n    var _layers = e.layers._layers;\n    Object.values(_layers).map(function (_ref2) {\n      var _leaflet_id = _ref2._leaflet_id;\n      setMapLayers(function (layers) {\n        return layers.filter(function (l) {\n          return l.id !== _leaflet_id;\n        });\n      });\n    });\n  };\n\n  var deleteActiveFloor = function deleteActiveFloor() {\n    debugger;\n    var activeFloorLocal = activeFloor;\n    var markersL = markers;\n    var markersAfterDeletion = [];\n\n    for (var j = 0; j < markersL.length; j++) {\n      var marker = markersL[j];\n\n      if (marker.floorno !== activeFloorLocal.floorno) {\n        markersAfterDeletion.push(marker);\n      }\n    }\n\n    setMarkers(markersAfterDeletion); // setActiveFloorPolygons(markersAfterDeletion[0].blocks);\n    // setActiveFloorBoundary(markersAfterDeletion[0].boundaries);\n    // setActiveFloor(markersAfterDeletion[0]);\n\n    if (markersAfterDeletion.length > 0) {\n      setActiveFloor(markersAfterDeletion[0].floors[0]);\n    } else {\n      setActiveFloor({\n        \"floorno\": \"1\",\n        \"description\": \"\",\n        \"color\": \"#f18d00\",\n        \"blocks\": []\n      });\n    }\n  };\n\n  var handleAddFloor = function handleAddFloor() {\n    var newFloor = {\n      \"floorno\": markers.length + 1,\n      \"description\": newDesc,\n      \"color\": \"#f18d00\",\n      \"blocks\": [],\n      \"boundaries\": []\n    };\n    setActiveFloor(newFloor);\n    setActiveFloorBoundary(newFloor.boundaries);\n    setActiveFloorPolygons(newFloor.blocks);\n    var markersLocal = markers;\n    markersLocal.push(newFloor);\n    setMarkers(markersLocal);\n    setNewDesc(\"\");\n  };\n\n  var changeHandlerDesc = function changeHandlerDesc(event) {\n    return setNewDesc(event.target.value);\n  };\n\n  var updateIsEdit = function updateIsEdit(e, value) {\n    return setIsEdit(value);\n  };\n\n  var handleEditPolygonClick = function handleEditPolygonClick(e) {\n    var drawingLocal = drawing;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"row\",\n      children: /*#__PURE__*/_jsxDEV(Breadcrumb, {\n        class: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(BreadcrumbItem, {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/map1\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"ri-home-4-line mr-1 float-left\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 768,\n              columnNumber: 43\n            }, _this), \"Home\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 27\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(BreadcrumbItem, {\n          active: true,\n          children: details.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 767,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 766,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          margin: \".6%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"iq-card iq-card-block iq-card-stretch iq-card-height bg-transparent\",\n            children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"exampleInputReadonly\",\n                children: \"Building Id\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 785,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                className: \"form-control\",\n                defaultValue: details.id,\n                disabled: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 786,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 784,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"exampleInputReadonly\",\n                children: \"Building Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 791,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                className: \"form-control\",\n                defaultValue: details.name,\n                property: \"name\",\n                onChange: ondetailChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 792,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 790,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"exampleInputReadonly\",\n                children: \"Street\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 797,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                className: \"form-control\",\n                defaultValue: details.street,\n                property: \"street\",\n                onChange: ondetailChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 798,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 796,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"exampleInputReadonly\",\n                children: \"Apartment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 803,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                className: \"form-control\",\n                property: \"Apartment\",\n                onChange: ondetailChange,\n                defaultValue: details.Apartment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 804,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 802,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"exampleInputReadonly\",\n                children: \"Doornum\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 810,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                className: \"form-control\",\n                property: \"doornum\",\n                onChange: ondetailChange,\n                defaultValue: details.doornum\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 811,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 809,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"exampleInputReadonly\",\n                children: \"Region\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 817,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                className: \"form-control\",\n                property: \"region\",\n                onChange: ondetailChange,\n                defaultValue: details.region\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 818,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 816,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"exampleInputReadonly\",\n                children: \"Country\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 823,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                className: \"form-control\",\n                property: \"country\",\n                onChange: ondetailChange,\n                defaultValue: details.country\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 824,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 822,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(Button, {\n              className: \"btn btn-primary\",\n              style: {\n                \"font-size\": \"1.0rem\",\n                \"margin-left\": \".05rem\",\n                \"margin-right\": \".05rem\"\n              },\n              color: \"primary\",\n              onClick: handleSaveFloor,\n              children: \" SaveBuilding \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 829,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 782,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-8\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"iq-card overflow-hidden\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"display-4\",\n              children: activeFloor.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 838,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"home-chart-02\",\n              children: /*#__PURE__*/_jsxDEV(Map, {\n                center: [60.21846434365596, 24.811831922452843],\n                zoom: 17,\n                ref: mapRef,\n                children: [/*#__PURE__*/_jsxDEV(Control, {\n                  position: \"topright\",\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    className: \"btn btn-primary\",\n                    color: \"primary\",\n                    onClick: function onClick() {\n                      return _toggle(\"addFloor\");\n                    },\n                    children: \" AddFloor \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 850,\n                    columnNumber: 21\n                  }, _this), ' ', /*#__PURE__*/_jsxDEV(Modal, {\n                    isOpen: addFloor,\n                    toggle: function toggle() {\n                      return _toggle(\"addFloor\");\n                    },\n                    className: \"modal-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n                      className: \"btn btn-primary\",\n                      toggle: function toggle() {\n                        return _toggle(\"addFloor\");\n                      },\n                      children: \"Add Floor\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 854,\n                      columnNumber: 23\n                    }, _this), /*#__PURE__*/_jsxDEV(ModalBody, {\n                      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                        children: [\"Floor: \", markers.length + 1]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 858,\n                        columnNumber: 25\n                      }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: \"Enter Floor Description\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 860,\n                        columnNumber: 25\n                      }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"text\",\n                        onChange: changeHandlerDesc,\n                        value: newDesc,\n                        lur: updateIsEdit\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 861,\n                        columnNumber: 25\n                      }, _this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 855,\n                      columnNumber: 23\n                    }, _this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n                      children: [/*#__PURE__*/_jsxDEV(Button, {\n                        color: \"btn btn-primary\",\n                        onClick: function onClick() {\n                          _toggle(\"addFloor\"); // handleAddFloor(); \n\n\n                          handleAddFloor();\n                        },\n                        children: \"OK\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 867,\n                        columnNumber: 25\n                      }, _this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n                        color: \"btn btn-primary\",\n                        onClick: function onClick() {\n                          return _toggle(\"addFloor\");\n                        },\n                        children: \"Cancel\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 873,\n                        columnNumber: 25\n                      }, _this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 865,\n                      columnNumber: 23\n                    }, _this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 853,\n                    columnNumber: 21\n                  }, _this), /*#__PURE__*/_jsxDEV(Button, {\n                    class: \"btn btn-primary\",\n                    onClick: deleteActiveFloor,\n                    value: \"BO\",\n                    children: \"Delete Floor\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 877,\n                    columnNumber: 21\n                  }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    class: \"btn btn-primary\",\n                    onClick: handleDrawPolygonClick,\n                    value: \"BL\",\n                    style: {\n                      \"font-size\": \"1.0rem\",\n                      \"margin-left\": \".05rem\"\n                    },\n                    children: \"AddBlock\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 886,\n                    columnNumber: 21\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 842,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(LayersControl, {\n                  position: \"topright\",\n                  children: [/*#__PURE__*/_jsxDEV(LayersControl.BaseLayer, {\n                    checked: false,\n                    name: \"Esri WorldImagery\",\n                    group: \"BaseLayers\",\n                    children: /*#__PURE__*/_jsxDEV(TileLayer, {\n                      url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\",\n                      attribution: \"\\xA9 <a href=\\\"Esri &mdash\\\">Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community</a> contributors\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 902,\n                      columnNumber: 23\n                    }, _this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 897,\n                    columnNumber: 21\n                  }, _this), /*#__PURE__*/_jsxDEV(LayersControl.BaseLayer, {\n                    checked: true,\n                    name: \"OpenStreetMap\",\n                    group: \"BaseLayers\",\n                    children: /*#__PURE__*/_jsxDEV(TileLayer, {\n                      attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n                      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 912,\n                      columnNumber: 23\n                    }, _this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 907,\n                    columnNumber: 21\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 896,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(EditableGroup, {\n                  data: selectedFloorGeoData\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 920,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(Control, {\n                  position: \"topright\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: markers.map(function (mLr, didx) {\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: /*#__PURE__*/_jsxDEV(\"button\", {\n                          class: \"primary\",\n                          value: didx,\n                          onClick: onFloorSelect,\n                          style: {\n                            \"font-size\": \"1.5rem\",\n                            \"margin-left\": \".05rem\"\n                          },\n                          children: mLr.floorno\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 977,\n                          columnNumber: 29\n                        }, _this)\n                      }, mLr.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 975,\n                        columnNumber: 27\n                      }, _this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 969,\n                    columnNumber: 21\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 968,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(Boundary, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 993,\n                  columnNumber: 19\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 841,\n                columnNumber: 17\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 840,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 837,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 779,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 775,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 765,\n    columnNumber: 5\n  }, _this);\n};\n\n_s3(EditBuilding, \"hic1ucsq2WTH2J2SfM81KYZy1yo=\", false, function () {\n  return [useLeaflet];\n});\n\n_c = EditBuilding;\nexport default EditBuilding;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditBuilding\");","map":{"version":3,"sources":["/Users/likhitha/Documents/cms/client/src/components/dashboard/EditBuilding.js"],"names":["React","useRef","useEffect","useState","useMap","service","EditControl","LayersControl2","ControlledLayerItem","Map","TileLayer","FeatureGroup","useLeaflet","LayersControl","Marker","Polygon","Popup","LayerGroup","Circle","GeoJSON","Control","L","circleMarker","CardBody","Card","Breadcrumb","BreadcrumbItem","ButtonGroup","ButtonToolbar","Form","FormGroup","Label","Input","ModalHeader","Modal","ModalBody","ModalFooter","makeStyles","Button","set","addFloorCounter","useStyles","theme","map","height","width","zIndex","buttonWrapper","position","bottom","spacing","marginLeft","marginBottom","transform","headerWrapper","marginTop","EditBuilding","props","editRef","drawing","setDrawing","markers","setMarkers","details","setDetails","boundary","setBoundary","newPosition","setNewPosition","mapLayers","setMapLayers","customLayer","setCustomLayer","activeFloorPolygons","setActiveFloorPolygons","activeFloorBoundary","setActiveFloorBoundary","activeFloor","setActiveFloor","newDesc","setNewDesc","isEdit","setIsEdit","boundaryid","setBoundaryid","selectedFloorGeoData","setselectedFloorGeoData","mapRef","fgRef","refno","window","location","pathname","replace","leaflet","polygon","center","rectangle","selectedLayerIndex","setSelectedLayerIndex","Boundary","detailLcl","undefined","boundaries","length","EditableLayer","editLayerRef","drawControlRef","showDrawControl","removeControl","current","addControl","leafletElement","clearLayers","addLayer","layer","on","e","onLayerClicked","onMounted","ctl","onEditPath","layerObj","layers","_layers","Object","keys","feature","properties","hasOwnProperty","polygonId","id","floorIndex","ground","latlngs","getLatLngs","crupdateLayer2ActiveFloor","onPolygonDeleted","console","log","values","_leaflet_id","onPolygonCreated","blocks","onDeleted","circle","polyline","marker","circlemarker","EditableGroup","handleLayerClick","drawControl","target","editLayerId","dataLayer","data","i","eachLayer","push","updateFloor","floorno","description","color","Math","random","toString","substr","addFloor","setAddFloor","_onFeatureGroupReady","ref","leafletFG","handleDrawPolygonClick","activeFloorLcl","polygonType","value","layerType","_toolbars","draw","_modes","handler","enable","completeShape","disable","onShapeDrawn","mar","k","boundary_id","bindTooltip","className","sticky","direction","drawingLcl","coordinates","latlngsIdx","latlng","coor1","lat","lng","activeFloor4crup","blockId","Date","getTime","text","bounds","flindex","block","updateBuildingFromActiveFloor","detailsLocal","markerLcl","floors","reverseCoordinate","coor","retCoor","coorIdx","bound","row","ondetailChange","property","getAttribute","handleSaveFloor","markersLocal","updateBuilding","block2Layer","iBlock","floorColor","onFloorSelect","index","selectedFloorPolygonLayers","activeFloorSel","blockIdx","blockPolygon","geoJsonObj","featureCollection","addressCardStyle","backgroundImage","require","backgroundSize","floor","refTemp","getBuilding","then","selBuilding","flyTo","latitude","longitude","ml","toggle","moveActiveFloor","markersLcl","_onCreate","_onEdited","_onDeleted","filter","l","deleteActiveFloor","activeFloorLocal","markersL","markersAfterDeletion","j","handleAddFloor","newFloor","changeHandlerDesc","event","updateIsEdit","handleEditPolygonClick","drawingLocal","name","margin","street","Apartment","doornum","region","country","mLr","didx"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState, useMap } from \"react\";\nimport service from './services';\nimport { EditControl } from \"react-leaflet-draw\";\nimport LayersControl2, { ControlledLayerItem } from \"./LayerControl2\";\n// import \"./assets/leaflet.css\"\n// import \"./assets/leaflet.draw.css\"\nimport {\n  Map, TileLayer, FeatureGroup, useLeaflet, LayersControl, Marker, Polygon,\n  Popup, LayerGroup, Circle, GeoJSON\n} from \"react-leaflet\";\nimport Control from 'react-leaflet-control';\n\nimport L, { circleMarker } from \"leaflet\";\n\nimport { CardBody, Card, Breadcrumb, BreadcrumbItem, ButtonGroup, ButtonToolbar, Form, FormGroup, Label, Input, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap';\n// Material components\nimport { makeStyles, Button } from \"@material-ui/core\";\nimport { set } from \"mongoose\";\n\nlet addFloorCounter = 0;\n\n\nconst useStyles = makeStyles(theme => ({\n  map: ({\n    height: `calc(90vh - 90px)`,\n    width: '60%',\n    zIndex: 0\n  }),\n  buttonWrapper: {\n    zIndex: 1,\n    position: \"absolute\",\n    bottom: theme.spacing(2),\n    marginLeft: \"30%\",\n    marginBottom: \"8%\",\n    transform: \"translateX(-50%)\",\n  },\n  headerWrapper: {\n    zIndex: 1,\n    marginLeft: theme.spacing(3),\n    marginTop: theme.spacing(1),\n  }\n}));\n\n\n\nconst EditBuilding = (props) => {\n  const editRef = useRef();\n  const [drawing, setDrawing] = useState(false);\n  const [markers, setMarkers] = useState([])\n  const [details, setDetails] = useState('')\n  const [boundary, setBoundary] = useState([]);\n  const [newPosition, setNewPosition] = useState([])\n\n  const [mapLayers, setMapLayers] = useState('');\n  const [customLayer, setCustomLayer] = useState([]);\n\n  const [activeFloorPolygons, setActiveFloorPolygons] = useState([]);\n  const [activeFloorBoundary, setActiveFloorBoundary] = useState([]);\n  const [activeFloor, setActiveFloor] = useState('');\n  const [newDesc, setNewDesc] = useState('');\n  const [isEdit, setIsEdit] = useState('');\n  const [boundaryid, setBoundaryid] = useState(0);\n  const [selectedFloorGeoData, setselectedFloorGeoData] = useState('');\n  // const [addCounter,setAddCounter] = React.useState(0);\n\n\n  //const purpleOptions = { color: 'purple' }\n  const mapRef = useRef();\n  const fgRef = useRef();\n  const refno = window.location.pathname.replace('/ViewBuilding/', '');\n  const leaflet = useLeaflet();\n\n\n\n\n  const polygon = [\n\n  ]\n  const center = [51.505, -0.09]\n  const rectangle = [\n    [51.49, -0.08],\n    [51.5, -0.06],\n  ]\n  const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n  function Boundary() {\n    const detailLcl = details;\n    if (details !== null && details !== undefined && details !== \"\") {\n      if (details.boundaries !== null && details.boundaries !== undefined\n        && details.boundaries !== \"\") {\n        if (details.boundaries.length > 0) {\n          return (<Polygon positions={details.boundaries}></Polygon>);\n        } else {\n          return (<div></div>)\n        }\n      } else {\n        return (<div></div>)\n      }\n\n    } else {\n      return (<div></div>)\n    }\n\n\n\n  }\n  function EditableLayer(props) {\n    const leaflet = useLeaflet();\n    const editLayerRef = React.useRef();\n    let drawControlRef = React.useRef();\n    let { map } = leaflet;\n\n\n    useEffect(() => {\n\n      if (!props.showDrawControl) {\n        map.removeControl(drawControlRef.current);\n      } else {\n        map.addControl(drawControlRef.current);\n      }\n\n      editLayerRef.current.leafletElement.clearLayers();\n\n      editLayerRef.current.leafletElement.addLayer(props.layer);\n      props.layer.on(\"click\", function (e) {\n        props.onLayerClicked(e, drawControlRef.current);\n      });\n    }, [props, map]);\n\n    function onMounted(ctl) {\n      drawControlRef.current = ctl;\n    }\n\n    function onEditPath(e) {\n\n\n      const layerObj = e.layers._layers;\n\n      const layer = layerObj[Object.keys(layerObj)[0]];\n      if (layer !== undefined && layer !== null) {\n        const props = layer.feature.properties;\n        if (props.hasOwnProperty('id') && props.hasOwnProperty('ground')) {\n          const polygonId = props.id;\n          const floorIndex = props.ground;\n          let latlngs = layer.getLatLngs();\n          latlngs = latlngs.length > 0 ? latlngs[0] : latlngs;\n          crupdateLayer2ActiveFloor(latlngs, polygonId, floorIndex)\n\n        }\n      }\n\n\n\n    }\n    function onPolygonDeleted(e) {\n      console.log(e);\n\n      const {\n        layers: { _layers },\n      } = e;\n\n      Object.values(_layers).map(({ _leaflet_id }) => {\n        //setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\n      });\n\n    }\n    function onPolygonCreated(e) {\n\n      addFloorCounter++;\n      if (addFloorCounter === activeFloor.blocks.length) {\n        let latlngs = e.layer.getLatLngs();\n        latlngs = latlngs.length > 0 ? latlngs[0] : latlngs;\n\n        crupdateLayer2ActiveFloor(latlngs, null, null)\n\n        addFloorCounter = 0;\n      }\n\n\n\n\n\n    }\n\n    function onDeleted() {\n\n    }\n\n\n    return (\n      <div>\n        <FeatureGroup ref={editLayerRef}>\n          <EditControl\n            position=\"topright\"\n            onMounted={onMounted}\n            onCreated={onPolygonCreated}\n            onEdited={onEditPath}\n            onDeleted={onPolygonDeleted}\n            draw={{\n              polygon: true,\n              circle: false,\n              polyline: false,\n              marker: false,\n              rectangle: false,\n              circlemarker: false\n            }}\n\n\n            {...props}\n          />\n          {/* <Polygon positions={activeFloorBoundary} onClick={handleLayerClick}> </Polygon> */}\n        </FeatureGroup>\n      </div>\n    );\n  }\n\n  function EditableGroup(props) {\n    const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n    function handleLayerClick(e, drawControl) {\n      setSelectedLayerIndex(e.target.feature.properties.editLayerId);\n    }\n\n    let dataLayer = new L.GeoJSON(props.data);\n    let layers = [];\n    let i = 0;\n    dataLayer.eachLayer((layer) => {\n      layer.feature.properties.editLayerId = i;\n      layers.push(layer);\n      i++;\n    });\n\n    return (\n      <div>\n        <div>\n\n          {layers.map((layer, i) => {\n            return (\n              <EditableLayer\n                key={i}\n                layer={layer}\n                showDrawControl={i === selectedLayerIndex}\n                onLayerClicked={handleLayerClick}\n              />\n            );\n          })}\n        </div>\n\n        <div>\n\n          {/* <FeatureGroup>\n            <EditControl\n            position=\"topright\"\n            onMounted={onMounted}\n            onCreated={onPolygonCreated}\n            onEdited={onEditPath}\n            onDeleted={onPolygonDeleted}\n            draw={{\n              polygon: true,\n              circle: false,\n              polyline: false,\n              marker: false,\n              rectangle: false,\n              circlemarker: false\n            }}\n\n\n            {...props}\n          />\n          </FeatureGroup> */}\n        </div>\n      </div>\n    );\n  }\n\n\n\n  const updateFloor = {\n\n    floorno: markers.length + 1,\n    description: \"newDesc\",\n    color: '#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6),\n    blocks: [],\n    boundaries: []\n  }\n\n  //const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n  const [addFloor, setAddFloor] = useState(false);\n\n  const _onFeatureGroupReady = (ref) => {\n    if (ref !== undefined && ref !== null) {\n      let leafletFG = ref.leafletElement;\n      if (customLayer.length > 0) {\n        customLayer.eachLayer(layer => leafletFG.addLayer(layer));\n      }\n    }\n  }\n  const handleDrawPolygonClick = (e) => {\n    const activeFloorLcl = activeFloor;\n    const polygonType = e.target.value;\n\n    switch (polygonType) {\n      case \"BO\":\n\n        break;\n\n      case \"BL\":\n\n        break;\n\n      default:\n        break;\n    }\n    if (activeFloorLcl !== undefined && activeFloorLcl !== null) {\n      if (activeFloorLcl.boundaries.length > 3) {\n        const { layerType, layer } = e;\n        if (layerType === \"polygon\") {\n          const { _leaflet_id } = layer;\n          setMapLayers((layers) => [\n            ...layers,\n            { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n\n            // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n          ]);\n        }\n        //Edit this method to perform other actions\n\n        if (!drawing) {\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n        } else {\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n        }\n\n        setDrawing(!drawing)\n\n      }\n\n    }\n\n\n\n  }\n  //let dataLayer = new L.GeoJSON(props.data);\n\n\n\n  const onShapeDrawn = (e) => {\n\n    setDrawing(false)\n\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n\n    }\n\n    const mar = markers;\n\n    for (var k = 0; k < mar.length; k++) {\n\n      let boundary_id = boundaryid;\n\n      boundary_id = layer._leaflet_id;\n\n\n      setBoundaryid(boundary_id);\n      console.log(boundaryid);\n\n\n\n    }\n\n\n\n\n\n\n\n    // e.layer.on('click', () => {\n    //     \n    //     setDrawing(layer);\n    //     //setSelectedLayerIndex(e.target.boundaryid);\n    //     console.log(selectedLayerIndex);\n    //     \n    //   editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n    // })\n    e.layer.on('contextmenu', () => {\n      //do some contextmenu action here\n    })\n    e.layer.bindTooltip(\"Text\",\n      {\n        className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n        sticky: true,\n        direction: 'right'\n      }\n    );\n  }\n  function handleLayerClick(e, drawControl) {\n\n\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n\n    }\n\n    let drawingLcl = drawing;\n    drawingLcl = layer;\n    setDrawing(drawingLcl);\n    //   setSelectedLayerIndex(e.target.boundaryid);\n    //     console.log(selectedLayerIndex);\n\n\n\n\n\n\n    //editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n\n  }\n\n  //   e.layer.on('click', () => {\n  //     \n  //     setSelectedLayerIndex(e.target.boundaryid);\n  //     console.log(selectedLayerIndex);\n  //     \n  //   editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  // })\n  function crupdateLayer2ActiveFloor(latlngs, polygonId, floorIndex) {\n    let coordinates = []\n    for (let latlngsIdx = 0; latlngsIdx < latlngs.length; latlngsIdx++) {\n\n      const latlng = latlngs[latlngsIdx];\n      let coor1 = []\n      const lat = latlng.hasOwnProperty('lat') ? latlng.lat : false;\n      const lng = latlng.hasOwnProperty('lng') ? latlng.lng : false;\n\n      if (!(lat === false || lng === false)) {\n\n        coor1.push(lat);\n        coor1.push(lng);\n        coordinates.push(coor1);\n\n      }\n    }\n    let activeFloor4crup = activeFloor;\n    if (polygonId === null) {\n      //ask description\n\n      activeFloor4crup.blocks.push({ blockId: new Date().getTime().toString(), text: \"\", bounds: coordinates });\n\n    } else {\n      for (let flindex = 0; flindex < activeFloor4crup.blocks.length; flindex++) {\n        const block = activeFloor4crup.blocks[flindex];\n        if (block.blockId === polygonId) {\n\n          activeFloor4crup.blocks[flindex].bounds = coordinates\n        }\n\n      }\n    }\n    updateBuildingFromActiveFloor(floorIndex)\n\n\n  }\n  function updateBuildingFromActiveFloor(floorIndex) {\n\n    let detailsLocal = details;\n    let markerLcl = markers;\n    if (markerLcl !== undefined && markerLcl !== null) {\n      if (markers.length >= 1 && floorIndex >= 0) {\n        markerLcl[floorIndex] = activeFloor;\n        detailsLocal.floors = markerLcl;\n        setDetails(detailsLocal);\n      }\n    }\n\n  }\n  function reverseCoordinate(coor) {\n    let retCoor = [];\n    if (coor !== undefined && coor !== null) {\n      if (coor.length > 0) {\n        for (let coorIdx = 0; coorIdx < coor.length; coorIdx++) {\n          const bound = coor[coorIdx];\n          let row = [];\n          if (bound.length === 2) {\n            row.push(bound[1]);\n            row.push(bound[0]);\n            retCoor.push(row);\n          }\n        }\n\n      }\n    }\n    return retCoor;\n  }\n\n\n  const ondetailChange = (e) => {\n    debugger;\n    let detailLcl = details;\n    const value = e.target.value;\n    const property = e.target.getAttribute('property');\n    if (property !== undefined && property !== null && property !== '') {\n      detailLcl[property] = value;\n      setDetails(detailLcl);\n\n\n    }\n\n\n  }\n  const handleSaveFloor = (e) => {\n    let detailsLocal = details;\n    const markersLocal = markers;\n    details.floors = markersLocal\n\n\n    service\n      .updateBuilding(details.id, details)\n\n  }\n  function block2Layer(iBlock, floorIndex, floorColor) {\n\n\n    return {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"id\": iBlock.blockId,\n        \"ground\": floorIndex,\n\n      },\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"color\": floorColor,\n        \"coordinates\": [reverseCoordinate(iBlock.bounds)]\n      }\n    }\n\n\n\n  }\n\n  function onFloorSelect(e, data) {\n    const index = e.target.value;\n    let selectedFloorPolygonLayers = [];\n    let activeFloorSel = markers[index];\n    const floorColor = '#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6);\n\n    for (let blockIdx = 0; blockIdx < activeFloorSel.blocks.length; blockIdx++) {\n      const blockPolygon = activeFloorSel.blocks[blockIdx];\n      const geoJsonObj = block2Layer(blockPolygon, index, floorColor);\n\n\n      selectedFloorPolygonLayers.push(geoJsonObj);\n\n    }\n\n    const featureCollection = {\n      \"type\": \"FeatureCollection\",\n      \"name\": \"\",\n      \"crs\": {\n        \"type\": \"name\",\n        \"properties\": {\n          \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\"\n        }\n      },\n      \"features\": selectedFloorPolygonLayers\n    };\n    // const floorLayers = new L.GeoJSON(featureCollection);\n\n    // setActiveFloorPolygons(floorLayers.getLayers());\n    setselectedFloorGeoData(featureCollection);\n    setActiveFloorBoundary(activeFloorSel.boundaries);\n    setActiveFloor(activeFloorSel);\n\n  }\n\n\n\n  const addressCardStyle = {\n    backgroundImage: `url(${require('./33.png')})`,\n\n    backgroundSize: 'cover',\n\n    height: \"423px\",\n\n  }\n\n  let floor = {};\n  useEffect(() => {\n\n    var refTemp = refno.replace(\"/EditBuilding/\", \"\");\n    service\n      .getBuilding(refTemp)\n      .then(selBuilding => {\n        console.log(\"returning\", selBuilding)\n\n        setMarkers(selBuilding[0].floors);\n        if (selBuilding[0].floors.length > 0) {\n          setActiveFloor(selBuilding[0].floors[0]);\n        } else {\n          setActiveFloor(\n            {\n              \"floorno\": \"1\",\n              \"description\": \"\",\n              \"color\": \"#f18d00\",\n              \"blocks\": []\n            }\n\n          );\n        }\n\n\n\n        setDetails(selBuilding[0]);\n\n        mapRef.current.leafletElement.flyTo([selBuilding[0].latitude, selBuilding[0].longitude], 16)\n\n        // setBoundary(selBuilding[0].boundary.geometry.coordinates[0]);\n\n        let ml = mapLayers;\n\n\n\n\n      })\n\n  }, [])\n\n  function toggle() {\n    setAddFloor(!addFloor);\n  }\n\n  const moveActiveFloor = () => {\n    const markersLcl = markers;\n\n    if (activeFloor !== undefined && activeFloor !== null) {\n      for (let i = 0; i < markersLcl.length; i++) {\n\n        if (activeFloor.floorno === markersLcl[i].floorno) {\n          markersLcl[i].description = activeFloor.description;\n          markersLcl[i].blocks = activeFloor.blocks;\n          markersLcl[i].boundaries = activeFloor.boundaries;\n\n        }\n      }\n      setMarkers(markersLcl);\n    }\n\n  }\n  const _onCreate = (e) => {\n    console.log(e);\n\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n\n      setMapLayers((layers) => [\n        ...layers,\n        { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n      ]);\n    }\n  };\n\n\n  const _onEdited = (e) => {\n\n    // console.log(e);\n    // const {\n    //   layers: { _layers },\n    // } = e;\n\n    // Object.values(_layers).map(({ _leaflet_id, editing }) => {\n    //   setMapLayers((layers) =>\n    //     layers.map((l) =>\n    //       l.id === _leaflet_id\n    //         ? { ...l, latlngs: { ...editing.latlngs[0] } }\n    //         : l\n    //     )\n    //   );\n    // });\n  };\n\n  const _onDeleted = (e) => {\n    console.log(e);\n    const {\n      layers: { _layers },\n    } = e;\n\n    Object.values(_layers).map(({ _leaflet_id }) => {\n      setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\n    });\n  };\n\n  const deleteActiveFloor = () => {\n    debugger;\n    const activeFloorLocal = activeFloor;\n    const markersL = markers;\n    const markersAfterDeletion = [];\n    for (let j = 0; j < markersL.length; j++) {\n      const marker = markersL[j];\n      if (marker.floorno !== activeFloorLocal.floorno) {\n        markersAfterDeletion.push(marker);\n      }\n\n    }\n\n    setMarkers(markersAfterDeletion);\n    // setActiveFloorPolygons(markersAfterDeletion[0].blocks);\n    // setActiveFloorBoundary(markersAfterDeletion[0].boundaries);\n    // setActiveFloor(markersAfterDeletion[0]);\n\n    if (markersAfterDeletion.length > 0) {\n      setActiveFloor(markersAfterDeletion[0].floors[0]);\n    } else {\n      setActiveFloor(\n        {\n          \"floorno\": \"1\",\n          \"description\": \"\",\n          \"color\": \"#f18d00\",\n          \"blocks\": []\n        }\n\n      );\n    }\n  }\n\n\n  const handleAddFloor = () => {\n\n    const newFloor = {\n      \"floorno\": markers.length + 1,\n      \"description\": newDesc,\n      \"color\": \"#f18d00\",\n      \"blocks\": [],\n      \"boundaries\": []\n    }\n    setActiveFloor(newFloor);\n    setActiveFloorBoundary(newFloor.boundaries);\n    setActiveFloorPolygons(newFloor.blocks);\n    const markersLocal = markers;\n    markersLocal.push(newFloor);\n    setMarkers(markersLocal);\n\n    setNewDesc(\"\");\n  }\n\n\n  const changeHandlerDesc = (event) => setNewDesc(event.target.value);\n  const updateIsEdit = (e, value) => setIsEdit(value);\n\n\n\n  const handleEditPolygonClick = (e) => {\n    const drawingLocal = drawing;\n\n\n  }\n\n\n\n  return (\n    <div>\n      <div class=\"row\">\n        <Breadcrumb class=\"mb-4\">\n          <BreadcrumbItem><a href=\"/map1\"><i\n            className=\"ri-home-4-line mr-1 float-left\" />Home</a></BreadcrumbItem>\n          <BreadcrumbItem active>{details.name}</BreadcrumbItem>\n        </Breadcrumb>\n\n      </div>\n\n      <div>\n\n\n\n        <div className=\"row\" style={{ margin: \".6%\" }}>\n\n          <div className=\"col-lg-4\">\n            <div className=\"iq-card iq-card-block iq-card-stretch iq-card-height bg-transparent\">\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Building Id</Label>\n                <Input type=\"text\" className=\"form-control\"\n                  defaultValue={details.id} disabled />\n              </FormGroup>\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Building Name</Label>\n                <Input type=\"text\" className=\"form-control\"\n                  defaultValue={details.name} property=\"name\" onChange={ondetailChange} />\n              </FormGroup>\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Street</Label>\n                <Input type=\"text\" className=\"form-control\"\n                  defaultValue={details.street} property=\"street\" onChange={ondetailChange} />\n              </FormGroup>\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Apartment</Label>\n                <Input type=\"text\" className=\"form-control\" property=\"Apartment\" onChange={ondetailChange}\n                  defaultValue={details.Apartment} />\n              </FormGroup>\n\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Doornum</Label>\n                <Input type=\"text\" className=\"form-control\" property=\"doornum\" onChange={ondetailChange}\n                  defaultValue={details.doornum} />\n              </FormGroup>\n\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Region</Label>\n                <Input type=\"text\" className=\"form-control\" property=\"region\" onChange={ondetailChange}\n                  defaultValue={details.region} />\n              </FormGroup>\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Country</Label>\n                <Input type=\"text\" className=\"form-control\" property=\"country\" onChange={ondetailChange}\n                  defaultValue={details.country} />\n\n              </FormGroup>\n\n              <Button className=\"btn btn-primary\"\n                style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\", \"margin-right\": \".05rem\" }} color=\"primary\" onClick={handleSaveFloor}> SaveBuilding </Button>\n\n            </div>\n          </div>\n\n\n          <div className=\"col-lg-8\">\n            <div className=\"iq-card overflow-hidden\">\n              <h1 className=\"display-4\">{activeFloor.description}</h1>\n\n              <div id=\"home-chart-02\">\n                <Map center={[60.21846434365596, 24.811831922452843]} zoom={17} ref={mapRef} >\n                  <Control position=\"topright\">\n                    {/* <button class=\"primary\" onClick={handleDrawPolygonClick} value=\"BO\"\n                    style={{ \"font-size\": \"1.5rem\", \"margin-left\": \".05rem\" ,\"margin-right\": \".05rem\" }}>\n                    Add Floor\n                        </button> */}\n\n\n\n                    <Button className=\"btn btn-primary\" color=\"primary\" onClick={() => toggle(\"addFloor\")}> AddFloor </Button>{' '}\n\n\n                    <Modal isOpen={addFloor} toggle={() => toggle(\"addFloor\")} className=\"modal-sm\">\n                      <ModalHeader className=\"btn btn-primary\" toggle={() => toggle(\"addFloor\")}>Add Floor</ModalHeader>\n                      <ModalBody>\n\n\n                        <p>Floor: {markers.length + 1}</p>\n\n                        <p>Enter Floor Description</p>\n                        <input type=\"text\" onChange={changeHandlerDesc} value={newDesc}\n                          lur={updateIsEdit} />\n\n                      </ModalBody>\n                      <ModalFooter>\n\n                        <Button color=\"btn btn-primary\" onClick={() => {\n                          toggle(\"addFloor\");\n                          // handleAddFloor(); \n                          handleAddFloor();\n\n                        }}>OK</Button>{' '}\n                        <Button color=\"btn btn-primary\" onClick={() => toggle(\"addFloor\")}>Cancel</Button>\n                      </ModalFooter>\n                    </Modal>\n\n                    <Button class=\"btn btn-primary\" onClick={deleteActiveFloor} value=\"BO\"\n                    >\n                      Delete Floor\n                        </Button>\n                    {/* <button class=\"btn btn-primary\" onClick={handleDrawPolygonClick} value=\"BO\"\n                    style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\", \"margin-right\": \".05rem\" }}>\n                    Manage Boundary\n                        </button> */}\n\n                    <button class=\"btn btn-primary\" onClick={handleDrawPolygonClick} value=\"BL\"\n                      style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\" }}>\n                      AddBlock\n                        </button>\n                    {/* \n                  <button class=\"btn btn-primary\" onClick={handleEditPolygonClick}\n                    style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\" }}>\n                    EditBlock\n                        </button> */}\n                  </Control>\n                  <LayersControl position=\"topright\">\n                    <LayersControl.BaseLayer\n                      checked={false}\n                      name=\"Esri WorldImagery\"\n                      group=\"BaseLayers\"\n                    >\n                      <TileLayer\n                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                        attribution='&copy; <a href=\"Esri &mdash\">Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community</a> contributors'\n                      />\n                    </LayersControl.BaseLayer >\n                    <LayersControl.BaseLayer\n                      checked={true}\n                      name=\"OpenStreetMap\"\n                      group=\"BaseLayers\"\n                    >\n                      <TileLayer\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                      />\n                    </LayersControl.BaseLayer >\n\n                  </LayersControl>\n\n                  <EditableGroup data={selectedFloorGeoData} >\n\n                  </EditableGroup>\n\n\n                  {/* <FeatureGroup>\n                  \n                  {activeFloorPolygons.map((polygonObjLayer,polyIdx)=>(\n                      <div>\n                      <EditControl\n                      layer={polygonObjLayer}\n                      position='topleft'\n                      onCreated={onShapeDrawn}\n                      onEdited = {_onEdited}\n                      onDeleted = {_onDeleted}\n                      \n                      \n                      \n                      //here you can specify your shape options and which handler you want to enable\n                      draw={{\n                        rectangle: false,\n                        polygon: true,\n                        circle: false,\n                        polyline: false,\n                        circlemarker: false,\n                        marker: false\n  \n                      }}\n\n                    >\n  \n  \n  \n  \n                    </EditControl>\n\n                    <Polygon positions={polygonObj.bounds} ></Polygon>\n                    </div>\n                    \n                  ))}*/}\n                  {/* <Polygon positions={activeFloorBoundary} onClick={handleLayerClick}> </Polygon> */}\n\n\n\n                  {/* </FeatureGroup>  */}\n\n\n\n                  <Control position=\"topright\" >\n                    <div>\n                      {\n                        markers.map((mLr, didx) => (\n\n\n\n                          <div key={mLr.id}>\n\n                            <button class=\"primary\" value={didx} onClick={onFloorSelect} style={{ \"font-size\": \"1.5rem\", \"margin-left\": \".05rem\" }}>\n                              {mLr.floorno}\n                            </button>\n\n\n                          </div>\n                        ))\n\n                      }\n\n                    </div>\n                  </Control>\n                  {/* {if(details!==undefined&&details.boundaries.length>0)\n                    <Polygon positions={details.boundaries} ></Polygon>\n                  } */}\n\n                  <Boundary></Boundary>\n\n\n                </Map>\n              </div>\n            </div>\n          </div>\n        </div>\n\n\n\n\n      </div>\n    </div>\n  )\n}\n\n\nexport default EditBuilding;"]},"metadata":{},"sourceType":"module"}