{"ast":null,"code":"import _objectSpread from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/likhitha/Documents/cms/client/src/components/dashboard/EditFloormap.js\",\n    _this = this,\n    _s2 = $RefreshSig$();\n\nimport { CardBody, Card, ButtonGroup, ButtonToolbar, Form, FormGroup, Label, Input, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap';\nimport React, { useRef, useEffect, useState, useMap } from \"react\";\nimport { Col, Row } from \"reactstrap\";\nimport { EditControl } from \"react-leaflet-draw\"; // import \"./assets/leaflet.css\"\n// import \"./assets/leaflet.draw.css\"\n\nimport { Map, TileLayer, FeatureGroup, Marker, Polyline, Popup, Polygon, Tooltip, Rectangle, LayersControl, LayerGroup, useMapEvents, useLeaflet } from 'react-leaflet';\nimport service from './services';\nimport { makeStyles, Button } from \"@material-ui/core\";\nimport { popup } from 'leaflet';\nimport { text } from 'body-parser';\nimport { divIcon } from 'leaflet';\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    map: {\n      height: \"calc(90vh - 90px)\",\n      width: '60%',\n      zIndex: 0\n    },\n    buttonWrapper: {\n      zIndex: 1,\n      position: \"absolute\",\n      bottom: theme.spacing(2),\n      marginLeft: \"30%\",\n      marginBottom: \"8%\",\n      transform: \"translateX(-50%)\"\n    },\n    buttonStyle: {\n      margin: \"10px\"\n    },\n    headerWrapper: {\n      zIndex: 1,\n      marginLeft: theme.spacing(3),\n      marginTop: theme.spacing(1)\n    }\n  };\n});\nvar modalStyles = {\n  width: 500,\n  height: 500\n};\n\nvar EditFloorMap = function EditFloorMap(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      addFloor = _useState2[0],\n      setAddFloor = _useState2[1]; //const mapGlobal = useMap();\n\n\n  var classes = useStyles(props);\n  var editRef = useRef();\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      markers = _useState4[0],\n      setMarkers = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newPosition = _useState6[0],\n      setNewPosition = _useState6[1]; //const [markers1, setMarkers1] = useState([]);\n\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      position = _useState8[0],\n      setPosition = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      mapLayers = _useState10[0],\n      setMapLayers = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      newDesc = _useState12[0],\n      setNewDesc = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      isEdit = _useState14[0],\n      setIsEdit = _useState14[1];\n\n  var _useState15 = useState(''),\n      _useState16 = _slicedToArray(_useState15, 2),\n      floors = _useState16[0],\n      setFloors = _useState16[1];\n\n  var _useState17 = useState(''),\n      _useState18 = _slicedToArray(_useState17, 2),\n      blocks = _useState18[0],\n      setBlocks = _useState18[1];\n\n  var _useState19 = useState(''),\n      _useState20 = _slicedToArray(_useState19, 2),\n      newText = _useState20[0],\n      setNewText = _useState20[1];\n\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      drawing = _useState22[0],\n      setDrawing = _useState22[1];\n\n  var _useState23 = useState(false),\n      _useState24 = _slicedToArray(_useState23, 2),\n      showDrawBlock = _useState24[0],\n      setShowDrawBlock = _useState24[1];\n\n  var _useState25 = useState(''),\n      _useState26 = _slicedToArray(_useState25, 2),\n      polyFlag = _useState26[0],\n      setPolyFlag = _useState26[1];\n\n  var _useState27 = useState(''),\n      _useState28 = _slicedToArray(_useState27, 2),\n      activeFloor = _useState28[0],\n      setActiveFloor = _useState28[1];\n\n  var _useState29 = useState(''),\n      _useState30 = _slicedToArray(_useState29, 2),\n      buildingId = _useState30[0],\n      setBuildingId = _useState30[1]; //const editRef = useRef();\n  //const [map, setMap] = useState(null);\n\n\n  var _useState31 = useState(false),\n      _useState32 = _slicedToArray(_useState31, 2),\n      editBoundaries = _useState32[0],\n      setEditBoundaries = _useState32[1];\n\n  var _useState33 = useState(false),\n      _useState34 = _slicedToArray(_useState33, 2),\n      editBlock = _useState34[0],\n      setEditBlock = _useState34[1];\n\n  var _useState35 = useState(false),\n      _useState36 = _slicedToArray(_useState35, 2),\n      blockDescription = _useState36[0],\n      setBlockDescription = _useState36[1];\n\n  var _useState37 = useState(false),\n      _useState38 = _slicedToArray(_useState37, 2),\n      deleteFloor = _useState38[0],\n      setDeleteFloor = _useState38[1];\n\n  var _useState39 = useState(''),\n      _useState40 = _slicedToArray(_useState39, 2),\n      blockName = _useState40[0],\n      setBlockName = _useState40[1];\n\n  var _useState41 = useState(''),\n      _useState42 = _slicedToArray(_useState41, 2),\n      blockDesc = _useState42[0],\n      setBlockDesc = _useState42[1];\n\n  var _useState43 = useState(''),\n      _useState44 = _slicedToArray(_useState43, 2),\n      icon = _useState44[0],\n      setIcon = _useState44[1];\n\n  var _useState45 = useState(''),\n      _useState46 = _slicedToArray(_useState45, 2),\n      activeLayer = _useState46[0],\n      setActiveLayer = _useState46[1];\n\n  var _useState47 = useState(0),\n      _useState48 = _slicedToArray(_useState47, 2),\n      selectedLayerIndex = _useState48[0],\n      setSelectedLayerIndex = _useState48[1]; //const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n\n  var leaflet = useLeaflet();\n  var editLayerRef = React.useRef();\n  var drawControlRef = React.useRef();\n  var map = leaflet.map;\n  var updateFloor = {\n    floorno: 0,\n    description: \"newDesc\",\n    color: '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6),\n    blocks: [],\n    boundaries: []\n  };\n\n  function _toggle() {\n    setAddFloor(!addFloor);\n  }\n\n  function toggleBlock() {\n    setEditBlock(!editBlock);\n  }\n\n  function toggleBoundaries() {\n    setEditBoundaries(!editBoundaries);\n  }\n\n  function toggleBlockDescription() {\n    setBlockDescription(!blockDescription);\n  }\n\n  function toggleDeleteFloor() {\n    setDeleteFloor(!deleteFloor);\n  }\n\n  var onChangeName = function onChangeName(e) {\n    e.preventDefault();\n    setBlockName(e.target.value);\n  };\n\n  var onChangeDesc = function onChangeDesc(e) {\n    e.preventDefault();\n    setBlockDesc(e.target.value);\n  };\n\n  var onChangeIcon = function onChangeIcon(e) {\n    e.preventDefault();\n    setIcon(e.target.value);\n  }; //const polygonCenter = markers[0].floors[0].blocks[0]._bounds.getCenter();\n  // const onSubmit = e => {\n  //   e.preventDefault();\n  //   const newUser = {\n  //     name: blockName,\n  //     description: blockDesc,\n  //     icon: icon\n  //   };\n  // }\n  // function submitHandler(e) {\n  //   e.preventDefault();\n  //   setBlockName(e.target.value);\n  //   setBlockDesc(e.target.value);\n  //   setIcon(e.target.value);\n  // }\n\n\n  function GlobalMapComponent() {\n    _s();\n\n    var mapGlobal = useMap();\n    mapGlobal.on('baselayerchange', function (e) {\n      console.log('Layer name -> ', e.name); //console.log('Layer URL -> ', e.layer.options.url);\n      //console.log('Layer attribution -> ', e.layer.options.attribution);\n    });\n    console.log('map center:', mapGlobal.getCenter());\n    return null;\n  }\n\n  _s(GlobalMapComponent, \"9NUevDr/h+ma6c6jR6sb9M2L0Fo=\", false, function () {\n    return [useMap];\n  });\n\n  var handleEditFloor = function handleEditFloor(e) {\n    setBuildingId(e.target.value);\n    setDrawing(true);\n    var layerType = e.layerType,\n        layer = e.layer;\n    debugger; //  if (layerType === \"polygon\") {\n    //     const { _leaflet_id } = layer;\n    //     setMapLayers((layers) => [\n    //       ...layers,\n    //   { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n    //     // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n    //     ]);\n    //   }\n\n    if (buildingId === markers[0].floors[0].boundaryLeaflet_id) {\n      if (drawing) {\n        //editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n        editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable();\n      } else {\n        editRef.current.leafletElement._toolbars.edit._modes.edit.handler.save();\n\n        editRef.current.leafletElement._toolbars.edit._modes.edit.handler.disable();\n      }\n    } //     console.log(layer)\n    // console.log(mapLayers)\n    //         e.layer.on('click', () => {\n    //           debugger;\n    //             editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n    //         })\n    //         e.layer.on('contextmenu', () => {\n    //             //do some contextmenu action here\n    //         })\n    //         e.layer.bindTooltip(\"Text\", \n    //             {\n    //               className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n    //               sticky: true,\n    //               direction: 'right'\n    //             }\n    //         );\n\n  };\n\n  var handleReset = function handleReset(e) {\n    debugger;\n\n    for (var i = 0; i < markers[0].floors.length; i++) {\n      if (markers[0].floors[i].description === activeFloor.name) {\n        markers[0].floors[i].boundaries = markers[0].floors[i].boundaries_backup;\n        markers[0].floors[i].boundaries_backup = [];\n        break;\n      }\n    }\n  }; // const handleFloorReset = (e) => {\n  //   debugger;\n  //   if(polyFlag==='B')\n  //   for (var i = 0; i < markers[0].floors.length; i++) { \n  //     if(markers[0].floors[i].description===activeFloor.name){\n  //         markers[0].floors[i].blocks[i].bounds= markers[0].floors[i].blocks[i].bounds_backup;\n  //         markers[0].floors[i].blocks[i].bounds_backup = [];\n  //         break;\n  // }\n  // }\n  // }\n\n\n  var handleBlock = function handleBlock(e) {\n    setPolyFlag('L');\n    debugger;\n\n    for (var i = 0; i < markers[0].floors.length; i++) {\n      if (markers[0].floors[i].description === activeFloor.name) {\n        if (markers[0].floors[i].boundaries.length > 0) {\n          markers[0].floors[i].blocks[i].bound_backup = markers[0].floors[i].blocks[i].bounds;\n          markers[0].floors[i].blocks[i].bounds = [];\n        }\n\n        break;\n      }\n    } //toggleBlockDescription();\n    //toggleBlockDescription();\n\n\n    if (!drawing) {\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable();\n    } else {\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape();\n\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable();\n    }\n\n    setDrawing(!drawing);\n  };\n\n  var handleBoundaries = function handleBoundaries(e) {\n    debugger;\n\n    for (var i = 0; i < markers[0].floors.length; i++) {\n      if (markers[0].floors[i].description === activeFloor.name) {\n        if (markers[0].floors[i].boundaries.length > 0) {\n          markers[0].floors[i].boundaries_backup = markers[0].floors[i].boundaries;\n          markers[0].floors[i].boundaries = [];\n        }\n\n        break;\n      }\n    }\n\n    if (!drawing) {\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable();\n    } else {\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape();\n\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable();\n    }\n\n    setDrawing(!drawing);\n  };\n\n  var handleManageBoundaries = function handleManageBoundaries(e) {\n    debugger;\n    console.log(activeFloor);\n    console.log(markers);\n    setPolyFlag('B');\n\n    for (var i = 0; i < markers[0].floors.length; i++) {\n      if (markers[0].floors[i].description === activeFloor.name) {\n        debugger;\n\n        if (markers[0].floors[i].boundaries.length > 0) {\n          debugger;\n          toggleBoundaries();\n        } else {\n          (function () {\n            var layerType = e.layerType,\n                layer = e.layer;\n\n            if (layerType === \"polygon\") {\n              var _leaflet_id = layer._leaflet_id;\n              setMapLayers(function (layers) {\n                return [].concat(_toConsumableArray(layers), [{\n                  id: _leaflet_id,\n                  latlngs: layer.getLatLngs()[0]\n                } // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n                ]);\n              });\n            }\n\n            debugger;\n\n            if (!drawing) {\n              editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable();\n            } else {\n              editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape();\n\n              editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable();\n            }\n\n            setDrawing(!drawing);\n          })();\n        }\n      }\n    }\n\n    debugger;\n  };\n\n  var handleClick = function handleClick() {\n    //Edit this method to perform other actions\n    if (!drawing) {\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable();\n    } else {\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape();\n\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable();\n    }\n\n    setDrawing(!drawing);\n  };\n\n  var handleAddFloor = function handleAddFloor() {\n    debugger;\n  };\n\n  var handleClickFloor = function handleClickFloor() {\n    debugger;\n    service.getBuilding(refno).then(function (building) {\n      console.log(\"returning\", building);\n      updateFloor.description = newDesc;\n      building[0].floors.push(updateFloor);\n      setMarkers(building);\n    });\n  };\n\n  var addBoundaries = function addBoundaries(e) {\n    console.log(e);\n    var layerType = e.layerType,\n        layer = e.layer;\n\n    if (layerType === \"polygon\") {\n      var _leaflet_id = layer._leaflet_id;\n      setMapLayers(function (layers) {\n        return [].concat(_toConsumableArray(layers), [{\n          latlngs: layer.getLatLngs()[0]\n        }]);\n      }); // setMapLayers((layers) => [\n      //   ...layers,\n      //   { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n      // ]);\n    }\n\n    setDrawing(false);\n    e.layer.on('click', function () {\n      editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable();\n    });\n    e.layer.on('contextmenu', function () {//do some contextmenu action here\n    });\n    e.layer.bindTooltip(\"Text\", {\n      className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visiblecg4',\n      sticky: true,\n      direction: 'right'\n    });\n  };\n\n  var handleMap = function handleMap(e) {\n    debugger;\n    var map = editRef.current.leafletElement._map;\n    map.on(\"baselayerchange\", function (activeFloor, activeLayer) {\n      //     //do whatever\n      debugger;\n      console.log(activeFloor);\n      setActiveFloor(activeFloor);\n      console.log(map);\n    });\n  };\n\n  var addPolygon = function addPolygon(e) {\n    console.log(e);\n    var layerType = e.layerType,\n        layer = e.layer;\n\n    if (layerType === \"polygon\") {\n      var _leaflet_id = layer._leaflet_id;\n      setMapLayers(function (layers) {\n        return [].concat(_toConsumableArray(layers), [{\n          latlngs: layer.getLatLngs()[0]\n        }]);\n      });\n    }\n\n    setDrawing(false);\n  };\n\n  function handleLayerClick(e) {\n    setSelectedLayerIndex(e.target.activeFloor._leaflet_id);\n  }\n\n  var onBlockDrawn = function onBlockDrawn(e) {\n    debugger;\n    setPolyFlag('L');\n    console.log(e);\n    var layerType = e.layerType,\n        layer = e.layer;\n    toggleBlockDescription();\n\n    for (var j = 0; j < markers[0].floors.length; j++) {\n      if (markers[0].floors[j].description === activeFloor.name) {\n        if (markers[0].floors[j].boundaries.length > 0) {\n          debugger;\n\n          if (!drawing) {\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable();\n          } else {\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape();\n\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable();\n          }\n\n          setDrawing(!drawing);\n        } //   else {\n        //    debugger;\n        //    toggleBlock();\n        //  }\n        //  else{\n        //    <popup>Please add boundaries before adding blocks</popup>\n        //  }\n\n      }\n    }\n  };\n\n  var onShapeDrawn = function onShapeDrawn(e) {\n    debugger;\n    console.log(e);\n    var layerType = e.layerType,\n        layer = e.layer;\n\n    if (layerType === \"polygon\") {\n      var _leaflet_id = layer._leaflet_id;\n\n      for (var j = 0; j < markers[0].floors.length; j++) {\n        if (markers[0].floors[j].description === activeFloor.name) {\n          if (polyFlag === 'B') {\n            // if(markers[0].floors[j].boundaries.length>0) {\n            //         debugger;\n            //       }\n            //    else{\n            markers[0].floors[j].boundaries = [];\n            debugger;\n\n            for (var k = 0; k < layer._latlngs[0].length; k++) {\n              var point = [layer._latlngs[0][k].lat, layer._latlngs[0][k].lng];\n              markers[0].floors[j].boundaries.push(point); //markers[0].floors[j].boundaryCenter.push(boundCenter);\n            } //markers[0].floors[j].boundaries= layer._latlngs\n\n\n            markers[0].floors[j].boundaryLeaflet_id = layer._leaflet_id;\n            markers[0].floors[j].boundaryCenter = [layer._bounds.getCenter()]; //}\n          } else if (polyFlag === 'L') {\n            var tempArray = []; //var tempCenter = [];\n\n            for (var n = 0; n < layer._latlngs[0].length; n++) {\n              var pointBlock = [layer._latlngs[0][n].lat, layer._latlngs[0][n].lng];\n              tempArray.push(pointBlock); //tempCenter.push(polygonCenter);\n            }\n\n            var polygonCenter = [layer._bounds.getCenter()];\n            var polygonId = layer._leaflet_id;\n            debugger;\n            var blockObj = {\n              id: polygonId,\n              name: blockName,\n              description: blockDesc,\n              icon: icon,\n              bounds: tempArray,\n              center: polygonCenter\n            };\n            markers[0].floors[j].blocks.push(blockObj);\n            blockObj = {};\n            debugger;\n\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable();\n          } //}\n\n        }\n      } // setMapLayers((layers) => [\n      //   ...layers,\n      //   [  _leaflet_id,  layer.getLatLngs()[0] ],\n      //   // { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n      //  //[ layer.getLatLngs()[0] ]  ,\n      // ]);\n      // \n\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: markers.map(function (name) {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [name.description, polyFlag, /*#__PURE__*/_jsxDEV(GlobalMapComponent, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 10\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 11\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 7\n      }, _this);\n    }\n\n    setDrawing(false);\n    e.layer.on('click', function () {\n      editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable();\n    });\n    e.layer.on('contextmenu', function () {//do some contextmenu action here\n    });\n    e.layer.bindTooltip(\"Text\", {\n      className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n      sticky: true,\n      direction: 'right'\n    });\n  };\n\n  function onMounted(ctl) {\n    drawControlRef.current = ctl;\n  }\n\n  useEffect(function () {\n    debugger;\n    service.getBuilding(refno).then(function (latlng) {\n      //console.log(LayersControl.getActiveBaseLayer().name)\n      console.log(\"returning\", latlng);\n      debugger;\n      updateFloor.floorno = latlng[0].floors.length + 1; //setMarkers(...markers, latlng)\n\n      setMarkers(latlng);\n      debugger;\n    });\n    console.log(mapLayers);\n  }, []);\n  var refno = window.location.pathname.replace('/EditFloorMap/', '');\n\n  var handleSaveFloor = function handleSaveFloor(e) {\n    e.preventDefault();\n    debugger;\n    service.updateBuilding(markers[0].id, markers[0]);\n  };\n\n  var handleDeleteFloor = function handleDeleteFloor(e) {\n    e.preventDefault();\n    debugger;\n  };\n\n  function handleLayerClick(e) {\n    setSelectedLayerIndex(e.target.markers.floors.blocks.id);\n  }\n\n  var _onCreate = function _onCreate(e) {\n    console.log(e);\n    var layerType = e.layerType,\n        layer = e.layer;\n\n    if (layerType === \"polygon\") {\n      var _leaflet_id = layer._leaflet_id;\n      setMapLayers(function (layers) {\n        return [].concat(_toConsumableArray(layers), [{\n          id: _leaflet_id,\n          latlngs: layer.getLatLngs()[0]\n        }]);\n      });\n    }\n  };\n\n  var _onEdited = function _onEdited(e) {\n    console.log(e);\n    var _layers = e.layers._layers;\n    Object.values(_layers).map(function (_ref) {\n      var _leaflet_id = _ref._leaflet_id,\n          editing = _ref.editing;\n      setMapLayers(function (layers) {\n        return layers.map(function (l) {\n          return l.id === _leaflet_id ? _objectSpread(_objectSpread({}, l), {}, {\n            latlngs: _objectSpread({}, editing.latlngs[0])\n          }) : l;\n        });\n      });\n    });\n  };\n\n  var _onDeleted = function _onDeleted(e) {\n    console.log(e);\n    var _layers = e.layers._layers;\n    Object.values(_layers).map(function (_ref2) {\n      var _leaflet_id = _ref2._leaflet_id;\n      setMapLayers(function (layers) {\n        return layers.filter(function (l) {\n          return l.id !== _leaflet_id;\n        });\n      });\n    });\n  };\n\n  var changeHandlerDesc = function changeHandlerDesc(event) {\n    return setNewDesc(event.target.value);\n  };\n\n  var updateIsEdit = function updateIsEdit(e, value) {\n    return setIsEdit(value);\n  };\n\n  var changeHandlerText = function changeHandlerText(event) {\n    return setNewText(event.target.value);\n  }; // const iconMarkup = renderToStaticMarkup(\n  //   markers[0].floors[0].blocks[0].description\n  //  );\n  // const textDesc = divIcon  ({\n  //   html: iconMarkup\n  // });\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      id: \"container\",\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: markers.filter(function (item) {\n          return item.id === refno;\n        }).map(function (filteredName) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              className: \"iq-example-row\",\n              id: \"container\",\n              children: /*#__PURE__*/_jsxDEV(Row, {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  className: \"col-4\",\n                  children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(Label, {\n                      htmlFor: \"exampleInputReadonly\",\n                      children: \"Building Id\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 729,\n                      columnNumber: 47\n                    }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                      type: \"text\",\n                      className: \"form-control\",\n                      id: \"exampleInputReadonly\",\n                      readOnly: \"\",\n                      defaultValue: filteredName.id,\n                      disabled: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 730,\n                      columnNumber: 47\n                    }, _this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 728,\n                    columnNumber: 47\n                  }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(Label, {\n                      htmlFor: \"exampleInputReadonly\",\n                      children: \"Building Name\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 735,\n                      columnNumber: 47\n                    }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                      type: \"text\",\n                      className: \"form-control\",\n                      id: \"exampleInputReadonly\",\n                      readOnly: \"\",\n                      defaultValue: filteredName.description\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 736,\n                      columnNumber: 47\n                    }, _this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 734,\n                    columnNumber: 47\n                  }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(Label, {\n                      htmlFor: \"exampleInputReadonly\",\n                      children: \"Street\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 741,\n                      columnNumber: 47\n                    }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                      type: \"text\",\n                      className: \"form-control\",\n                      id: \"exampleInputReadonly\",\n                      readOnly: \"\",\n                      defaultValue: filteredName.street\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 742,\n                      columnNumber: 47\n                    }, _this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 740,\n                    columnNumber: 47\n                  }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(Label, {\n                      htmlFor: \"exampleInputReadonly\",\n                      children: \"Apartment\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 747,\n                      columnNumber: 47\n                    }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                      type: \"text\",\n                      className: \"form-control\",\n                      id: \"exampleInputReadonly\",\n                      readOnly: \"\",\n                      defaultValue: filteredName.Apartment\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 748,\n                      columnNumber: 47\n                    }, _this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 746,\n                    columnNumber: 47\n                  }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(Label, {\n                      htmlFor: \"exampleInputReadonly\",\n                      children: \"Doornum\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 754,\n                      columnNumber: 47\n                    }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                      type: \"text\",\n                      className: \"form-control\",\n                      id: \"exampleInputReadonly\",\n                      readOnly: \"\",\n                      defaultValue: filteredName.doornum\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 755,\n                      columnNumber: 47\n                    }, _this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 753,\n                    columnNumber: 47\n                  }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(Label, {\n                      htmlFor: \"exampleInputReadonly\",\n                      children: \"Region\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 761,\n                      columnNumber: 47\n                    }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                      type: \"text\",\n                      className: \"form-control\",\n                      id: \"exampleInputReadonly\",\n                      readOnly: \"\",\n                      defaultValue: filteredName.region\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 762,\n                      columnNumber: 47\n                    }, _this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 760,\n                    columnNumber: 47\n                  }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(Label, {\n                      htmlFor: \"exampleInputReadonly\",\n                      children: \"Country\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 767,\n                      columnNumber: 47\n                    }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                      type: \"text\",\n                      className: \"form-control\",\n                      id: \"exampleInputReadonly\",\n                      readOnly: \"\",\n                      defaultValue: filteredName.country\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 768,\n                      columnNumber: 47\n                    }, _this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 766,\n                    columnNumber: 47\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 726,\n                  columnNumber: 25\n                }, _this), /*#__PURE__*/_jsxDEV(Col, {\n                  className: \"col-8\",\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    lg: 4,\n                    children: [/*#__PURE__*/_jsxDEV(Button, {\n                      className: \"btn btn-success\",\n                      color: \"primary\",\n                      onClick: function onClick() {\n                        return _toggle(\"addFloor\");\n                      },\n                      children: \" AddFloor \"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 813,\n                      columnNumber: 25\n                    }, _this), ' ', /*#__PURE__*/_jsxDEV(Modal, {\n                      isOpen: addFloor,\n                      toggle: function toggle() {\n                        return _toggle(\"addFloor\");\n                      },\n                      className: \"modal-sm\",\n                      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n                        className: \"btn btn-primary\",\n                        toggle: function toggle() {\n                          return _toggle(\"addFloor\");\n                        },\n                        children: \"Add Floor\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 817,\n                        columnNumber: 25\n                      }, _this), /*#__PURE__*/_jsxDEV(ModalBody, {\n                        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                          children: [\"Floor: \", filteredName.floors.length + 1]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 821,\n                          columnNumber: 27\n                        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n                          children: \"Enter Floor Description\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 823,\n                          columnNumber: 29\n                        }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          type: \"text\",\n                          onChange: changeHandlerDesc,\n                          value: newDesc,\n                          lur: updateIsEdit\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 824,\n                          columnNumber: 29\n                        }, _this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 818,\n                        columnNumber: 25\n                      }, _this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n                        children: [/*#__PURE__*/_jsxDEV(Button, {\n                          color: \"primary\",\n                          onClick: function onClick() {\n                            _toggle(\"addFloor\"); // handleAddFloor(); \n\n\n                            handleClickFloor();\n                          },\n                          children: \"OK\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 830,\n                          columnNumber: 25\n                        }, _this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n                          color: \"secondary\",\n                          onClick: function onClick() {\n                            return _toggle(\"addFloor\");\n                          },\n                          children: \"Cancel\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 836,\n                          columnNumber: 25\n                        }, _this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 828,\n                        columnNumber: 25\n                      }, _this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 816,\n                      columnNumber: 25\n                    }, _this), /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"btn btn-success\",\n                      color: \"primary\",\n                      onClick: handleSaveFloor,\n                      children: \" SaveFloor \"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 839,\n                      columnNumber: 12\n                    }, _this), /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"btn btn-success\",\n                      color: \"primary\",\n                      onClick: function onClick() {\n                        return toggleDeleteFloor(\"deleteFloor\");\n                      },\n                      children: \" DeleteFloor \"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 840,\n                      columnNumber: 12\n                    }, _this), ' ', /*#__PURE__*/_jsxDEV(Modal, {\n                      isOpen: deleteFloor,\n                      toggle: function toggle() {\n                        return toggleDeleteFloor(\"deleteFloor\");\n                      },\n                      className: \"modal-sm\",\n                      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n                        className: \"btn btn-primary\",\n                        toggle: function toggle() {\n                          return toggleDeleteFloor(\"deleteFloor\");\n                        },\n                        children: \"Delete Floor\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 844,\n                        columnNumber: 21\n                      }, _this), /*#__PURE__*/_jsxDEV(ModalBody, {\n                        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                          children: [\" Are you sure you want to delete the \", activeFloor.name, \" floor?\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 846,\n                          columnNumber: 21\n                        }, _this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 845,\n                        columnNumber: 1\n                      }, _this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n                        children: [/*#__PURE__*/_jsxDEV(Button, {\n                          color: \"primary\",\n                          onClick: function onClick() {\n                            toggleDeleteFloor(\"deleteFloor\"); // handleAddFloor(); \n\n                            handleDeleteFloor();\n                          },\n                          children: \"OK\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 850,\n                          columnNumber: 1\n                        }, _this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n                          color: \"secondary\",\n                          onClick: function onClick() {\n                            return _toggle(\"addFloor\");\n                          },\n                          children: \"Cancel\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 856,\n                          columnNumber: 1\n                        }, _this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 848,\n                        columnNumber: 1\n                      }, _this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 843,\n                      columnNumber: 1\n                    }, _this), /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"btn btn-success\",\n                      color: \"primary\",\n                      onClick: handleReset,\n                      children: \" reset \"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 860,\n                      columnNumber: 13\n                    }, _this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 812,\n                    columnNumber: 25\n                  }, _this), /*#__PURE__*/_jsxDEV(Map, {\n                    style: {\n                      height: \"auto%\",\n                      width: \"auto\"\n                    },\n                    center: [filteredName.latitude, filteredName.longitude],\n                    zoom: 17.5,\n                    maxZoom: 100,\n                    zoomControl: true,\n                    className: classes.map,\n                    ref: editRef,\n                    onClick: handleMap,\n                    children: /*#__PURE__*/_jsxDEV(LayersControl, {\n                      position: \"topright\",\n                      children: [/*#__PURE__*/_jsxDEV(LayersControl.BaseLayer, {\n                        checked: true,\n                        name: filteredName.name,\n                        children: /*#__PURE__*/_jsxDEV(TileLayer, {\n                          attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n                          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 886,\n                          columnNumber: 9\n                        }, _this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 884,\n                        columnNumber: 1\n                      }, _this), /*#__PURE__*/_jsxDEV(TileLayer, {\n                        attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n                        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 893,\n                        columnNumber: 7\n                      }, _this), /*#__PURE__*/_jsxDEV(FeatureGroup, {\n                        ref: editRef,\n                        children: /*#__PURE__*/_jsxDEV(EditControl, {\n                          ref: editRef,\n                          position: \"bottomright\",\n                          onCreated: onShapeDrawn,\n                          onMounted: onMounted //onCreated={_onCreate}\n                          ,\n                          onEdited: _onEdited,\n                          onDeleted: _onDeleted //here you can specify your shape options and which handler you want to enable\n                          ,\n                          draw: {\n                            rectangle: false,\n                            circle: false,\n                            polyline: false,\n                            circlemarker: false,\n                            marker: false,\n                            polygon: {\n                              allowIntersection: false,\n                              shapeOptions: {\n                                color: \"#ff0000\"\n                              }\n                            }\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 898,\n                          columnNumber: 21\n                        }, _this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 897,\n                        columnNumber: 17\n                      }, _this), filteredName.floors.map(function (floor, index) {\n                        return /*#__PURE__*/_jsxDEV(LayersControl.BaseLayer, {\n                          checked: false,\n                          name: floor.description,\n                          children: /*#__PURE__*/_jsxDEV(LayerGroup, {\n                            children: [/*#__PURE__*/_jsxDEV(Polygon, {\n                              positions: floor.boundaries,\n                              color: floor.color\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 929,\n                              columnNumber: 11\n                            }, _this), floor.blocks.map(function (block, ind) {\n                              return /*#__PURE__*/_jsxDEV(Polygon, {\n                                positions: block.bounds,\n                                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                                  position: block.center,\n                                  children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n                                    permanent: true,\n                                    direction: \"center\",\n                                    class: \"labelText\",\n                                    children: [\" \", block.description]\n                                  }, void 0, true, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 936,\n                                    columnNumber: 12\n                                  }, _this), \" \"]\n                                }, void 0, true, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 935,\n                                  columnNumber: 9\n                                }, _this), /*#__PURE__*/_jsxDEV(Popup, {\n                                  direction: \"center\",\n                                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                                    className: \"btn btn-primary\",\n                                    onClick: function onClick() {\n                                      return toggleBlock(\"editBlock\");\n                                    },\n                                    children: \"Edit\"\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 938,\n                                    columnNumber: 8\n                                  }, _this), /*#__PURE__*/_jsxDEV(Modal, {\n                                    isOpen: editBlock,\n                                    toggle: function toggle() {\n                                      return toggleBlock(\"editBlock\");\n                                    },\n                                    className: \"modal-sm\",\n                                    children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n                                      className: \"btn btn-primary\",\n                                      toggle: function toggle() {\n                                        return toggleBlock(\"editBlock\");\n                                      },\n                                      children: \"Are you sure you want to edit the block\"\n                                    }, void 0, false, {\n                                      fileName: _jsxFileName,\n                                      lineNumber: 948,\n                                      columnNumber: 25\n                                    }, _this), /*#__PURE__*/_jsxDEV(ModalBody, {\n                                      children: [/*#__PURE__*/_jsxDEV(Button, {\n                                        color: \"primary\",\n                                        onClick: handleBlock,\n                                        children: \"Yes\"\n                                      }, void 0, false, {\n                                        fileName: _jsxFileName,\n                                        lineNumber: 950,\n                                        columnNumber: 25\n                                      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n                                        color: \"secondary\",\n                                        onClick: function onClick() {\n                                          return toggleBlock(\"editBlock\");\n                                        },\n                                        children: \"Cancel\"\n                                      }, void 0, false, {\n                                        fileName: _jsxFileName,\n                                        lineNumber: 951,\n                                        columnNumber: 25\n                                      }, _this)]\n                                    }, void 0, true, {\n                                      fileName: _jsxFileName,\n                                      lineNumber: 949,\n                                      columnNumber: 25\n                                    }, _this)]\n                                  }, void 0, true, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 947,\n                                    columnNumber: 17\n                                  }, _this)]\n                                }, void 0, true, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 937,\n                                  columnNumber: 8\n                                }, _this)]\n                              }, void 0, true, {\n                                fileName: _jsxFileName,\n                                lineNumber: 933,\n                                columnNumber: 5\n                              }, _this);\n                            })]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 928,\n                            columnNumber: 9\n                          }, _this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 926,\n                          columnNumber: 9\n                        }, _this);\n                      })]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 883,\n                      columnNumber: 1\n                    }, _this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 871,\n                    columnNumber: 47\n                  }, _this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n                    className: \"btn-group\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: classes.buttonStyle,\n                      children: [/*#__PURE__*/_jsxDEV(Button, {\n                        className: \"btn btn-primary\" // disabled={filteredName.floors.length>2}\n                        ,\n                        variant: \"contained\",\n                        onClick: onBlockDrawn,\n                        children: \"AddBlock\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 978,\n                        columnNumber: 17\n                      }, _this), /*#__PURE__*/_jsxDEV(Modal, {\n                        isOpen: blockDescription,\n                        toggle: function toggle() {\n                          return toggleBlockDescription(\"blockDescription\");\n                        },\n                        className: \"modal-sm\",\n                        style: modalStyles,\n                        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n                          className: \"btn btn-primary\",\n                          toggle: function toggle() {\n                            return toggleBlockDescription(\"blockDescription\");\n                          },\n                          children: \"Enter the block details\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 990,\n                          columnNumber: 25\n                        }, _this), /*#__PURE__*/_jsxDEV(ModalBody, {\n                          children: /*#__PURE__*/_jsxDEV(Card, {\n                            className: \"iq-card\",\n                            children: /*#__PURE__*/_jsxDEV(CardBody, {\n                              className: \"iq-card-body\",\n                              children: /*#__PURE__*/_jsxDEV(\"form\", {\n                                children: [\"Name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n                                  onChange: onChangeName,\n                                  value: blockName,\n                                  type: \"text\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 996,\n                                  columnNumber: 33\n                                }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1001,\n                                  columnNumber: 19\n                                }, _this), \"Description: \", /*#__PURE__*/_jsxDEV(\"input\", {\n                                  onChange: onChangeDesc,\n                                  value: blockDesc,\n                                  type: \"text\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1002,\n                                  columnNumber: 40\n                                }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1007,\n                                  columnNumber: 19\n                                }, _this), \"icon: \", /*#__PURE__*/_jsxDEV(\"input\", {\n                                  onChange: onChangeIcon,\n                                  value: icon,\n                                  type: \"url\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1008,\n                                  columnNumber: 33\n                                }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1013,\n                                  columnNumber: 19\n                                }, _this)]\n                              }, void 0, true, {\n                                fileName: _jsxFileName,\n                                lineNumber: 994,\n                                columnNumber: 21\n                              }, _this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 993,\n                              columnNumber: 21\n                            }, _this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 992,\n                            columnNumber: 25\n                          }, _this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 991,\n                          columnNumber: 25\n                        }, _this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n                          children: /*#__PURE__*/_jsxDEV(Button, {\n                            color: \"secondary\",\n                            onClick: function onClick() {\n                              return toggleBlockDescription(\"blockDescription\");\n                            },\n                            children: \"Ok\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1022,\n                            columnNumber: 25\n                          }, _this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1020,\n                          columnNumber: 25\n                        }, _this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 988,\n                        columnNumber: 17\n                      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n                        className: \"btn btn-primary\",\n                        onClick: handleManageBoundaries,\n                        children: \"Manage Boundaries\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1028,\n                        columnNumber: 17\n                      }, _this), /*#__PURE__*/_jsxDEV(Modal, {\n                        isOpen: editBoundaries,\n                        toggle: function toggle() {\n                          return toggleBoundaries(\"editBoundaries\");\n                        },\n                        className: \"modal-sm\",\n                        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n                          className: \"btn btn-primary\",\n                          toggle: function toggle() {\n                            return toggleBoundaries(\"editBoundaries\");\n                          },\n                          children: \"Are you sure you want to edit the Boundaries\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1037,\n                          columnNumber: 25\n                        }, _this), /*#__PURE__*/_jsxDEV(ModalBody, {\n                          children: [/*#__PURE__*/_jsxDEV(Button, {\n                            color: \"primary\",\n                            onClick: handleBoundaries,\n                            children: \"Yes\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1039,\n                            columnNumber: 25\n                          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n                            color: \"secondary\",\n                            onClick: function onClick() {\n                              return toggleBoundaries(\"editBoundaries\");\n                            },\n                            children: \"Cancel\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1040,\n                            columnNumber: 25\n                          }, _this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1038,\n                          columnNumber: 25\n                        }, _this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1036,\n                        columnNumber: 17\n                      }, _this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 976,\n                      columnNumber: 12\n                    }, _this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 975,\n                    columnNumber: 13\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 811,\n                  columnNumber: 25\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 725,\n                columnNumber: 25\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 27\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 25\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 3\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 1\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 715,\n    columnNumber: 11\n  }, _this);\n};\n\n_s2(EditFloorMap, \"I/HX8YlJjwfeoZ8nSXWyzWOK6ww=\", false, function () {\n  return [useStyles, useLeaflet];\n});\n\n_c = EditFloorMap;\nexport default EditFloorMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditFloorMap\");","map":{"version":3,"sources":["/Users/likhitha/Documents/cms/client/src/components/dashboard/EditFloormap.js"],"names":["CardBody","Card","ButtonGroup","ButtonToolbar","Form","FormGroup","Label","Input","ModalHeader","Modal","ModalBody","ModalFooter","React","useRef","useEffect","useState","useMap","Col","Row","EditControl","Map","TileLayer","FeatureGroup","Marker","Polyline","Popup","Polygon","Tooltip","Rectangle","LayersControl","LayerGroup","useMapEvents","useLeaflet","service","makeStyles","Button","popup","text","divIcon","renderToStaticMarkup","useStyles","theme","map","height","width","zIndex","buttonWrapper","position","bottom","spacing","marginLeft","marginBottom","transform","buttonStyle","margin","headerWrapper","marginTop","modalStyles","EditFloorMap","props","addFloor","setAddFloor","classes","editRef","markers","setMarkers","newPosition","setNewPosition","setPosition","mapLayers","setMapLayers","newDesc","setNewDesc","isEdit","setIsEdit","floors","setFloors","blocks","setBlocks","newText","setNewText","drawing","setDrawing","showDrawBlock","setShowDrawBlock","polyFlag","setPolyFlag","activeFloor","setActiveFloor","buildingId","setBuildingId","editBoundaries","setEditBoundaries","editBlock","setEditBlock","blockDescription","setBlockDescription","deleteFloor","setDeleteFloor","blockName","setBlockName","blockDesc","setBlockDesc","icon","setIcon","activeLayer","setActiveLayer","selectedLayerIndex","setSelectedLayerIndex","leaflet","editLayerRef","drawControlRef","updateFloor","floorno","description","color","Math","random","toString","substr","boundaries","toggle","toggleBlock","toggleBoundaries","toggleBlockDescription","toggleDeleteFloor","onChangeName","e","preventDefault","target","value","onChangeDesc","onChangeIcon","GlobalMapComponent","mapGlobal","on","console","log","name","getCenter","handleEditFloor","layerType","layer","boundaryLeaflet_id","current","leafletElement","_toolbars","edit","_modes","handler","enable","save","disable","handleReset","i","length","boundaries_backup","handleBlock","bound_backup","bounds","draw","polygon","completeShape","handleBoundaries","handleManageBoundaries","_leaflet_id","layers","id","latlngs","getLatLngs","handleClick","handleAddFloor","handleClickFloor","getBuilding","refno","then","building","push","addBoundaries","bindTooltip","className","sticky","direction","handleMap","_map","addPolygon","handleLayerClick","onBlockDrawn","j","onShapeDrawn","k","_latlngs","point","lat","lng","boundaryCenter","_bounds","tempArray","n","pointBlock","polygonCenter","polygonId","blockObj","center","onMounted","ctl","latlng","window","location","pathname","replace","handleSaveFloor","updateBuilding","handleDeleteFloor","_onCreate","_onEdited","_layers","Object","values","editing","l","_onDeleted","filter","changeHandlerDesc","event","updateIsEdit","changeHandlerText","item","filteredName","street","Apartment","doornum","region","country","latitude","longitude","rectangle","circle","polyline","circlemarker","marker","allowIntersection","shapeOptions","floor","index","block","ind"],"mappings":"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","sourcesContent":["import { CardBody,Card,ButtonGroup, ButtonToolbar,Form,FormGroup,Label,Input, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap';\nimport React, { useRef, useEffect, useState, useMap} from \"react\";\nimport { Col, Row } from \"reactstrap\";\nimport { EditControl } from \"react-leaflet-draw\";\n// import \"./assets/leaflet.css\"\n// import \"./assets/leaflet.draw.css\"\nimport {  Map, TileLayer, FeatureGroup, Marker,Polyline, Popup, Polygon, Tooltip, Rectangle,  LayersControl, LayerGroup,useMapEvents,useLeaflet} from 'react-leaflet';\nimport service from './services';\nimport { makeStyles, Button } from \"@material-ui/core\";\nimport { popup } from 'leaflet';\nimport { text } from 'body-parser';\nimport { divIcon } from 'leaflet';\nimport { renderToStaticMarkup } from \"react-dom/server\";\n\n\nconst useStyles = makeStyles(theme => ({\n  map: ({\n      height: `calc(90vh - 90px)`,\n      width: '60%',\n      zIndex: 0\n  }),\n  buttonWrapper: {\n      zIndex: 1,\n      position: \"absolute\",\n      bottom: theme.spacing(2),\n      marginLeft: \"30%\",\n      marginBottom: \"8%\",\n      transform: \"translateX(-50%)\",\n  },\n  buttonStyle: {\n    margin:\"10px\",\n    \n  },\n  headerWrapper: {\n      zIndex: 1,\n      marginLeft: theme.spacing(3),\n      marginTop: theme.spacing(1),\n  }\n}));\n\nconst modalStyles = {\n  width   :    500,\n  height  :    500\n}\n\n\nconst EditFloorMap = (props) => \n{\n  const [addFloor, setAddFloor] = useState(false);\n  //const mapGlobal = useMap();\n  const classes = useStyles(props)\n  const editRef = useRef();\n  const [markers, setMarkers] = useState([])\n  const [newPosition, setNewPosition] = useState([])\n  //const [markers1, setMarkers1] = useState([]);\n  const [position, setPosition] = useState([]);\n  const [mapLayers, setMapLayers] = useState([]);\n  const [ newDesc, setNewDesc ] = useState('')\n  const [isEdit, setIsEdit] = useState('')\n  const [floors, setFloors ] = useState('')\n  const [blocks, setBlocks] = useState('')\n  const [newText, setNewText] = useState('')\n  const [drawing, setDrawing] = useState(false);\n  const [showDrawBlock, setShowDrawBlock] = useState(false);\n  const [polyFlag, setPolyFlag] = useState('');\n  const [activeFloor, setActiveFloor] = useState('')\n  const [buildingId, setBuildingId] =  useState('')\n  //const editRef = useRef();\n  //const [map, setMap] = useState(null);\n  const [editBoundaries, setEditBoundaries] = useState(false);\n  const [editBlock, setEditBlock] = useState(false);\n  const [blockDescription,setBlockDescription] = useState(false);\n  const [deleteFloor, setDeleteFloor] = useState(false);\n  const [blockName, setBlockName] = useState('')\n  const [blockDesc, setBlockDesc] = useState('')\n  const [icon, setIcon] = useState('')\n  const [activeLayer, setActiveLayer] = useState('')\n  const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n  //const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n  const leaflet = useLeaflet();\n  const editLayerRef = React.useRef();\n  let drawControlRef = React.useRef();\n  let {map} = leaflet;\n  \n \n  \n\n  const updateFloor = {\n\n    floorno: 0,\n    description: \"newDesc\",\n    color: '#'+(0x1000000+(Math.random())*0xffffff).toString(16).substr(1,6),\n    blocks: [],\n    boundaries: []\n  }\n  \n  function toggle() {\n    setAddFloor(!addFloor);\n  }\n  function toggleBlock() {\n    setEditBlock(!editBlock);\n  }\n  \n  function toggleBoundaries() {\n    setEditBoundaries(!editBoundaries);\n  }\n\n  function toggleBlockDescription() {\n    setBlockDescription(!blockDescription);\n  }\n\n  function toggleDeleteFloor() {\n    setDeleteFloor(!deleteFloor);\n  }\n\n  const onChangeName = e => {\n    e.preventDefault();\n    setBlockName(e.target.value);\n    \n  };\n  const onChangeDesc = e => {\n    e.preventDefault();\n    \n    setBlockDesc(e.target.value);\n    \n\n  };\n  const onChangeIcon = e => {\n    e.preventDefault();\n    \n    setIcon(e.target.value);\n\n  };\n  //const polygonCenter = markers[0].floors[0].blocks[0]._bounds.getCenter();\n\n  // const onSubmit = e => {\n  //   e.preventDefault();\n\n  //   const newUser = {\n  //     name: blockName,\n  //     description: blockDesc,\n  //     icon: icon\n      \n  //   };\n  // }\n  // function submitHandler(e) {\n  //   e.preventDefault();\n  //   setBlockName(e.target.value);\n  //   setBlockDesc(e.target.value);\n  //   setIcon(e.target.value);\n  // }\n\n  function GlobalMapComponent() {\n    const mapGlobal = useMap()\n    mapGlobal.on( 'baselayerchange', function (e) {\n      console.log('Layer name -> ', e.name);\n      //console.log('Layer URL -> ', e.layer.options.url);\n      //console.log('Layer attribution -> ', e.layer.options.attribution);\n  });\n    console.log('map center:', mapGlobal.getCenter())\n    return null\n  }\n   \n  \nconst handleEditFloor = (e) => {\n  setBuildingId(e.target.value)\n  setDrawing(true)\n  const { layerType, layer } = e;\n  debugger;\n  //  if (layerType === \"polygon\") {\n  //     const { _leaflet_id } = layer;\n  //     setMapLayers((layers) => [\n  //       ...layers,\n  //   { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n\n  //     // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n  //     ]);\n  //   }\n    if (buildingId===markers[0].floors[0].boundaryLeaflet_id){\n    if (drawing) {\n            //editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n           editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n      \n        } else {\n          editRef.current.leafletElement._toolbars.edit._modes.edit.handler.save() \n           editRef.current.leafletElement._toolbars.edit._modes.edit.handler.disable()\n        }\n      }\n//     console.log(layer)\n// console.log(mapLayers)\n//         e.layer.on('click', () => {\n//           debugger;\n//             editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n//         })\n//         e.layer.on('contextmenu', () => {\n//             //do some contextmenu action here\n//         })\n//         e.layer.bindTooltip(\"Text\", \n//             {\n//               className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n//               sticky: true,\n//               direction: 'right'\n//             }\n//         );\n}\n\nconst handleReset = (e) => {\n  debugger;\n  \n  \n  for (var i = 0; i < markers[0].floors.length; i++) { \n    if(markers[0].floors[i].description===activeFloor.name){\n    \n      \n        markers[0].floors[i].boundaries= markers[0].floors[i].boundaries_backup;\n        markers[0].floors[i].boundaries_backup = [];\n        break;\n}\n}\n}\n// const handleFloorReset = (e) => {\n//   debugger;\n//   if(polyFlag==='B')\n//   for (var i = 0; i < markers[0].floors.length; i++) { \n//     if(markers[0].floors[i].description===activeFloor.name){\n    \n      \n//         markers[0].floors[i].blocks[i].bounds= markers[0].floors[i].blocks[i].bounds_backup;\n//         markers[0].floors[i].blocks[i].bounds_backup = [];\n//         break;\n// }\n// }\n// }\nconst handleBlock = (e) => {\n  setPolyFlag('L');\n  debugger;\n  for (var i = 0; i < markers[0].floors.length; i++) { \n    if(markers[0].floors[i].description===activeFloor.name){\n    \n      if(markers[0].floors[i].boundaries.length>0) {\n        \n\n\n        markers[0].floors[i].blocks[i].bound_backup = markers[0].floors[i].blocks[i].bounds;\n        markers[0].floors[i].blocks[i].bounds = [];\n        \n      }\nbreak;\n}\n}\n//toggleBlockDescription();\n//toggleBlockDescription();\nif (!drawing) {\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n} else {\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n}\n\nsetDrawing(!drawing)\n}\n\nconst handleBoundaries = (e) => {\n  debugger;\n  for (var i = 0; i < markers[0].floors.length; i++) { \n    if(markers[0].floors[i].description===activeFloor.name){\n    \n      if(markers[0].floors[i].boundaries.length>0) {\n\n        markers[0].floors[i].boundaries_backup = markers[0].floors[i].boundaries;\n        markers[0].floors[i].boundaries = [];\n        }\nbreak;\n}\n}\nif (!drawing) {\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n} else {\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n}\n\nsetDrawing(!drawing)\n\n}\n\nconst handleManageBoundaries = (e) => {\n    debugger;\n    console.log(activeFloor);\n    console.log(markers);\n    setPolyFlag('B')\n    for (var i = 0; i < markers[0].floors.length; i++) { \n      if(markers[0].floors[i].description===activeFloor.name){\n        debugger;\n        if(markers[0].floors[i].boundaries.length>0) {\n          debugger;\n          toggleBoundaries();\n         }\n\n     else {\n        const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n      setMapLayers((layers) => [\n        ...layers,\n    { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n\n      // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n      ]);\n    }\n    debugger;\n\n\n    if (!drawing) {\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n  } else {\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n  }\n\n  setDrawing(!drawing)\n\n      }\n      }\n}\n    \n  \n    \ndebugger;\n  }\n   \n  const handleClick = () => {\n\n        \n    //Edit this method to perform other actions\n\n    if (!drawing) {\n        editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n    } else {\n        editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n        editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n    }\n    setDrawing(!drawing)\n}\n\nconst handleAddFloor = () => {\n  debugger;\n}\n\n\nconst handleClickFloor = () => {\n  debugger;\n   service\n   .getBuilding(refno)\n   .then(building => {\n    console.log(\"returning\", building)\n   updateFloor.description=newDesc\n  building[0].floors.push(updateFloor)\n\n  setMarkers(building)\n\n  \n\n\n})\n}\n\nconst addBoundaries = (e) =>{\n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n    setMapLayers((layers) => [\n         ...layers,\n        {  latlngs: layer.getLatLngs()[0] },\n       ]);\n\n    // setMapLayers((layers) => [\n    //   ...layers,\n    //   { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n    // ]);\n  }\n  setDrawing(false)\n\n  e.layer.on('click', () => {\n      editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  })\n  e.layer.on('contextmenu', () => {\n      //do some contextmenu action here\n  })\n  e.layer.bindTooltip(\"Text\", \n      {\n        className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visiblecg4',\n        sticky: true, \n        direction: 'right'\n      }\n  );\n\n\n\n}\n\nconst handleMap = (e) =>\n{\n  debugger;\n  const map = editRef.current.leafletElement._map;\n  \n\n    \n  \n  map.on(\"baselayerchange\", (activeFloor, activeLayer) => {\n//     //do whatever\ndebugger;\n\n    console.log(activeFloor);\n    \n    \n   \n   \n     setActiveFloor(activeFloor);\n     \nconsole.log(map);\n\n})\n}\n\n\n\n\nconst addPolygon = (e) =>{\n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n    setMapLayers((layers) => [\n         ...layers,\n        {  latlngs: layer.getLatLngs()[0] },\n       ]);\n\n    \n  }\n  setDrawing(false)\n\n  \n \n\n\n\n}\nfunction handleLayerClick(e) {\n  setSelectedLayerIndex(e.target.activeFloor._leaflet_id);\n}\n\n\n\nconst onBlockDrawn = (e) => {\n  debugger;\n  setPolyFlag('L')\n  \n  console.log(e);\n\n  const { layerType, layer } = e;\n  toggleBlockDescription();\n\n  for (var j = 0; j < markers[0].floors.length; j++) { \n      if(markers[0].floors[j].description===activeFloor.name){\n        \n        if(markers[0].floors[j].boundaries.length>0) {\n          debugger;\n          \n          \n\n          if (!drawing) {\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n        } else {\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n        }\n\n      \n        setDrawing(!drawing)\n          \n           \n           }\n          //   else {\n          //    debugger;\n          //    toggleBlock();\n          //  }\n          //  else{\n          //    <popup>Please add boundaries before adding blocks</popup>\n          //  }\n      }\n}\n  \n}\n\n\n\n\n\n\n\n\nconst onShapeDrawn = (e) => {\n  debugger;\n  \n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n    for (var j = 0; j < markers[0].floors.length; j++) { \n      if(markers[0].floors[j].description===activeFloor.name){\n        if(polyFlag==='B'){\n          // if(markers[0].floors[j].boundaries.length>0) {\n          //         debugger;\n          \n          //       }\n          \n          //    else{\n               \n               markers[0].floors[j].boundaries=[];\n               debugger;\n               for (var k=0; k < layer._latlngs[0].length; k++ )\n               \n               {\n\n                 \n                 var point = [layer._latlngs[0][k].lat, layer._latlngs[0][k].lng];\n                markers[0].floors[j].boundaries.push(point);\n                \n                //markers[0].floors[j].boundaryCenter.push(boundCenter);\n               }\n               //markers[0].floors[j].boundaries= layer._latlngs\n               markers[0].floors[j].boundaryLeaflet_id = layer._leaflet_id;\n               markers[0].floors[j].boundaryCenter = [layer._bounds.getCenter()];\n             //}\n        }\n         else if(polyFlag==='L'){\n          var tempArray = [];\n          //var tempCenter = [];\n\n          for (var n=0; n < layer._latlngs[0].length; n++){\n            \n            var pointBlock = [layer._latlngs[0][n].lat, layer._latlngs[0][n].lng];\n            \n            tempArray.push(pointBlock);\n            //tempCenter.push(polygonCenter);\n          }\n          var polygonCenter = [layer._bounds.getCenter()];\n          var polygonId = layer._leaflet_id;\n         \n          debugger;\n\n          var blockObj = {id:polygonId,name:blockName,description:blockDesc,icon:icon,bounds:tempArray,center:polygonCenter}\n       \n          markers[0].floors[j].blocks.push(blockObj);\n          \n          blockObj = {};\n          debugger;\n\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n\n        }\n      //}\n          \n       \n    }\n  }\n    // setMapLayers((layers) => [\n    //   ...layers,\n    //   [  _leaflet_id,  layer.getLatLngs()[0] ],\n    //   // { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n    //  //[ layer.getLatLngs()[0] ]  ,\n    // ]);\n\n    // \n   \n   \n    return (\n    \n      <div>\n        {markers.map((name) => (\n          <p>{name.description}{polyFlag}\n         <GlobalMapComponent />\n         </p>\n        ))}\n      </div>\n    )\n     \n  }\n  setDrawing(false)\n\n  e.layer.on('click', () => {\n      editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  })\n \n  e.layer.on('contextmenu', () => {\n      //do some contextmenu action here\n  })\n  e.layer.bindTooltip(\"Text\", \n      {\n        className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n        sticky: true,\n        direction: 'right'\n      }\n  );\n}\nfunction onMounted(ctl) {\n  drawControlRef.current = ctl;\n}\n\n\n\n  useEffect(()=>{\n    debugger;\n  \n    service\n    .getBuilding(refno)\n    .then(latlng =>{\n      //console.log(LayersControl.getActiveBaseLayer().name)\n      console.log(\"returning\", latlng)\n      debugger;\n      updateFloor.floorno = latlng[0].floors.length+1;\n      //setMarkers(...markers, latlng)\n      setMarkers(latlng)\n      debugger;\n    })\n    console.log(mapLayers)\n\n  },[])\n  \n  const refno=window.location.pathname.replace('/EditFloorMap/','');\n\n  const handleSaveFloor = (e) => {\n    e.preventDefault()\n    debugger;\n\n    service\n    .updateBuilding(markers[0].id, markers[0])\n    \n  }\n  const handleDeleteFloor = (e) => {\n    e.preventDefault()\n    debugger;\n\n  }\n\n  function handleLayerClick(e) {\n    setSelectedLayerIndex(e.target.markers.floors.blocks.id);\n  }\n\nconst _onCreate = (e) => {\n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n\n    setMapLayers((layers) => [\n      ...layers,\n      { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n    ]);\n  }\n};\n\n\nconst _onEdited = (e) => {\n  console.log(e);\n  const {\n    layers: { _layers },\n  } = e;\n\n  Object.values(_layers).map(({ _leaflet_id, editing }) => {\n    setMapLayers((layers) =>\n      layers.map((l) =>\n        l.id === _leaflet_id\n          ? { ...l, latlngs: { ...editing.latlngs[0] } }\n          : l\n      )\n    );\n  });\n};\n\nconst _onDeleted = (e) => {\n  console.log(e);\n  const {\n    layers: { _layers },\n  } = e;\n\n  Object.values(_layers).map(({ _leaflet_id }) => {\n    setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\n  });\n};\n\nconst changeHandlerDesc = (event) => setNewDesc(event.target.value)\nconst updateIsEdit = (e, value) => setIsEdit(value);\nconst changeHandlerText = (event) => setNewText(event.target.value)\n\n// const iconMarkup = renderToStaticMarkup(\n//   markers[0].floors[0].blocks[0].description\n//  );\n\n\n// const textDesc = divIcon  ({\n//   html: iconMarkup\n// });\n \n\n  return ( \n    \n          <div id=\"container\">\n                          \n<Card id=\"container\">\n  <CardBody>\n    \n                   {\n                     \n                   markers.filter(item => item.id===refno).map(filteredName => (\n                        <div>\n                          <Row className=\"iq-example-row\" id=\"container\">\n                        <Row className=\"row\">\n                        <Col className=\"col-4\">\n                                              \n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Building Id</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.id} disabled/>\n                                              </FormGroup>\n                                             \n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Building Name</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.description} />\n                                              </FormGroup>\n                                            \n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Street</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.street} />\n                                              </FormGroup>\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Apartment</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.Apartment} />\n                                              </FormGroup>\n\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Doornum</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.doornum} />\n                                              </FormGroup>\n\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Region</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.region} />\n                                              </FormGroup>\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Country</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.country} />\n\n\n{/* {filteredName.floors.map((floor) => (\n  <div>\n  <h4>Description:</h4>\n  <input onChange={changeHandlerDesc}\n  value={floor.newDesc}\n  /><br/>\n   \n  <button onClick={handleClickFloor}>AddFloor</button>\n\n\n\n\n  {floor.blocks.map((block) => (\n    <div>\n      <h4>Text:</h4>\n      <input onChange={changeHandlerText}\n  value={block.newText}\n  /><br/>\n  <button onClick= {handleClick}>AddPolygon</button><br/>\n  \n\n    </div>\n    \n\n    \n  ))} \n  \n  </div>\n  \n\n))} */}\n\n\n\n\n                                              </FormGroup>\n                                              \n\n                                              </Col>\n                        <Col className=\"col-8\">\n                        <Col lg={4}>\n                        <Button className=\"btn btn-success\" color=\"primary\" onClick={() => toggle(\"addFloor\")}> AddFloor </Button>{' '}\n\n                        {/*Modal*/}\n                        <Modal isOpen={addFloor} toggle={() => toggle(\"addFloor\")} className=\"modal-sm\">\n                        <ModalHeader className=\"btn btn-primary\" toggle={() => toggle(\"addFloor\")}>Add Floor</ModalHeader>\n                        <ModalBody>\n                        \n                          \n                          <p>Floor: {filteredName.floors.length+1}</p>\n                          \n                            <p>Enter Floor Description</p>\n                            <input type=\"text\" onChange={changeHandlerDesc} value={newDesc} \n                            lur={updateIsEdit}/>\n\n                        </ModalBody>\n                        <ModalFooter>\n\n                        <Button color=\"primary\" onClick={() => {\n                          toggle(\"addFloor\");\n                          // handleAddFloor(); \n                          handleClickFloor();\n                      \n                      }}>OK</Button>{' '}\n                        <Button color=\"secondary\" onClick={() => toggle(\"addFloor\")}>Cancel</Button>\n                        </ModalFooter>\n                        </Modal>\n           <Button className=\"btn btn-success\" color=\"primary\" onClick={handleSaveFloor}> SaveFloor </Button>\n           <Button className=\"btn btn-success\" color=\"primary\" onClick={() => toggleDeleteFloor(\"deleteFloor\")}> DeleteFloor </Button>{' '}\n\n{/*Modal*/}\n<Modal isOpen={deleteFloor} toggle={() => toggleDeleteFloor(\"deleteFloor\")} className=\"modal-sm\">\n                    <ModalHeader className=\"btn btn-primary\" toggle={() => toggleDeleteFloor(\"deleteFloor\")}>Delete Floor</ModalHeader>\n<ModalBody>\n                    <h5> Are you sure you want to delete the {activeFloor.name} floor?</h5>\n</ModalBody>\n<ModalFooter>\n\n<Button color=\"primary\" onClick={() => {\n  toggleDeleteFloor(\"deleteFloor\");\n  // handleAddFloor(); \n  handleDeleteFloor();\n\n}}>OK</Button>{' '}\n<Button color=\"secondary\" onClick={() => toggle(\"addFloor\")}>Cancel</Button>\n</ModalFooter>\n</Modal>\n                        \n            <Button className=\"btn btn-success\" color=\"primary\" onClick={handleReset}> reset </Button> \n\n                                                {/* < ModalTemplate /> */}\n                        {/* <Card className=\"card iq-mb-3\">\n                           \n                            <CardBody className=\"card-body\">\n                                <Button onClick={handleClickFloor} color={\"primary\"}>AddFloor</Button>\n                            </CardBody>\n                            \n                        </Card> */}\n                    </Col>\n                                              <Map \n                                              style={ { height: \"auto%\", width: \"auto\"}}\n            center={[filteredName.latitude, filteredName.longitude]} zoom={17.5} maxZoom={100}\n\n            zoomControl={true}  \n            className={classes.map} \n            ref={editRef}\n            onClick={handleMap}>\n\n\n\n\n<LayersControl position=\"topright\">\n<LayersControl.BaseLayer checked={true} name={filteredName.name}>\n  \n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        \n         \n      </LayersControl.BaseLayer>\n      <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n                <FeatureGroup ref={editRef}>\n                    <EditControl\n                    ref={editRef}\n                    position='bottomright'\n                   onCreated={onShapeDrawn}\n                   onMounted={onMounted}\n                    //onCreated={_onCreate}\n                  onEdited={_onEdited}\n                  onDeleted={_onDeleted}\n                  \n                    //here you can specify your shape options and which handler you want to enable\n                    draw={{\n                        rectangle: false,\n                        circle: false,\n                        polyline: false,\n                        circlemarker: false,\n                        marker: false,\n                        polygon:  {\n                             allowIntersection: false,\n                            shapeOptions: {\n                                color: \"#ff0000\"\n                            },\n                         }\n                    }}\n                    />\n                     \n                </FeatureGroup>\n                {filteredName.floors.map((floor, index) => (\n                 \n        <LayersControl.BaseLayer checked={false} name={floor.description}>\n\n        <LayerGroup>\n          <Polygon positions={floor.boundaries} color={floor.color} \n                             />\n{\n   floor.blocks.map((block, ind) => (\n    <Polygon positions={block.bounds}>\n    \n        <label position={block.center}>\n           <Tooltip permanent direction=\"center\" class=\"labelText\"> {block.description}</Tooltip> </label>\n       <Popup direction=\"center\" >\n       <Button\n                \n                className=\"btn btn-primary\"\n                onClick={() => toggleBlock(\"editBlock\")}\n\n                >\n                     Edit\n                </Button>\n                \n                <Modal isOpen={editBlock} toggle={() => toggleBlock(\"editBlock\")} className=\"modal-sm\">\n                        <ModalHeader className=\"btn btn-primary\" toggle={() => toggleBlock(\"editBlock\")}>Are you sure you want to edit the block</ModalHeader>\n                        <ModalBody>\n                        <Button color=\"primary\" onClick={handleBlock}>Yes</Button>\n                        <Button color=\"secondary\" onClick={() => toggleBlock(\"editBlock\")}>Cancel</Button>\n                        </ModalBody>\n                        \n                        </Modal>\n      </Popup>\n      \n     \n\n      \n    </Polygon> \n    \n                             \n                             \n\n  ))\n}\n\n        </LayerGroup>\n        </LayersControl.BaseLayer>\n             ))}\n              </LayersControl>\n                \n                \n            </Map>\n            <ButtonGroup className=\"btn-group\">\n           <div className={classes.buttonStyle}>\n           \n                <Button \n                className=\"btn btn-primary\"\n                \n                    // disabled={filteredName.floors.length>2}\n                    variant=\"contained\"\n                    onClick={onBlockDrawn}>\n                    \n                    AddBlock\n                </Button>\n                {/* <div className={classes.buttonWrapper}> */}\n                <Modal isOpen={blockDescription} toggle={() => toggleBlockDescription(\"blockDescription\")} className=\"modal-sm\" style={modalStyles}>\n                \n                        <ModalHeader className=\"btn btn-primary\" toggle={() => toggleBlockDescription(\"blockDescription\")}>Enter the block details</ModalHeader>\n                        <ModalBody>\n                        <Card className=\"iq-card\">\n                    <CardBody className=\"iq-card-body\">\n                    <form>\n                   \n                          Name: <input\n                  onChange={onChangeName}\n                  value={blockName}\n                  type=\"text\"\n                \n                /><br/>\n                          Description: <input\n                  onChange={onChangeDesc}\n                  value={blockDesc}\n                  type=\"text\"\n                \n                /><br/>\n                          icon: <input\n                  onChange={onChangeIcon}\n                  value={icon}\n                  type=\"url\"\n                \n                /><br/>\n                          </form>\n                         \n                          </CardBody>\n                          </Card>\n\n                        </ModalBody>\n                        <ModalFooter>\n                       {/* <Button color=\"primary\" >submit</Button>  */}\n                        <Button color=\"secondary\" onClick={() => toggleBlockDescription(\"blockDescription\")}>Ok</Button>\n                        </ModalFooter>\n                        \n                        \n                        </Modal>\n\n                <Button\n                \n                className=\"btn btn-primary\"\n                onClick={handleManageBoundaries}\n\n                >\n                      Manage Boundaries\n                </Button>\n                <Modal isOpen={editBoundaries} toggle={() => toggleBoundaries(\"editBoundaries\")} className=\"modal-sm\">\n                        <ModalHeader className=\"btn btn-primary\" toggle={() => toggleBoundaries(\"editBoundaries\")}>Are you sure you want to edit the Boundaries</ModalHeader>\n                        <ModalBody>\n                        <Button color=\"primary\" onClick={handleBoundaries}>Yes</Button>\n                        <Button color=\"secondary\" onClick={() => toggleBoundaries(\"editBoundaries\")}>Cancel</Button>\n                        </ModalBody>\n                        \n                        </Modal>\n                 </div> \n                 </ButtonGroup>\n                 \n            {/* </div> */}\n            {/* <div classname={classes.buttonWrapper}>\n              <Button\n                   >Save</Button>\n\n            </div> */}\n            {/* <pre className=\"text-left\">\n\n\n\n              { \n              \n              JSON.stringify(mapLayers, 0, 2)}</pre> */}\n            \n                             </Col> \n                             \n                             </Row>\n                             </Row>\n                             \n\n\n\n\n\n                                      </div>\n                                      \n  \n                  ))} \n                  \n                  \n                  </CardBody>\n\n</Card>\n                   \n                   </div>)\n}\n\n\nexport default EditFloorMap;\n"]},"metadata":{},"sourceType":"module"}