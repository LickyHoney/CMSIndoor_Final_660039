{"ast":null,"code":"import _toConsumableArray from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/Users/likhitha/Documents/cms/client/src/components/dashboard/ViewBuilding.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _this2 = this,\n    _s3 = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState, useMap } from \"react\";\nimport service from './services';\nimport { EditControl } from \"react-leaflet-draw\";\nimport LayersControl2, { ControlledLayerItem } from \"./LayerControl2\"; // import \"./assets/leaflet.css\"\n// import \"./assets/leaflet.draw.css\"\n\nimport { Map, TileLayer, FeatureGroup, useLeaflet, LayersControl, Marker, Polygon, Popup, LayerGroup, Circle, GeoJSON } from \"react-leaflet\";\nimport Control from 'react-leaflet-control';\nimport L from \"leaflet\";\nimport { CardBody, Card, Breadcrumb, BreadcrumbItem, ButtonGroup, ButtonToolbar, Form, FormGroup, Label, Input, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap'; // Material components\n\nimport { makeStyles, Button } from \"@material-ui/core\";\nimport { set } from \"mongoose\";\nimport ReactTooltip from \"react-tooltip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    map: {\n      height: \"calc(90vh - 90px)\",\n      width: '60%',\n      zIndex: 0\n    },\n    buttonWrapper: {\n      zIndex: 1,\n      position: \"absolute\",\n      bottom: theme.spacing(2),\n      marginLeft: \"30%\",\n      marginBottom: \"8%\",\n      transform: \"translateX(-50%)\"\n    },\n    headerWrapper: {\n      zIndex: 1,\n      marginLeft: theme.spacing(3),\n      marginTop: theme.spacing(1)\n    }\n  };\n});\n\nfunction EditableLayer(props) {\n  _s();\n\n  var leaflet = useLeaflet();\n  var editLayerRef = React.useRef();\n  var drawControlRef = React.useRef();\n  var map = leaflet.map;\n  useEffect(function () {\n    if (!props.showDrawControl) {\n      map.removeControl(drawControlRef.current);\n    } else {\n      map.addControl(drawControlRef.current);\n    }\n\n    editLayerRef.current.leafletElement.clearLayers();\n    editLayerRef.current.leafletElement.addLayer(props.layer);\n    props.layer.on(\"click\", function (e) {\n      props.onLayerClicked(e, drawControlRef.current);\n    });\n  }, [props, map]);\n\n  function onMounted(ctl) {\n    drawControlRef.current = ctl;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(FeatureGroup, {\n      ref: editLayerRef,\n      children: /*#__PURE__*/_jsxDEV(EditControl, _objectSpread({\n        position: \"topright\",\n        onMounted: onMounted\n      }, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EditableLayer, \"mRBzQf4B+lSmsOrt2PcplvXDKEI=\", false, function () {\n  return [useLeaflet];\n});\n\n_c = EditableLayer;\n\nfunction EditableGroup(props) {\n  _s2();\n\n  var _this = this;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedLayerIndex = _useState2[0],\n      setSelectedLayerIndex = _useState2[1];\n\n  function handleLayerClick(e, drawControl) {\n    setSelectedLayerIndex(e.target.feature.properties.editLayerId);\n  }\n\n  var dataLayer = new L.GeoJSON(props.data);\n  var layers = [];\n  var i = 0;\n  dataLayer.eachLayer(function (layer) {\n    layer.feature.properties.editLayerId = i;\n    layers.push(layer);\n    i++;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: layers.map(function (layer, i) {\n      return /*#__PURE__*/_jsxDEV(EditableLayer, {\n        layer: layer,\n        onLayerClicked: handleLayerClick\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(EditableGroup, \"Ibts1gRA4nda0R5pUeZ3xqL+kKw=\");\n\n_c2 = EditableGroup;\n\nvar ViewBuilding = function ViewBuilding(props) {\n  _s3();\n\n  var editRef = useRef();\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      drawing = _useState4[0],\n      setDrawing = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      markers = _useState6[0],\n      setMarkers = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      details = _useState8[0],\n      setDetails = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      boundary = _useState10[0],\n      setBoundary = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      newPosition = _useState12[0],\n      setNewPosition = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      mapLayers = _useState14[0],\n      setMapLayers = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      customLayer = _useState16[0],\n      setCustomLayer = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      activeFloorPolygons = _useState18[0],\n      setActiveFloorPolygons = _useState18[1];\n\n  var _useState19 = useState([]),\n      _useState20 = _slicedToArray(_useState19, 2),\n      activeFloorBoundary = _useState20[0],\n      setActiveFloorBoundary = _useState20[1];\n\n  var _useState21 = useState(''),\n      _useState22 = _slicedToArray(_useState21, 2),\n      activeFloor = _useState22[0],\n      setActiveFloor = _useState22[1];\n\n  var _useState23 = useState(''),\n      _useState24 = _slicedToArray(_useState23, 2),\n      newDesc = _useState24[0],\n      setNewDesc = _useState24[1];\n\n  var _useState25 = useState(''),\n      _useState26 = _slicedToArray(_useState25, 2),\n      isEdit = _useState26[0],\n      setIsEdit = _useState26[1];\n\n  var _useState27 = useState(0),\n      _useState28 = _slicedToArray(_useState27, 2),\n      boundaryid = _useState28[0],\n      setBoundaryid = _useState28[1];\n\n  var _useState29 = useState(''),\n      _useState30 = _slicedToArray(_useState29, 2),\n      selectedFloorGeoData = _useState30[0],\n      setselectedFloorGeoData = _useState30[1]; //const purpleOptions = { color: 'purple' }\n\n\n  var mapRef = useRef();\n  var fgRef = useRef();\n  var refno = window.location.pathname.replace('/ViewBuilding/', '');\n  var leaflet = useLeaflet();\n  var polygon = [];\n  var center = [51.505, -0.09];\n  var rectangle = [[51.49, -0.08], [51.5, -0.06]];\n\n  var _useState31 = useState(0),\n      _useState32 = _slicedToArray(_useState31, 2),\n      selectedLayerIndex = _useState32[0],\n      setSelectedLayerIndex = _useState32[1];\n\n  var updateFloor = {\n    floorno: markers.length + 1,\n    description: \"newDesc\",\n    color: '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6),\n    blocks: [],\n    boundaries: []\n  }; //const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n  var _useState33 = useState(false),\n      _useState34 = _slicedToArray(_useState33, 2),\n      addFloor = _useState34[0],\n      setAddFloor = _useState34[1];\n\n  var _onFeatureGroupReady = function _onFeatureGroupReady(ref) {\n    if (ref !== undefined && ref !== null) {\n      var leafletFG = ref.leafletElement;\n\n      if (customLayer.length > 0) {\n        customLayer.eachLayer(function (layer) {\n          return leafletFG.addLayer(layer);\n        });\n      }\n    }\n  };\n\n  var handleDrawPolygonClick = function handleDrawPolygonClick(e) {\n    var activeFloorLcl = activeFloor;\n    var polygonType = e.target.value;\n    debugger;\n\n    switch (polygonType) {\n      case \"BO\":\n        break;\n\n      case \"BL\":\n        break;\n\n      default:\n        break;\n    }\n\n    if (activeFloorLcl !== undefined && activeFloorLcl !== null) {\n      if (activeFloorLcl.boundaries.length > 3) {\n        var layerType = e.layerType,\n            layer = e.layer;\n\n        if (layerType === \"polygon\") {\n          var _leaflet_id = layer._leaflet_id;\n          setMapLayers(function (layers) {\n            return [].concat(_toConsumableArray(layers), [{\n              id: _leaflet_id,\n              latlngs: layer.getLatLngs()[0]\n            } // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n            ]);\n          });\n        } //Edit this method to perform other actions\n\n\n        if (!drawing) {\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable();\n        } else {\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape();\n\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable();\n        }\n\n        setDrawing(!drawing);\n      }\n    }\n  }; //let dataLayer = new L.GeoJSON(props.data);\n\n\n  var onShapeDrawn = function onShapeDrawn(e) {\n    debugger;\n    setDrawing(false);\n    var layerType = e.layerType,\n        layer = e.layer;\n\n    if (layerType === \"polygon\") {\n      var _leaflet_id = layer._leaflet_id;\n    }\n\n    debugger;\n    var mar = markers;\n\n    for (var k = 0; k < mar.length; k++) {\n      var boundary_id = boundaryid;\n      boundary_id = layer._leaflet_id;\n      setBoundaryid(boundary_id);\n      console.log(boundaryid);\n      debugger;\n    } // e.layer.on('click', () => {\n    //     debugger;\n    //     setDrawing(layer);\n    //     //setSelectedLayerIndex(e.target.boundaryid);\n    //     console.log(selectedLayerIndex);\n    //     debugger;\n    //   editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n    // })\n\n\n    e.layer.on('contextmenu', function () {//do some contextmenu action here\n    });\n    e.layer.bindTooltip(\"Text\", {\n      className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n      sticky: true,\n      direction: 'right'\n    });\n  };\n\n  function handleLayerClick(e, drawControl) {\n    debugger;\n    var layerType = e.layerType,\n        layer = e.layer;\n\n    if (layerType === \"polygon\") {\n      var _leaflet_id = layer._leaflet_id;\n    }\n\n    var drawingLcl = drawing;\n    drawingLcl = layer;\n    setDrawing(drawingLcl); //   setSelectedLayerIndex(e.target.boundaryid);\n    //     console.log(selectedLayerIndex);\n\n    debugger; //editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  } //   e.layer.on('click', () => {\n  //     debugger;\n  //     setSelectedLayerIndex(e.target.boundaryid);\n  //     console.log(selectedLayerIndex);\n  //     debugger;\n  //   editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  // })\n\n\n  function onEditPath() {\n    debugger;\n  }\n\n  function onCreate() {\n    debugger;\n  }\n\n  function onDeleted() {\n    debugger;\n  }\n\n  function reverseCoordinate(coor) {\n    var retCoor = [];\n\n    if (coor !== undefined && coor !== null) {\n      if (coor.length > 0) {\n        for (var coorIdx = 0; coorIdx < coor.length; coorIdx++) {\n          var bound = coor[coorIdx];\n          var row = [];\n\n          if (bound.length === 2) {\n            row.push(bound[1]);\n            row.push(bound[0]);\n            retCoor.push(row);\n          }\n        }\n      }\n    }\n\n    return retCoor;\n  }\n\n  function block2Layer(iBlock, floorIndex, floorColor) {\n    return {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"id\": iBlock.blockId,\n        \"ground\": floorIndex\n      },\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"color\": floorColor,\n        \"coordinates\": [reverseCoordinate(iBlock.bounds)]\n      }\n    };\n  }\n\n  function onFloorSelect(e, data) {\n    var index = e.target.value;\n    var selectedFloorPolygonLayers = [];\n    var activeFloorSel = markers[index];\n    var floorColor = '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\n\n    for (var blockIdx = 0; blockIdx < activeFloorSel.blocks.length; blockIdx++) {\n      var blockPolygon = activeFloorSel.blocks[blockIdx];\n      var geoJsonObj = block2Layer(blockPolygon, index, floorColor);\n      selectedFloorPolygonLayers.push(geoJsonObj);\n    }\n\n    debugger;\n    var featureCollection = {\n      \"type\": \"FeatureCollection\",\n      \"name\": activeFloorSel.description,\n      \"crs\": {\n        \"type\": \"name\",\n        \"properties\": {\n          \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\"\n        }\n      },\n      \"features\": selectedFloorPolygonLayers\n    }; // const floorLayers = new L.GeoJSON(featureCollection);\n    // setActiveFloorPolygons(floorLayers.getLayers());\n\n    setselectedFloorGeoData(featureCollection);\n    setActiveFloorBoundary(activeFloorSel.boundaries);\n    setActiveFloor(activeFloorSel);\n  }\n\n  var addressCardStyle = {\n    backgroundImage: \"url(\".concat(require('./33.png'), \")\"),\n    backgroundSize: 'cover',\n    height: \"423px\"\n  };\n  var floor = {};\n  useEffect(function () {\n    var refTemp = refno.replace(\"/EditBuilding/\", \"\");\n    service.getBuilding(refTemp).then(function (selBuilding) {\n      console.log(\"returning\", selBuilding);\n      debugger;\n      setMarkers(selBuilding[0].floors);\n      var emptyFloor = {\n        \"floorno\": \"1\",\n        \"description\": \"\",\n        \"color\": \"#f18d00\",\n        \"blocks\": [],\n        \"boundaries\": []\n      };\n\n      if (selBuilding[0].floors.length > 0) {\n        setActiveFloor(selBuilding[0].floors[0]);\n        setActiveFloorBoundary(selBuilding[0].floors[0].boundaries);\n        setActiveFloorPolygons(selBuilding[0].floors[0].blocks);\n      } else {\n        setActiveFloor(emptyFloor);\n        setActiveFloorBoundary(emptyFloor.boundaries);\n        setActiveFloorPolygons(emptyFloor.blocks);\n      }\n\n      mapRef.current.leafletElement.flyTo([selBuilding[0].latitude, selBuilding[0].longitude], 16);\n      setDetails(selBuilding[0]); // setBoundary(selBuilding[0].boundary.geometry.coordinates[0]);\n\n      var ml = mapLayers;\n    });\n  }, []);\n\n  function toggle() {\n    setAddFloor(!addFloor);\n  }\n\n  var moveActiveFloor = function moveActiveFloor() {\n    var markersLcl = markers;\n    debugger;\n\n    if (activeFloor !== undefined && activeFloor !== null) {\n      for (var i = 0; i < markersLcl.length; i++) {\n        if (activeFloor.floorno === markersLcl[i].floorno) {\n          markersLcl[i].description = activeFloor.description;\n          markersLcl[i].blocks = activeFloor.blocks;\n          markersLcl[i].boundaries = activeFloor.boundaries;\n        }\n      }\n\n      setMarkers(markersLcl);\n    }\n  };\n\n  var _onCreate = function _onCreate(e) {\n    console.log(e);\n    var layerType = e.layerType,\n        layer = e.layer;\n\n    if (layerType === \"polygon\") {\n      var _leaflet_id = layer._leaflet_id;\n      setMapLayers(function (layers) {\n        return [].concat(_toConsumableArray(layers), [{\n          id: _leaflet_id,\n          latlngs: layer.getLatLngs()[0]\n        }]);\n      });\n    }\n  };\n\n  var _onEdited = function _onEdited(e) {\n    debugger; // console.log(e);\n    // const {\n    //   layers: { _layers },\n    // } = e;\n    // Object.values(_layers).map(({ _leaflet_id, editing }) => {\n    //   setMapLayers((layers) =>\n    //     layers.map((l) =>\n    //       l.id === _leaflet_id\n    //         ? { ...l, latlngs: { ...editing.latlngs[0] } }\n    //         : l\n    //     )\n    //   );\n    // });\n  };\n\n  var _onDeleted = function _onDeleted(e) {\n    console.log(e);\n    var _layers = e.layers._layers;\n    Object.values(_layers).map(function (_ref) {\n      var _leaflet_id = _ref._leaflet_id;\n      setMapLayers(function (layers) {\n        return layers.filter(function (l) {\n          return l.id !== _leaflet_id;\n        });\n      });\n    });\n  };\n\n  var deleteActiveFloor = function deleteActiveFloor() {\n    debugger;\n    var activeFloorLocal = activeFloor;\n    var markersL = markers;\n    var markersAfterDeletion = [];\n\n    for (var j = 0; j < markersL.length; j++) {\n      var marker = markersL[j];\n\n      if (marker.floorno !== activeFloorLocal.floorno) {\n        markersAfterDeletion.push(marker);\n      }\n    }\n\n    setMarkers(markersAfterDeletion);\n    setActiveFloorPolygons(markersAfterDeletion[0].blocks);\n    setActiveFloorBoundary(markersAfterDeletion[0].boundaries);\n    setActiveFloor(markersAfterDeletion[0]);\n  };\n\n  var handleAddFloor = function handleAddFloor() {\n    debugger;\n    var newFloor = {\n      \"floorno\": markers.length + 1,\n      \"description\": newDesc,\n      \"color\": \"#f18d00\",\n      \"blocks\": [],\n      \"boundaries\": []\n    };\n    setActiveFloor(newFloor);\n    setActiveFloorBoundary(newFloor.boundaries);\n    setActiveFloorPolygons(newFloor.blocks);\n    var markersLocal = markers;\n    markersLocal.push(newFloor);\n    setMarkers(markersLocal);\n    setNewDesc(\"\");\n  };\n\n  var changeHandlerDesc = function changeHandlerDesc(event) {\n    return setNewDesc(event.target.value);\n  };\n\n  var updateIsEdit = function updateIsEdit(e, value) {\n    return setIsEdit(value);\n  };\n\n  var handleSaveFloor = function handleSaveFloor(e) {\n    e.preventDefault();\n    debugger;\n    service.updateBuilding(markers[0].id, markers[0]);\n  };\n\n  var handleEditPolygonClick = function handleEditPolygonClick(e) {\n    var drawingLocal = drawing;\n    debugger;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"row\",\n      children: /*#__PURE__*/_jsxDEV(Breadcrumb, {\n        class: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(BreadcrumbItem, {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/map1\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"ri-home-4-line mr-1 float-left\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 583,\n              columnNumber: 45\n            }, _this2), \"Home\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 29\n          }, _this2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 13\n        }, _this2), /*#__PURE__*/_jsxDEV(BreadcrumbItem, {\n          active: true,\n          children: details.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 13\n        }, _this2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 11\n      }, _this2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 9\n    }, _this2), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 9\n    }, _this2), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      style: {\n        margin: \".6%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"iq-card iq-card-block iq-card-stretch iq-card-height bg-transparent\",\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"exampleInputReadonly\",\n              children: \"Building Id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 17\n            }, _this2), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"exampleInputReadonly\",\n              readOnly: \"\",\n              defaultValue: details.id,\n              disabled: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 17\n            }, _this2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 15\n          }, _this2), /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"exampleInputReadonly\",\n              children: \"Building Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 17\n            }, _this2), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"exampleInputReadonly\",\n              readOnly: \"\",\n              defaultValue: details.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 17\n            }, _this2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 15\n          }, _this2), /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"exampleInputReadonly\",\n              children: \"Street\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 17\n            }, _this2), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"exampleInputReadonly\",\n              readOnly: \"\",\n              defaultValue: details.street\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 17\n            }, _this2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 15\n          }, _this2), /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"exampleInputReadonly\",\n              children: \"Apartment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 615,\n              columnNumber: 17\n            }, _this2), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"exampleInputReadonly\",\n              readOnly: \"\",\n              defaultValue: details.Apartment\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 17\n            }, _this2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 15\n          }, _this2), /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"exampleInputReadonly\",\n              children: \"Doornum\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 17\n            }, _this2), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"exampleInputReadonly\",\n              readOnly: \"\",\n              defaultValue: details.doornum\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 623,\n              columnNumber: 17\n            }, _this2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 15\n          }, _this2), /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"exampleInputReadonly\",\n              children: \"Region\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 17\n            }, _this2), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"exampleInputReadonly\",\n              readOnly: \"\",\n              defaultValue: details.region\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 630,\n              columnNumber: 17\n            }, _this2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 15\n          }, _this2), /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"exampleInputReadonly\",\n              children: \"Country\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 17\n            }, _this2), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"exampleInputReadonly\",\n              readOnly: \"\",\n              defaultValue: details.country\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 17\n            }, _this2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 15\n          }, _this2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }, _this2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 11\n      }, _this2), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"iq-card overflow-hidden\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"display-4\",\n            children: activeFloor.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 15\n          }, _this2), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"home-chart-02\",\n            children: /*#__PURE__*/_jsxDEV(Map, {\n              center: [60.21846434365596, 24.811831922452843],\n              zoom: 17,\n              ref: mapRef,\n              children: [/*#__PURE__*/_jsxDEV(LayersControl, {\n                position: \"topright\",\n                children: [/*#__PURE__*/_jsxDEV(LayersControl.BaseLayer, {\n                  checked: false,\n                  name: \"Esri WorldImagery\",\n                  group: \"BaseLayers\",\n                  children: /*#__PURE__*/_jsxDEV(TileLayer, {\n                    url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\",\n                    attribution: \"\\xA9 <a href=\\\"Esri &mdash\\\">Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community</a> contributors\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 712,\n                    columnNumber: 23\n                  }, _this2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 707,\n                  columnNumber: 21\n                }, _this2), /*#__PURE__*/_jsxDEV(LayersControl.BaseLayer, {\n                  checked: true,\n                  name: \"OpenStreetMap\",\n                  group: \"BaseLayers\",\n                  children: /*#__PURE__*/_jsxDEV(TileLayer, {\n                    attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n                    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 722,\n                    columnNumber: 23\n                  }, _this2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 717,\n                  columnNumber: 21\n                }, _this2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 706,\n                columnNumber: 19\n              }, _this2), /*#__PURE__*/_jsxDEV(EditableGroup, {\n                data: selectedFloorGeoData\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 730,\n                columnNumber: 19\n              }, _this2), /*#__PURE__*/_jsxDEV(Control, {\n                position: \"topright\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: markers.map(function (mLr, didx) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(\"button\", {\n                        class: \"primary\",\n                        value: didx,\n                        onClick: onFloorSelect,\n                        style: {\n                          \"font-size\": \"1.5rem\",\n                          \"margin-left\": \".05rem\"\n                        },\n                        children: mLr.floorno\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 785,\n                        columnNumber: 29\n                      }, _this2)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 783,\n                      columnNumber: 27\n                    }, _this2);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 777,\n                  columnNumber: 21\n                }, _this2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 776,\n                columnNumber: 19\n              }, _this2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 650,\n              columnNumber: 17\n            }, _this2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 15\n          }, _this2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 13\n        }, _this2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 11\n      }, _this2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 9\n    }, _this2)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 579,\n    columnNumber: 5\n  }, _this2);\n};\n\n_s3(ViewBuilding, \"hic1ucsq2WTH2J2SfM81KYZy1yo=\", false, function () {\n  return [useLeaflet];\n});\n\n_c3 = ViewBuilding;\nexport default ViewBuilding;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"EditableLayer\");\n$RefreshReg$(_c2, \"EditableGroup\");\n$RefreshReg$(_c3, \"ViewBuilding\");","map":{"version":3,"sources":["/Users/likhitha/Documents/cms/client/src/components/dashboard/ViewBuilding.js"],"names":["React","useRef","useEffect","useState","useMap","service","EditControl","LayersControl2","ControlledLayerItem","Map","TileLayer","FeatureGroup","useLeaflet","LayersControl","Marker","Polygon","Popup","LayerGroup","Circle","GeoJSON","Control","L","CardBody","Card","Breadcrumb","BreadcrumbItem","ButtonGroup","ButtonToolbar","Form","FormGroup","Label","Input","ModalHeader","Modal","ModalBody","ModalFooter","makeStyles","Button","set","ReactTooltip","useStyles","theme","map","height","width","zIndex","buttonWrapper","position","bottom","spacing","marginLeft","marginBottom","transform","headerWrapper","marginTop","EditableLayer","props","leaflet","editLayerRef","drawControlRef","showDrawControl","removeControl","current","addControl","leafletElement","clearLayers","addLayer","layer","on","e","onLayerClicked","onMounted","ctl","EditableGroup","selectedLayerIndex","setSelectedLayerIndex","handleLayerClick","drawControl","target","feature","properties","editLayerId","dataLayer","data","layers","i","eachLayer","push","ViewBuilding","editRef","drawing","setDrawing","markers","setMarkers","details","setDetails","boundary","setBoundary","newPosition","setNewPosition","mapLayers","setMapLayers","customLayer","setCustomLayer","activeFloorPolygons","setActiveFloorPolygons","activeFloorBoundary","setActiveFloorBoundary","activeFloor","setActiveFloor","newDesc","setNewDesc","isEdit","setIsEdit","boundaryid","setBoundaryid","selectedFloorGeoData","setselectedFloorGeoData","mapRef","fgRef","refno","window","location","pathname","replace","polygon","center","rectangle","updateFloor","floorno","length","description","color","Math","random","toString","substr","blocks","boundaries","addFloor","setAddFloor","_onFeatureGroupReady","ref","undefined","leafletFG","handleDrawPolygonClick","activeFloorLcl","polygonType","value","layerType","_leaflet_id","id","latlngs","getLatLngs","_toolbars","draw","_modes","handler","enable","completeShape","disable","onShapeDrawn","mar","k","boundary_id","console","log","bindTooltip","className","sticky","direction","drawingLcl","onEditPath","onCreate","onDeleted","reverseCoordinate","coor","retCoor","coorIdx","bound","row","block2Layer","iBlock","floorIndex","floorColor","blockId","bounds","onFloorSelect","index","selectedFloorPolygonLayers","activeFloorSel","blockIdx","blockPolygon","geoJsonObj","featureCollection","addressCardStyle","backgroundImage","require","backgroundSize","floor","refTemp","getBuilding","then","selBuilding","floors","emptyFloor","flyTo","latitude","longitude","ml","toggle","moveActiveFloor","markersLcl","_onCreate","_onEdited","_onDeleted","_layers","Object","values","filter","l","deleteActiveFloor","activeFloorLocal","markersL","markersAfterDeletion","j","marker","handleAddFloor","newFloor","markersLocal","changeHandlerDesc","event","updateIsEdit","handleSaveFloor","preventDefault","updateBuilding","handleEditPolygonClick","drawingLocal","name","margin","street","Apartment","doornum","region","country","mLr","didx"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState, useMap } from \"react\";\nimport service from './services';\nimport { EditControl } from \"react-leaflet-draw\";\nimport LayersControl2, { ControlledLayerItem } from \"./LayerControl2\";\n// import \"./assets/leaflet.css\"\n// import \"./assets/leaflet.draw.css\"\nimport {\n  Map, TileLayer, FeatureGroup, useLeaflet, LayersControl, Marker, Polygon,\n  Popup, LayerGroup, Circle, GeoJSON\n} from \"react-leaflet\";\nimport Control from 'react-leaflet-control';\n\nimport L from \"leaflet\";\n\nimport { CardBody, Card,Breadcrumb, BreadcrumbItem, ButtonGroup, ButtonToolbar, Form, FormGroup, Label, Input, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap';\n// Material components\nimport { makeStyles, Button } from \"@material-ui/core\";\nimport { set } from \"mongoose\";\nimport ReactTooltip from \"react-tooltip\";\n\n\n\nconst useStyles = makeStyles(theme => ({\n  map: ({\n    height: `calc(90vh - 90px)`,\n    width: '60%',\n    zIndex: 0\n  }),\n  buttonWrapper: {\n    zIndex: 1,\n    position: \"absolute\",\n    bottom: theme.spacing(2),\n    marginLeft: \"30%\",\n    marginBottom: \"8%\",\n    transform: \"translateX(-50%)\",\n  },\n  headerWrapper: {\n    zIndex: 1,\n    marginLeft: theme.spacing(3),\n    marginTop: theme.spacing(1),\n  }\n}));\n\n\nfunction EditableLayer(props) {\n  const leaflet = useLeaflet();\n  const editLayerRef = React.useRef();\n  let drawControlRef = React.useRef();\n  let { map } = leaflet;\n\n  useEffect(() => {\n\n    if (!props.showDrawControl) {\n      map.removeControl(drawControlRef.current);\n    } else {\n      map.addControl(drawControlRef.current);\n    }\n\n    editLayerRef.current.leafletElement.clearLayers();\n\n    editLayerRef.current.leafletElement.addLayer(props.layer);\n    props.layer.on(\"click\", function (e) {\n      props.onLayerClicked(e, drawControlRef.current);\n    });\n  }, [props, map]);\n\n  function onMounted(ctl) {\n    drawControlRef.current = ctl;\n  }\n\n  return (\n    <div>\n      <FeatureGroup ref={editLayerRef}>\n        <EditControl\n          position=\"topright\"\n          onMounted={onMounted}\n          {...props}\n        />\n      </FeatureGroup>\n    </div>\n  );\n}\n\nfunction EditableGroup(props) {\n  const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n  function handleLayerClick(e, drawControl) {\n    setSelectedLayerIndex(e.target.feature.properties.editLayerId);\n  }\n\n  let dataLayer = new L.GeoJSON(props.data);\n  let layers = [];\n  let i = 0;\n  dataLayer.eachLayer((layer) => {\n    layer.feature.properties.editLayerId = i;\n    layers.push(layer);\n    i++;\n  });\n\n  return (\n    <div>\n      {layers.map((layer, i) => {\n        return (\n          <EditableLayer\n            key={i}\n            layer={layer}\n\n            onLayerClicked={handleLayerClick}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nconst ViewBuilding = (props) => {\n  const editRef = useRef();\n  const [drawing, setDrawing] = useState(false);\n  const [markers, setMarkers] = useState([])\n  const [details, setDetails] = useState('')\n  const [boundary, setBoundary] = useState([]);\n  const [newPosition, setNewPosition] = useState([])\n\n  const [mapLayers, setMapLayers] = useState('');\n  const [customLayer, setCustomLayer] = useState([]);\n\n  const [activeFloorPolygons, setActiveFloorPolygons] = useState([]);\n  const [activeFloorBoundary, setActiveFloorBoundary] = useState([]);\n  const [activeFloor, setActiveFloor] = useState('');\n  const [newDesc, setNewDesc] = useState('');\n  const [isEdit, setIsEdit] = useState('');\n  const [boundaryid, setBoundaryid] = useState(0);\n  const [selectedFloorGeoData, setselectedFloorGeoData] = useState('');\n\n\n  //const purpleOptions = { color: 'purple' }\n  const mapRef = useRef();\n  const fgRef = useRef();\n  const refno = window.location.pathname.replace('/ViewBuilding/', '');\n  const leaflet = useLeaflet();\n\n\n\n\n  const polygon = [\n\n  ]\n  const center = [51.505, -0.09]\n  const rectangle = [\n    [51.49, -0.08],\n    [51.5, -0.06],\n  ]\n  const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n\n\n\n\n  const updateFloor = {\n\n    floorno: markers.length + 1,\n    description: \"newDesc\",\n    color: '#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6),\n    blocks: [],\n    boundaries: []\n  }\n\n  //const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n  const [addFloor, setAddFloor] = useState(false);\n\n  const _onFeatureGroupReady = (ref) => {\n    if (ref !== undefined && ref !== null) {\n      let leafletFG = ref.leafletElement;\n      if (customLayer.length > 0) {\n        customLayer.eachLayer(layer => leafletFG.addLayer(layer));\n      }\n    }\n  }\n  const handleDrawPolygonClick = (e) => {\n    const activeFloorLcl = activeFloor;\n    const polygonType = e.target.value;\n    debugger;\n    switch (polygonType) {\n      case \"BO\":\n\n        break;\n\n      case \"BL\":\n\n        break;\n\n      default:\n        break;\n    }\n    if (activeFloorLcl !== undefined && activeFloorLcl !== null) {\n      if (activeFloorLcl.boundaries.length > 3) {\n        const { layerType, layer } = e;\n        if (layerType === \"polygon\") {\n          const { _leaflet_id } = layer;\n          setMapLayers((layers) => [\n            ...layers,\n            { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n\n            // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n          ]);\n        }\n        //Edit this method to perform other actions\n\n        if (!drawing) {\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n        } else {\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n        }\n\n        setDrawing(!drawing)\n\n      }\n\n    }\n\n\n\n  }\n  //let dataLayer = new L.GeoJSON(props.data);\n\n\n\n  const onShapeDrawn = (e) => {\n    debugger;\n    setDrawing(false)\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n\n    }\n    debugger;\n\n    const mar = markers;\n\n    for (var k = 0; k < mar.length; k++) {\n\n      let boundary_id = boundaryid;\n\n      boundary_id = layer._leaflet_id;\n\n\n      setBoundaryid(boundary_id);\n      console.log(boundaryid);\n\n\n      debugger;\n    }\n\n\n\n\n\n\n\n    // e.layer.on('click', () => {\n    //     debugger;\n    //     setDrawing(layer);\n    //     //setSelectedLayerIndex(e.target.boundaryid);\n    //     console.log(selectedLayerIndex);\n    //     debugger;\n    //   editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n    // })\n    e.layer.on('contextmenu', () => {\n      //do some contextmenu action here\n    })\n    e.layer.bindTooltip(\"Text\",\n      {\n        className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n        sticky: true,\n        direction: 'right'\n      }\n    );\n  }\n  function handleLayerClick(e, drawControl) {\n\n    debugger;\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n\n    }\n\n    let drawingLcl = drawing;\n    drawingLcl = layer;\n    setDrawing(drawingLcl);\n    //   setSelectedLayerIndex(e.target.boundaryid);\n    //     console.log(selectedLayerIndex);\n\n\n\n\n\n    debugger;\n    //editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n\n  }\n\n  //   e.layer.on('click', () => {\n  //     debugger;\n  //     setSelectedLayerIndex(e.target.boundaryid);\n  //     console.log(selectedLayerIndex);\n  //     debugger;\n  //   editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  // })\n\n  function onEditPath() {\n    debugger;\n  }\n  function onCreate() {\n    debugger;\n  }\n\n  function onDeleted() {\n    debugger;\n  }\n  function reverseCoordinate(coor) {\n    let retCoor = [];\n    if (coor !== undefined && coor !== null) {\n      if (coor.length > 0) {\n        for (let coorIdx = 0; coorIdx < coor.length; coorIdx++) {\n          const bound = coor[coorIdx];\n          let row = [];\n          if (bound.length === 2) {\n            row.push(bound[1]);\n            row.push(bound[0]);\n            retCoor.push(row);\n          }\n        }\n\n      }\n    }\n    return retCoor;\n  }\n  function block2Layer(iBlock, floorIndex, floorColor) {\n\n\n    return {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"id\": iBlock.blockId,\n        \"ground\": floorIndex,\n\n      },\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"color\": floorColor,\n        \"coordinates\": [reverseCoordinate(iBlock.bounds)]\n      }\n    }\n\n\n\n  }\n\n  function onFloorSelect(e, data) {\n    const index = e.target.value;\n    let selectedFloorPolygonLayers = [];\n    let activeFloorSel = markers[index];\n    const floorColor = '#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6);\n\n    for (let blockIdx = 0; blockIdx < activeFloorSel.blocks.length; blockIdx++) {\n      const blockPolygon = activeFloorSel.blocks[blockIdx];\n      const geoJsonObj = block2Layer(blockPolygon, index, floorColor);\n\n\n      selectedFloorPolygonLayers.push(geoJsonObj);\n\n    }\n    debugger;\n    const featureCollection = {\n      \"type\": \"FeatureCollection\",\n      \"name\": activeFloorSel.description,\n      \"crs\": {\n        \"type\": \"name\",\n        \"properties\": {\n          \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\"\n        }\n      },\n      \"features\": selectedFloorPolygonLayers\n    };\n    // const floorLayers = new L.GeoJSON(featureCollection);\n\n    // setActiveFloorPolygons(floorLayers.getLayers());\n    setselectedFloorGeoData(featureCollection);\n    setActiveFloorBoundary(activeFloorSel.boundaries);\n    setActiveFloor(activeFloorSel);\n\n  }\n\n\n\n  const addressCardStyle = {\n    backgroundImage: `url(${require('./33.png')})`,\n\n    backgroundSize: 'cover',\n\n    height: \"423px\",\n\n  }\n\n  let floor = {};\n  useEffect(() => {\n\n    var refTemp = refno.replace(\"/EditBuilding/\", \"\");\n    service\n      .getBuilding(refTemp)\n      .then(selBuilding => {\n        console.log(\"returning\", selBuilding)\n\n        debugger;\n        setMarkers(selBuilding[0].floors);\n        const emptyFloor = {\n          \"floorno\": \"1\",\n          \"description\": \"\",\n          \"color\": \"#f18d00\",\n          \"blocks\": [],\n          \"boundaries\": []\n        };\n        if (selBuilding[0].floors.length > 0) {\n          setActiveFloor(selBuilding[0].floors[0]);\n          setActiveFloorBoundary(selBuilding[0].floors[0].boundaries);\n          setActiveFloorPolygons(selBuilding[0].floors[0].blocks);\n\n        } else {\n\n          setActiveFloor(emptyFloor);\n          setActiveFloorBoundary(emptyFloor.boundaries);\n          setActiveFloorPolygons(emptyFloor.blocks);\n\n\n        }\n\n        mapRef.current.leafletElement.flyTo([selBuilding[0].latitude, selBuilding[0].longitude], 16)\n        setDetails(selBuilding[0]);\n        // setBoundary(selBuilding[0].boundary.geometry.coordinates[0]);\n\n        let ml = mapLayers;\n\n\n\n\n      })\n\n  }, [])\n\n  function toggle() {\n    setAddFloor(!addFloor);\n  }\n\n  const moveActiveFloor = () => {\n    const markersLcl = markers;\n    debugger;\n    if (activeFloor !== undefined && activeFloor !== null) {\n      for (let i = 0; i < markersLcl.length; i++) {\n\n        if (activeFloor.floorno === markersLcl[i].floorno) {\n          markersLcl[i].description = activeFloor.description;\n          markersLcl[i].blocks = activeFloor.blocks;\n          markersLcl[i].boundaries = activeFloor.boundaries;\n\n        }\n      }\n      setMarkers(markersLcl);\n    }\n\n  }\n  const _onCreate = (e) => {\n    console.log(e);\n\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n\n      setMapLayers((layers) => [\n        ...layers,\n        { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n      ]);\n    }\n  };\n\n\n  const _onEdited = (e) => {\n    debugger;\n    // console.log(e);\n    // const {\n    //   layers: { _layers },\n    // } = e;\n\n    // Object.values(_layers).map(({ _leaflet_id, editing }) => {\n    //   setMapLayers((layers) =>\n    //     layers.map((l) =>\n    //       l.id === _leaflet_id\n    //         ? { ...l, latlngs: { ...editing.latlngs[0] } }\n    //         : l\n    //     )\n    //   );\n    // });\n  };\n\n  const _onDeleted = (e) => {\n    console.log(e);\n    const {\n      layers: { _layers },\n    } = e;\n\n    Object.values(_layers).map(({ _leaflet_id }) => {\n      setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\n    });\n  };\n\n  const deleteActiveFloor = () => {\n    debugger;\n    const activeFloorLocal = activeFloor;\n    const markersL = markers;\n    const markersAfterDeletion = [];\n    for (let j = 0; j < markersL.length; j++) {\n      const marker = markersL[j];\n      if (marker.floorno !== activeFloorLocal.floorno) {\n        markersAfterDeletion.push(marker);\n      }\n\n    }\n    setMarkers(markersAfterDeletion);\n    setActiveFloorPolygons(markersAfterDeletion[0].blocks);\n    setActiveFloorBoundary(markersAfterDeletion[0].boundaries);\n    setActiveFloor(markersAfterDeletion[0]);\n\n  }\n\n\n  const handleAddFloor = () => {\n    debugger;\n    const newFloor = {\n      \"floorno\": markers.length + 1,\n      \"description\": newDesc,\n      \"color\": \"#f18d00\",\n      \"blocks\": [],\n      \"boundaries\": []\n    }\n    setActiveFloor(newFloor);\n    setActiveFloorBoundary(newFloor.boundaries);\n    setActiveFloorPolygons(newFloor.blocks);\n    const markersLocal = markers;\n    markersLocal.push(newFloor);\n    setMarkers(markersLocal);\n\n    setNewDesc(\"\");\n  }\n\n\n  const changeHandlerDesc = (event) => setNewDesc(event.target.value);\n  const updateIsEdit = (e, value) => setIsEdit(value);\n\n  const handleSaveFloor = (e) => {\n    e.preventDefault()\n    debugger;\n\n    service\n      .updateBuilding(markers[0].id, markers[0])\n\n  }\n\n  const handleEditPolygonClick = (e) => {\n    const drawingLocal = drawing;\n    debugger;\n\n  }\n\n\n\n  return (\n\n    <div>\n     \n        <div class=\"row\">\n          <Breadcrumb class=\"mb-4\">\n            <BreadcrumbItem><a href=\"/map1\"><i\n              className=\"ri-home-4-line mr-1 float-left\" />Home</a></BreadcrumbItem>\n            <BreadcrumbItem active>{details.name}</BreadcrumbItem>\n          </Breadcrumb>\n\n        </div>\n\n        <div></div>\n        <div className=\"row\" style={{ margin: \".6%\" }}>\n\n          <div className=\"col-lg-4\">\n            <div className=\"iq-card iq-card-block iq-card-stretch iq-card-height bg-transparent\">\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Building Id</Label>\n                <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                  readOnly=\"\" defaultValue={details.id} disabled />\n              </FormGroup>\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Building Name</Label>\n                <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                  readOnly=\"\" defaultValue={details.description} />\n              </FormGroup>\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Street</Label>\n                <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                  readOnly=\"\" defaultValue={details.street} />\n              </FormGroup>\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Apartment</Label>\n                <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                  readOnly=\"\" defaultValue={details.Apartment} />\n              </FormGroup>\n\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Doornum</Label>\n                <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                  readOnly=\"\" defaultValue={details.doornum} />\n              </FormGroup>\n\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Region</Label>\n                <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                  readOnly=\"\" defaultValue={details.region} />\n              </FormGroup>\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Country</Label>\n                <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                  readOnly=\"\" defaultValue={details.country} />\n\n              </FormGroup>\n\n            </div>\n          </div>\n\n\n          <div className=\"col-lg-8\">\n            <div className=\"iq-card overflow-hidden\">\n              <h1 className=\"display-4\">{activeFloor.description}</h1>\n\n              <div id=\"home-chart-02\">\n                <Map center={[60.21846434365596, 24.811831922452843]} zoom={17} ref={mapRef} >\n                  {/* <Control position=\"topright\">\n                    <button class=\"primary\" onClick={handleDrawPolygonClick} value=\"BO\"\n                    style={{ \"font-size\": \"1.5rem\", \"margin-left\": \".05rem\" ,\"margin-right\": \".05rem\" }}>\n                    Add Floor\n                        </button>\n                    <Button className=\"btn btn-primary\"\n                      style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\", \"margin-right\": \".05rem\" }} color=\"primary\" onClick={handleSaveFloor}> SaveBuilding </Button>\n\n\n                    <Button className=\"btn btn-primary\" style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\", \"margin-right\": \".05rem\" }} color=\"primary\" onClick={() => toggle(\"addFloor\")}> AddFloor </Button>{' '}\n\n\n                    <Modal isOpen={addFloor} toggle={() => toggle(\"addFloor\")} className=\"modal-sm\">\n                      <ModalHeader className=\"btn btn-primary\" toggle={() => toggle(\"addFloor\")}>Add Floor</ModalHeader>\n                      <ModalBody>\n\n\n                        <p>Floor: {markers.length + 1}</p>\n\n                        <p>Enter Floor Description</p>\n                        <input type=\"text\" onChange={changeHandlerDesc} value={newDesc}\n                          lur={updateIsEdit} />\n\n                      </ModalBody>\n                      <ModalFooter>\n\n                        <Button color=\"primary\" onClick={() => {\n                          toggle(\"addFloor\");\n                          // handleAddFloor(); \n                          handleAddFloor();\n\n                        }}>OK</Button>{' '}\n                        <Button color=\"secondary\" onClick={() => toggle(\"addFloor\")}>Cancel</Button>\n                      </ModalFooter>\n                    </Modal>\n\n                    <button class=\"btn btn-primary\" onClick={deleteActiveFloor} value=\"BO\"\n                      style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\", \"margin-right\": \".05rem\" }}>\n                      Delete Floor\n                        </button>\n                    <button class=\"btn btn-primary\" onClick={handleDrawPolygonClick} value=\"BO\"\n                      style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\", \"margin-right\": \".05rem\" }}>\n                      Manage Boundary\n                        </button>\n\n                    <button class=\"btn btn-primary\" onClick={handleDrawPolygonClick} value=\"BL\"\n                      style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\" }}>\n                      AddBlock\n                        </button>\n\n                    <button class=\"btn btn-primary\" onClick={handleEditPolygonClick}\n                      style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\" }}>\n                      EditBlock\n                        </button>\n                  </Control> */}\n                  <LayersControl position=\"topright\">\n                    <LayersControl.BaseLayer\n                      checked={false}\n                      name=\"Esri WorldImagery\"\n                      group=\"BaseLayers\"\n                    >\n                      <TileLayer\n                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                        attribution='&copy; <a href=\"Esri &mdash\">Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community</a> contributors'\n                      />\n                    </LayersControl.BaseLayer >\n                    <LayersControl.BaseLayer\n                      checked={true}\n                      name=\"OpenStreetMap\"\n                      group=\"BaseLayers\"\n                    >\n                      <TileLayer\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                      />\n                    </LayersControl.BaseLayer >\n\n                  </LayersControl>\n\n                  <EditableGroup data={selectedFloorGeoData} />\n\n\n                  {/* <FeatureGroup>\n                  \n                  {activeFloorPolygons.map((polygonObjLayer,polyIdx)=>(\n                      <div>\n                      <EditControl\n                      layer={polygonObjLayer}\n                      position='topleft'\n                      onCreated={onShapeDrawn}\n                      onEdited = {_onEdited}\n                      onDeleted = {_onDeleted}\n                      \n                      \n                      \n                      //here you can specify your shape options and which handler you want to enable\n                      draw={{\n                        rectangle: false,\n                        polygon: true,\n                        circle: false,\n                        polyline: false,\n                        circlemarker: false,\n                        marker: false\n  \n                      }}\n\n                    >\n  \n  \n  \n  \n                    </EditControl>\n\n                    <Polygon positions={polygonObj.bounds} ></Polygon>\n                    </div>\n                    \n                  ))}\n                <Polygon positions={activeFloorBoundary} onClick={handleLayerClick}> </Polygon>\n\n                \n\n                </FeatureGroup> */}\n\n\n\n                  <Control position=\"topright\" >\n                    <div>\n                      {\n                        markers.map((mLr, didx) => (\n\n\n\n                          <div>\n\n                            <button class=\"primary\" value={didx} onClick={onFloorSelect} style={{ \"font-size\": \"1.5rem\", \"margin-left\": \".05rem\" }}>\n                              {mLr.floorno}\n                            </button>\n\n\n                          </div>\n                        ))\n\n                      }\n\n                    </div>\n                  </Control>\n\n\n\n\n\n                </Map>\n              </div>\n            </div>\n          </div>\n        </div>\n\n\n\n\n      </div>\n  )\n}\n\n\nexport default ViewBuilding;"]},"metadata":{},"sourceType":"module"}