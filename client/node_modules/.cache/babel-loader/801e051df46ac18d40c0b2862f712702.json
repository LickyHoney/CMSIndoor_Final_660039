{"ast":null,"code":"import _toConsumableArray from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/likhitha/Documents/cms/client/src/components/dashboard/EditBuilding.js\",\n    _this = this,\n    _s3 = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState, useMap } from \"react\";\nimport service from './services';\nimport { EditControl } from \"react-leaflet-draw\";\nimport LayersControl2, { ControlledLayerItem } from \"./LayerControl2\"; // import \"./assets/leaflet.css\"\n// import \"./assets/leaflet.draw.css\"\n\nimport { Map, TileLayer, FeatureGroup, useLeaflet, LayersControl, Marker, Polygon, Popup, LayerGroup, Circle, GeoJSON } from \"react-leaflet\";\nimport Control from 'react-leaflet-control';\nimport L, { circleMarker } from \"leaflet\";\nimport { CardBody, Card, Breadcrumb, BreadcrumbItem, ButtonGroup, ButtonToolbar, Form, FormGroup, Label, Input, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap'; // Material components\n\nimport { makeStyles, Button } from \"@material-ui/core\";\nimport { set } from \"mongoose\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar addFloorCounter = 0;\nvar useStyles = makeStyles(function (theme) {\n  return {\n    map: {\n      height: \"calc(90vh - 90px)\",\n      width: '60%',\n      zIndex: 0\n    },\n    buttonWrapper: {\n      zIndex: 1,\n      position: \"absolute\",\n      bottom: theme.spacing(2),\n      marginLeft: \"30%\",\n      marginBottom: \"8%\",\n      transform: \"translateX(-50%)\"\n    },\n    headerWrapper: {\n      zIndex: 1,\n      marginLeft: theme.spacing(3),\n      marginTop: theme.spacing(1)\n    }\n  };\n});\nvar modalStyles = {\n  width: 500,\n  height: 500\n};\n\nvar EditBuilding = function EditBuilding(props) {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  var editRef = useRef();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      drawing = _useState2[0],\n      setDrawing = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      markers = _useState4[0],\n      setMarkers = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      details = _useState6[0],\n      setDetails = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      boundary = _useState8[0],\n      setBoundary = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      newPosition = _useState10[0],\n      setNewPosition = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      mapLayers = _useState12[0],\n      setMapLayers = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      customLayer = _useState14[0],\n      setCustomLayer = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      activeFloorPolygons = _useState16[0],\n      setActiveFloorPolygons = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      activeFloorBoundary = _useState18[0],\n      setActiveFloorBoundary = _useState18[1];\n\n  var _useState19 = useState(''),\n      _useState20 = _slicedToArray(_useState19, 2),\n      activeFloor = _useState20[0],\n      setActiveFloor = _useState20[1];\n\n  var _useState21 = useState(''),\n      _useState22 = _slicedToArray(_useState21, 2),\n      newDesc = _useState22[0],\n      setNewDesc = _useState22[1];\n\n  var _useState23 = useState(''),\n      _useState24 = _slicedToArray(_useState23, 2),\n      isEdit = _useState24[0],\n      setIsEdit = _useState24[1];\n\n  var _useState25 = useState(0),\n      _useState26 = _slicedToArray(_useState25, 2),\n      boundaryid = _useState26[0],\n      setBoundaryid = _useState26[1];\n\n  var _useState27 = useState(''),\n      _useState28 = _slicedToArray(_useState27, 2),\n      selectedFloorGeoData = _useState28[0],\n      setselectedFloorGeoData = _useState28[1];\n\n  var _useState29 = useState(false),\n      _useState30 = _slicedToArray(_useState29, 2),\n      blockDescription = _useState30[0],\n      setBlockDescription = _useState30[1];\n\n  var _useState31 = useState(''),\n      _useState32 = _slicedToArray(_useState31, 2),\n      draftBlock = _useState32[0],\n      setDraftBlock = _useState32[1]; // const [addCounter,setAddCounter] = React.useState(0);\n  //const purpleOptions = { color: 'purple' }\n\n\n  var mapRef = useRef();\n  var fgRef = useRef();\n  var refno = window.location.pathname.replace('/ViewBuilding/', '');\n  var leaflet = useLeaflet();\n\n  var _useState33 = useState(''),\n      _useState34 = _slicedToArray(_useState33, 2),\n      blockName = _useState34[0],\n      setBlockName = _useState34[1];\n\n  var _useState35 = useState(0),\n      _useState36 = _slicedToArray(_useState35, 2),\n      FloorIdx = _useState36[0],\n      setFloorIdx = _useState36[1];\n\n  var polygon = [];\n  var center = [51.505, -0.09];\n  var rectangle = [[51.49, -0.08], [51.5, -0.06]];\n\n  var _useState37 = useState(0),\n      _useState38 = _slicedToArray(_useState37, 2),\n      selectedLayerIndex = _useState38[0],\n      setSelectedLayerIndex = _useState38[1];\n\n  function Boundary() {\n    var detailLcl = details;\n\n    if (details !== null && details !== undefined && details !== \"\") {\n      if (details.boundaries !== null && details.boundaries !== undefined && details.boundaries !== \"\") {\n        if (details.boundaries.length > 0) {\n          return /*#__PURE__*/_jsxDEV(Polygon, {\n            positions: details.boundaries\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 20\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 19\n          }, this);\n        }\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this);\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }, this);\n    }\n  }\n\n  function EditableLayer(props) {\n    _s();\n\n    var leaflet = useLeaflet();\n    var editLayerRef = React.useRef();\n    var drawControlRef = React.useRef();\n    var map = leaflet.map;\n    useEffect(function () {\n      if (!props.showDrawControl) {\n        map.removeControl(drawControlRef.current);\n      } else {\n        map.addControl(drawControlRef.current);\n      }\n\n      editLayerRef.current.leafletElement.clearLayers();\n      editLayerRef.current.leafletElement.addLayer(props.layer);\n      props.layer.on(\"click\", function (e) {\n        props.onLayerClicked(e, drawControlRef.current);\n      });\n    }, [props, map]);\n\n    function onMounted(ctl) {\n      drawControlRef.current = ctl;\n    }\n\n    function onEditPath(e) {\n      var layerObj = e.layers._layers;\n      var layer = layerObj[Object.keys(layerObj)[0]];\n      var center = [layer._bounds.getCenter()];\n      var label = [layer.bindTooltip(feature.properties.text, {\n        permanent: true,\n        direction: 'center'\n      }).openTooltip()];\n\n      if (layer !== undefined && layer !== null) {\n        var _props = layer.feature.properties;\n\n        if (_props.hasOwnProperty('id') && _props.hasOwnProperty('ground')) {\n          var polygonId = _props.id;\n          var floorIndex = _props.ground;\n          var latlngs = layer.getLatLngs();\n          latlngs = latlngs.length > 0 ? latlngs[0] : latlngs;\n          crupdateLayer2ActiveFloor(latlngs, polygonId, floorIndex, center, label);\n        }\n      }\n    }\n\n    function onPolygonDeleted(e) {\n      console.log(e);\n      var _layers = e.layers._layers;\n      Object.values(_layers).map(function (_ref) {//setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\n\n        var _leaflet_id = _ref._leaflet_id;\n      });\n    }\n\n    function onPolygonCreated(e) {\n      // toggleBlockDescription();\n      debugger; //addFloorCounter++;\n\n      setDraftBlock(e.layer);\n      toggleBlockDescription(); // if (addFloorCounter === activeFloor.blocks.length) {\n\n      debugger; //}\n    }\n\n    function onDeleted() {}\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FeatureGroup, {\n        ref: editLayerRef,\n        children: [/*#__PURE__*/_jsxDEV(EditControl, _objectSpread({\n          position: \"topright\",\n          onMounted: onMounted,\n          onCreated: onPolygonCreated,\n          onEdited: onEditPath,\n          onDeleted: onPolygonDeleted,\n          draw: {\n            polygon: true,\n            circle: false,\n            polyline: false,\n            marker: false,\n            rectangle: false,\n            circlemarker: false\n          }\n        }, props), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: [60.21846434365596, 24.811831922452843]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this);\n  }\n\n  _s(EditableLayer, \"mRBzQf4B+lSmsOrt2PcplvXDKEI=\", false, function () {\n    return [useLeaflet];\n  });\n\n  function EditableGroup(props) {\n    _s2();\n\n    var _this2 = this;\n\n    var _useState39 = useState(0),\n        _useState40 = _slicedToArray(_useState39, 2),\n        selectedLayerIndex = _useState40[0],\n        setSelectedLayerIndex = _useState40[1];\n\n    function handleLayerClick(e, drawControl) {\n      setSelectedLayerIndex(e.target.feature.properties.editLayerId);\n    }\n\n    debugger;\n    var dataLayer = new L.GeoJSON(props.data);\n    var layers = [];\n    var i = 0;\n    dataLayer.eachLayer(function (layer) {\n      layer.feature.properties.editLayerId = i;\n      layers.push(layer);\n      i++;\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: layers.map(function (layer, i) {\n          return /*#__PURE__*/_jsxDEV(EditableLayer, {\n            layer: layer,\n            showDrawControl: i === selectedLayerIndex,\n            onLayerClicked: handleLayerClick\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, _this2);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this);\n  }\n\n  _s2(EditableGroup, \"Ibts1gRA4nda0R5pUeZ3xqL+kKw=\");\n\n  var updateFloor = {\n    id: FloorIdx,\n    // floorno: markers.length + 1,\n    description: \"newDesc\",\n    color: '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6),\n    blocks: [],\n    boundaries: []\n  }; //const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n  var _useState41 = useState(false),\n      _useState42 = _slicedToArray(_useState41, 2),\n      addFloor = _useState42[0],\n      setAddFloor = _useState42[1];\n\n  var _onFeatureGroupReady = function _onFeatureGroupReady(ref) {\n    if (ref !== undefined && ref !== null) {\n      var leafletFG = ref.leafletElement;\n\n      if (customLayer.length > 0) {\n        customLayer.eachLayer(function (layer) {\n          return leafletFG.addLayer(layer);\n        });\n      }\n    }\n  };\n\n  var handleDrawPolygonClick = function handleDrawPolygonClick(e) {\n    var activeFloorLcl = activeFloor;\n    var polygonType = e.target.value;\n\n    switch (polygonType) {\n      case \"BO\":\n        break;\n\n      case \"BL\":\n        break;\n\n      default:\n        break;\n    }\n\n    if (activeFloorLcl !== undefined && activeFloorLcl !== null) {\n      if (activeFloorLcl.boundaries.length > 3) {\n        var layerType = e.layerType,\n            layer = e.layer;\n\n        if (layerType === \"polygon\") {\n          var _leaflet_id = layer._leaflet_id;\n          setMapLayers(function (layers) {\n            return [].concat(_toConsumableArray(layers), [{\n              id: _leaflet_id,\n              latlngs: layer.getLatLngs()[0]\n            } // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n            ]);\n          });\n        } //Edit this method to perform other actions\n\n\n        if (!drawing) {\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable();\n        } else {\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape();\n\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable();\n        }\n\n        setDrawing(!drawing);\n      }\n    }\n  }; //let dataLayer = new L.GeoJSON(props.data);\n\n\n  var onShapeDrawn = function onShapeDrawn(e) {\n    setDrawing(false);\n    var layerType = e.layerType,\n        layer = e.layer;\n\n    if (layerType === \"polygon\") {\n      var _leaflet_id = layer._leaflet_id;\n    }\n\n    var mar = markers;\n\n    for (var k = 0; k < mar.length; k++) {\n      var boundary_id = boundaryid;\n      boundary_id = layer._leaflet_id;\n      setBoundaryid(boundary_id);\n      console.log(boundaryid);\n    } // e.layer.on('click', () => {\n    //     \n    //     setDrawing(layer);\n    //     //setSelectedLayerIndex(e.target.boundaryid);\n    //     console.log(selectedLayerIndex);\n    //     \n    //   editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n    // })\n\n\n    e.layer.on('contextmenu', function () {//do some contextmenu action here\n    });\n    e.layer.bindTooltip(\"Text\", {\n      className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n      sticky: true,\n      direction: 'right'\n    });\n  };\n\n  function handleLayerClick(e, drawControl) {\n    var layerType = e.layerType,\n        layer = e.layer;\n\n    if (layerType === \"polygon\") {\n      var _leaflet_id = layer._leaflet_id;\n    }\n\n    var drawingLcl = drawing;\n    drawingLcl = layer;\n    setDrawing(drawingLcl); //   setSelectedLayerIndex(e.target.boundaryid);\n    //     console.log(selectedLayerIndex);\n    //editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  } //   e.layer.on('click', () => {\n  //     \n  //     setSelectedLayerIndex(e.target.boundaryid);\n  //     console.log(selectedLayerIndex);\n  //     \n  //   editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  // })\n\n\n  function crupdateLayer2ActiveFloor(latlngs, polygonId, floorIndex, center, label) {\n    var coordinates = [];\n\n    for (var latlngsIdx = 0; latlngsIdx < latlngs.length; latlngsIdx++) {\n      var latlng = latlngs[latlngsIdx];\n      var coor1 = [];\n      var lat = latlng.hasOwnProperty('lat') ? latlng.lat : false;\n      var lng = latlng.hasOwnProperty('lng') ? latlng.lng : false;\n\n      if (!(lat === false || lng === false)) {\n        coor1.push(lat);\n        coor1.push(lng);\n        coordinates.push(coor1);\n      }\n    }\n\n    debugger;\n    var activeFloor4crup = activeFloor;\n\n    if (polygonId === null) {\n      toggleBlockDescription(); //console.log(blockName);\n\n      debugger; //  toggleBlockDescription()\n      //ask description\n      //const blName = blockName;\n\n      activeFloor4crup.blocks.push({\n        blockId: new Date().getTime().toString(),\n        text: blockName,\n        bounds: coordinates,\n        centre: center\n      });\n      debugger;\n    } else {\n      for (var flindex = 0; flindex < activeFloor4crup.blocks.length; flindex++) {\n        var block = activeFloor4crup.blocks[flindex];\n\n        if (block.blockId === polygonId) {\n          activeFloor4crup.blocks[flindex].bounds = coordinates; // toggleBlockDescription()\n        }\n      }\n    }\n\n    updateBuildingFromActiveFloor(floorIndex);\n  }\n\n  function updateBuildingFromActiveFloor(floorIndex) {\n    var detailsLocal = details;\n    var markerLcl = markers;\n\n    if (markerLcl !== undefined && markerLcl !== null) {\n      if (markers.length >= 1 && floorIndex >= 0) {\n        markerLcl[floorIndex] = activeFloor;\n        detailsLocal.floors = markerLcl;\n        setDetails(detailsLocal);\n      }\n    }\n  }\n\n  function reverseCoordinate(coor) {\n    var retCoor = [];\n\n    if (coor !== undefined && coor !== null) {\n      if (coor.length > 0) {\n        for (var coorIdx = 0; coorIdx < coor.length; coorIdx++) {\n          var bound = coor[coorIdx];\n          var row = [];\n\n          if (bound.length === 2) {\n            row.push(bound[1]);\n            row.push(bound[0]);\n            retCoor.push(row);\n          }\n        }\n      }\n    }\n\n    return retCoor;\n  }\n\n  var ondetailChange = function ondetailChange(e) {\n    debugger;\n    var detailLcl = details;\n    var value = e.target.value;\n    var property = e.target.getAttribute('property');\n\n    if (property !== undefined && property !== null && property !== '') {\n      detailLcl[property] = value;\n      setDetails(detailLcl);\n    }\n  };\n\n  var handleSaveFloor = function handleSaveFloor(e, polygonId) {\n    debugger;\n    var detailsLocal = details;\n    var markersLocal = markers;\n    details.floors = markersLocal;\n    service.updateBuilding(details.id, details);\n    window.location.reload();\n  };\n\n  function block2Layer(iBlock, floorIndex, floorColor) {\n    return {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"id\": iBlock.blockId,\n        \"text\": blockName,\n        \"ground\": floorIndex\n      },\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"color\": floorColor,\n        \"coordinates\": [reverseCoordinate(iBlock.bounds)]\n      }\n    };\n  }\n\n  function toggleBlockDescription() {\n    setBlockDescription(!blockDescription);\n  }\n\n  var onChangeIndex = function onChangeIndex(e) {\n    e.preventDefault();\n    setFloorIdx(e.target.value);\n  };\n\n  var onChangeName = function onChangeName(e) {\n    e.preventDefault();\n    setBlockName(e.target.value);\n  };\n\n  function onFloorSelect(e, data) {\n    debugger;\n    var index = e.target.value;\n    var selectedFloorPolygonLayers = [];\n    var activeFloorSel = markers[index];\n    var floorColor = '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\n\n    for (var blockIdx = 0; blockIdx < activeFloorSel.blocks.length; blockIdx++) {\n      var blockPolygon = activeFloorSel.blocks[blockIdx]; //const center = [activeFloorSel.blocks.bounds.getCenter()];\n\n      var geoJsonObj = block2Layer(blockPolygon, index, floorColor); // blockPolygon.push({centre: center});\n\n      selectedFloorPolygonLayers.push(geoJsonObj); // create layer for marker \n    }\n\n    var featureCollection = {\n      \"type\": \"FeatureCollection\",\n      \"name\": \"\",\n      \"crs\": {\n        \"type\": \"name\",\n        \"properties\": {\n          \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\"\n        }\n      },\n      \"features\": selectedFloorPolygonLayers\n    }; // const floorLayers = new L.GeoJSON(featureCollection);\n    // setActiveFloorPolygons(floorLayers.getLayers());\n\n    setselectedFloorGeoData(featureCollection);\n    setActiveFloorBoundary(activeFloorSel.boundaries);\n    setActiveFloor(activeFloorSel);\n  }\n\n  var addressCardStyle = {\n    backgroundImage: \"url(\".concat(require('./33.png'), \")\"),\n    backgroundSize: 'cover',\n    height: \"423px\"\n  };\n  var floor = {};\n  useEffect(function () {\n    var refTemp = refno.replace(\"/EditBuilding/\", \"\");\n    service.getBuilding(refTemp).then(function (selBuilding) {\n      console.log(\"returning\", selBuilding);\n      setMarkers(selBuilding[0].floors);\n\n      if (selBuilding[0].floors.length > 0) {\n        setActiveFloor(selBuilding[0].floors[0]);\n      } else {\n        setActiveFloor({\n          \"id\": FloorIdx,\n          // \"floorno\": \"1\",\n          \"description\": \"\",\n          \"color\": \"#f18d00\",\n          \"blocks\": []\n        });\n      }\n\n      setDetails(selBuilding[0]);\n      mapRef.current.leafletElement.flyTo([selBuilding[0].latitude, selBuilding[0].longitude], 16); // setBoundary(selBuilding[0].boundary.geometry.coordinates[0]);\n\n      var ml = mapLayers;\n    });\n  }, []);\n\n  function _toggle() {\n    setAddFloor(!addFloor);\n  }\n\n  var moveActiveFloor = function moveActiveFloor() {\n    var markersLcl = markers;\n\n    if (activeFloor !== undefined && activeFloor !== null) {\n      for (var i = 0; i < markersLcl.length; i++) {\n        if (activeFloor.id === markersLcl[i].id) {\n          markersLcl[i].description = activeFloor.description;\n          markersLcl[i].blocks = activeFloor.blocks;\n          markersLcl[i].boundaries = activeFloor.boundaries;\n        }\n      }\n\n      setMarkers(markersLcl);\n    }\n  };\n\n  var _onCreate = function _onCreate(e) {\n    console.log(e);\n    var layerType = e.layerType,\n        layer = e.layer;\n\n    if (layerType === \"polygon\") {\n      var _leaflet_id = layer._leaflet_id;\n      setMapLayers(function (layers) {\n        return [].concat(_toConsumableArray(layers), [{\n          id: _leaflet_id,\n          latlngs: layer.getLatLngs()[0]\n        }]);\n      });\n    }\n  };\n\n  var _onEdited = function _onEdited(e) {// console.log(e);\n    // const {\n    //   layers: { _layers },\n    // } = e;\n    // Object.values(_layers).map(({ _leaflet_id, editing }) => {\n    //   setMapLayers((layers) =>\n    //     layers.map((l) =>\n    //       l.id === _leaflet_id\n    //         ? { ...l, latlngs: { ...editing.latlngs[0] } }\n    //         : l\n    //     )\n    //   );\n    // });\n  };\n\n  var _onDeleted = function _onDeleted(e) {\n    console.log(e);\n    var _layers = e.layers._layers;\n    Object.values(_layers).map(function (_ref2) {\n      var _leaflet_id = _ref2._leaflet_id;\n      setMapLayers(function (layers) {\n        return layers.filter(function (l) {\n          return l.id !== _leaflet_id;\n        });\n      });\n    });\n  }; // const deleteBuildingConfirm = (e) => {\n  //   debugger;\n  //   const bid = delBuildingId;\n  //   service.deletion(bid);\n  //   window.location.reload();\n  // }\n\n\n  var deleteActiveFloor = function deleteActiveFloor() {\n    debugger;\n    var activeFloorLocal = activeFloor;\n    var markersL = markers;\n    var markersAfterDeletion = [];\n\n    for (var j = 0; j < markersL.length; j++) {\n      var marker = markersL[j];\n\n      if (marker.id !== activeFloorLocal.id) {\n        markersAfterDeletion.push(marker);\n      }\n    }\n\n    setMarkers(markersAfterDeletion); // setActiveFloorPolygons(markersAfterDeletion[0].blocks);\n    // setActiveFloorBoundary(markersAfterDeletion[0].boundaries);\n    // setActiveFloor(markersAfterDeletion[0]);\n    // for (let y = 0; y < markersAfterDeletion.length; y++) {\n\n    if (markersAfterDeletion.length > 0) {\n      setActiveFloor(markersAfterDeletion);\n    } else {\n      setActiveFloor({\n        \"id\": FloorIdx,\n        // \"floorno\": \"1\",\n        \"description\": \"\",\n        \"color\": \"#f18d00\",\n        \"blocks\": []\n      });\n    } //}\n\n  };\n\n  var createBlockWithDesc = function createBlockWithDesc() {\n    var draftBlockLocal = draftBlock;\n    var markersL1 = markers;\n    var floorIndex = null;\n    debugger;\n\n    for (var x = 0; x < markersL1.length; x++) {\n      if (activeFloor.id === markersL1[x].id) {\n        floorIndex = x;\n        break;\n      }\n    }\n\n    var latlngs = draftBlockLocal.getLatLngs();\n    var center = [draftBlockLocal._bounds.getCenter()];\n    var label = [draftBlockLocal.bindTooltip(feature.properties.text, {\n      permanent: true,\n      direction: 'center'\n    }).openTooltip()];\n    latlngs = latlngs.length > 0 ? latlngs[0] : latlngs;\n    debugger;\n    crupdateLayer2ActiveFloor(latlngs, null, floorIndex, center, label);\n    updateBuildingFromActiveFloor();\n    debugger;\n  };\n\n  var handleAddFloor = function handleAddFloor() {\n    debugger;\n    var newFloor = {\n      \"id\": FloorIdx,\n      // \"floorno\": markers.length + 1,\n      \"description\": newDesc,\n      \"color\": \"#f18d00\",\n      \"blocks\": [[0, 0], [0, 0], [0, 0]]\n    };\n    setActiveFloor(newFloor);\n    setActiveFloorBoundary(newFloor.boundaries);\n    setActiveFloorPolygons(newFloor.blocks);\n    var markersLocal = markers;\n    markersLocal.splice(FloorIdx, 0, newFloor); //  markersLocal.push(newFloor);\n\n    setMarkers(markersLocal);\n    setNewDesc(\"\");\n    handleSaveFloor(); //window.location.reload();\n  };\n\n  var changeHandlerDesc = function changeHandlerDesc(event) {\n    return setNewDesc(event.target.value);\n  };\n\n  var updateIsEdit = function updateIsEdit(e, value) {\n    return setIsEdit(value);\n  };\n\n  var handleEditPolygonClick = function handleEditPolygonClick(e) {\n    var drawingLocal = drawing;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"row\",\n      children: /*#__PURE__*/_jsxDEV(Breadcrumb, {\n        class: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(BreadcrumbItem, {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/map1\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"ri-home-4-line mr-1 float-left\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 878,\n              columnNumber: 43\n            }, _this), \"Home\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 878,\n            columnNumber: 27\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(BreadcrumbItem, {\n          active: true,\n          children: details.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 880,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 876,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"iq-card\",\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        className: \"iq-card-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            style: {\n              margin: \".6%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-4\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"iq-card iq-card-block iq-card-stretch iq-card-height bg-transparent\",\n                children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    htmlFor: \"exampleInputReadonly\",\n                    children: \"Building Id\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 899,\n                    columnNumber: 17\n                  }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                    type: \"text\",\n                    className: \"form-control\",\n                    defaultValue: details.id,\n                    disabled: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 900,\n                    columnNumber: 17\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 898,\n                  columnNumber: 15\n                }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    htmlFor: \"exampleInputReadonly\",\n                    children: \"Building Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 905,\n                    columnNumber: 17\n                  }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                    type: \"text\",\n                    className: \"form-control\",\n                    defaultValue: details.name,\n                    property: \"name\",\n                    onChange: ondetailChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 906,\n                    columnNumber: 17\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 904,\n                  columnNumber: 15\n                }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    htmlFor: \"exampleInputReadonly\",\n                    children: \"Street\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 911,\n                    columnNumber: 17\n                  }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                    type: \"text\",\n                    className: \"form-control\",\n                    defaultValue: details.street,\n                    property: \"street\",\n                    onChange: ondetailChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 912,\n                    columnNumber: 17\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 910,\n                  columnNumber: 15\n                }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    htmlFor: \"exampleInputReadonly\",\n                    children: \"Apartment\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 917,\n                    columnNumber: 17\n                  }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                    type: \"text\",\n                    className: \"form-control\",\n                    property: \"Apartment\",\n                    onChange: ondetailChange,\n                    defaultValue: details.Apartment\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 918,\n                    columnNumber: 17\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 916,\n                  columnNumber: 15\n                }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    htmlFor: \"exampleInputReadonly\",\n                    children: \"Doornum\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 924,\n                    columnNumber: 17\n                  }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                    type: \"text\",\n                    className: \"form-control\",\n                    property: \"doornum\",\n                    onChange: ondetailChange,\n                    defaultValue: details.doornum\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 925,\n                    columnNumber: 17\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 923,\n                  columnNumber: 15\n                }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    htmlFor: \"exampleInputReadonly\",\n                    children: \"Region\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 931,\n                    columnNumber: 17\n                  }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                    type: \"text\",\n                    className: \"form-control\",\n                    property: \"region\",\n                    onChange: ondetailChange,\n                    defaultValue: details.region\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 932,\n                    columnNumber: 17\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 930,\n                  columnNumber: 15\n                }, _this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    htmlFor: \"exampleInputReadonly\",\n                    children: \"Country\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 937,\n                    columnNumber: 17\n                  }, _this), /*#__PURE__*/_jsxDEV(Input, {\n                    type: \"text\",\n                    className: \"form-control\",\n                    property: \"country\",\n                    onChange: ondetailChange,\n                    defaultValue: details.country\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 938,\n                    columnNumber: 17\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 936,\n                  columnNumber: 15\n                }, _this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"btn btn-primary\",\n                  style: {\n                    \"font-size\": \"1.0rem\",\n                    \"margin-left\": \".05rem\",\n                    \"margin-right\": \".05rem\"\n                  },\n                  color: \"primary\",\n                  onClick: handleSaveFloor,\n                  children: \" SaveBuilding \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 943,\n                  columnNumber: 15\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 896,\n                columnNumber: 13\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 895,\n              columnNumber: 11\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-8\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"iq-card overflow-hidden\",\n                children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                  className: \"display-4\",\n                  children: activeFloor.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 952,\n                  columnNumber: 15\n                }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  id: \"home-chart-02\",\n                  children: /*#__PURE__*/_jsxDEV(Map, {\n                    center: [60.21846434365596, 24.811831922452843],\n                    zoom: 19,\n                    ref: mapRef,\n                    children: [/*#__PURE__*/_jsxDEV(Control, {\n                      position: \"topright\",\n                      children: [/*#__PURE__*/_jsxDEV(Button, {\n                        className: \"btn btn-primary\",\n                        color: \"primary\",\n                        onClick: function onClick() {\n                          return _toggle(\"addFloor\");\n                        },\n                        children: \" AddFloor \"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 964,\n                        columnNumber: 21\n                      }, _this), ' ', /*#__PURE__*/_jsxDEV(Modal, {\n                        isOpen: addFloor,\n                        toggle: function toggle() {\n                          return _toggle(\"addFloor\");\n                        },\n                        className: \"modal-sm\",\n                        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n                          className: \"btn btn-primary\",\n                          toggle: function toggle() {\n                            return _toggle(\"addFloor\");\n                          },\n                          children: \"Add Floor\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 968,\n                          columnNumber: 23\n                        }, _this), /*#__PURE__*/_jsxDEV(ModalBody, {\n                          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                            children: \"Index:\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 973,\n                            columnNumber: 25\n                          }, _this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n                            onChange: onChangeIndex,\n                            value: FloorIdx,\n                            type: \"number\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 973,\n                            columnNumber: 39\n                          }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n                            children: \"Enter Floor Description\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 980,\n                            columnNumber: 25\n                          }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            type: \"text\",\n                            onChange: changeHandlerDesc,\n                            value: newDesc,\n                            lur: updateIsEdit\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 981,\n                            columnNumber: 25\n                          }, _this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 969,\n                          columnNumber: 23\n                        }, _this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n                          children: [/*#__PURE__*/_jsxDEV(Button, {\n                            color: \"btn btn-primary\",\n                            onClick: function onClick() {\n                              _toggle(\"addFloor\"); // handleAddFloor(); \n\n\n                              handleAddFloor();\n                            },\n                            children: \"OK\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 987,\n                            columnNumber: 25\n                          }, _this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n                            color: \"btn btn-primary\",\n                            onClick: function onClick() {\n                              return _toggle(\"addFloor\");\n                            },\n                            children: \"Cancel\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 993,\n                            columnNumber: 25\n                          }, _this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 985,\n                          columnNumber: 23\n                        }, _this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 967,\n                        columnNumber: 21\n                      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n                        class: \"btn btn-primary\",\n                        onClick: deleteActiveFloor,\n                        value: \"BO\",\n                        children: \"Delete Floor\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 997,\n                        columnNumber: 21\n                      }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        class: \"btn btn-primary\",\n                        onClick: handleDrawPolygonClick,\n                        value: \"BL\",\n                        style: {\n                          \"font-size\": \"1.0rem\",\n                          \"margin-left\": \".05rem\"\n                        },\n                        children: \"AddBlock\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1006,\n                        columnNumber: 21\n                      }, _this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 956,\n                      columnNumber: 19\n                    }, _this), /*#__PURE__*/_jsxDEV(LayersControl, {\n                      position: \"topright\",\n                      children: [/*#__PURE__*/_jsxDEV(LayersControl.BaseLayer, {\n                        checked: false,\n                        name: \"Esri WorldImagery\",\n                        group: \"BaseLayers\",\n                        children: /*#__PURE__*/_jsxDEV(TileLayer, {\n                          url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\",\n                          attribution: \"\\xA9 <a href=\\\"Esri &mdash\\\">Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community</a> contributors\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1022,\n                          columnNumber: 23\n                        }, _this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1017,\n                        columnNumber: 21\n                      }, _this), /*#__PURE__*/_jsxDEV(LayersControl.BaseLayer, {\n                        checked: true,\n                        name: \"OpenStreetMap\",\n                        group: \"BaseLayers\",\n                        children: /*#__PURE__*/_jsxDEV(TileLayer, {\n                          attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n                          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1032,\n                          columnNumber: 23\n                        }, _this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1027,\n                        columnNumber: 21\n                      }, _this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1016,\n                      columnNumber: 19\n                    }, _this), /*#__PURE__*/_jsxDEV(EditableGroup, {\n                      data: selectedFloorGeoData\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1040,\n                      columnNumber: 19\n                    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(Modal, {\n                        isOpen: blockDescription,\n                        toggle: function toggle() {\n                          return toggleBlockDescription(\"blockDescription\");\n                        },\n                        className: \"modal-sm\",\n                        style: modalStyles,\n                        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n                          className: \"btn btn-primary\",\n                          toggle: function toggle() {\n                            return toggleBlockDescription(\"blockDescription\");\n                          },\n                          children: \"Enter the block details\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1066,\n                          columnNumber: 19\n                        }, _this), /*#__PURE__*/_jsxDEV(ModalBody, {\n                          children: /*#__PURE__*/_jsxDEV(Card, {\n                            className: \"iq-card\",\n                            children: /*#__PURE__*/_jsxDEV(CardBody, {\n                              className: \"iq-card-body\",\n                              children: /*#__PURE__*/_jsxDEV(\"form\", {\n                                children: [\"Name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n                                  onChange: onChangeName,\n                                  value: blockName,\n                                  type: \"text\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1073,\n                                  columnNumber: 27\n                                }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1078,\n                                  columnNumber: 13\n                                }, _this)]\n                              }, void 0, true, {\n                                fileName: _jsxFileName,\n                                lineNumber: 1070,\n                                columnNumber: 15\n                              }, _this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1069,\n                              columnNumber: 15\n                            }, _this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1068,\n                            columnNumber: 19\n                          }, _this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1067,\n                          columnNumber: 19\n                        }, _this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n                          children: /*#__PURE__*/_jsxDEV(Button, {\n                            color: \"secondary\",\n                            onClick: createBlockWithDesc,\n                            children: \"Ok\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1099,\n                            columnNumber: 19\n                          }, _this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1097,\n                          columnNumber: 19\n                        }, _this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1064,\n                        columnNumber: 19\n                      }, _this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1063,\n                      columnNumber: 19\n                    }, _this), /*#__PURE__*/_jsxDEV(Control, {\n                      position: \"topright\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: markers.map(function (mLr, didx) {\n                          return /*#__PURE__*/_jsxDEV(\"div\", {\n                            children: /*#__PURE__*/_jsxDEV(\"button\", {\n                              variant: \"contained\",\n                              class: \"primary\",\n                              value: didx,\n                              onClick: onFloorSelect,\n                              style: {\n                                \"font-size\": \"1.5rem\",\n                                \"margin-left\": \".05rem\"\n                              },\n                              children: mLr.description\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1182,\n                              columnNumber: 29\n                            }, _this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1174,\n                            columnNumber: 27\n                          }, _this);\n                        })\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1168,\n                        columnNumber: 21\n                      }, _this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1167,\n                      columnNumber: 19\n                    }, _this), /*#__PURE__*/_jsxDEV(Boundary, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1202,\n                      columnNumber: 19\n                    }, _this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 955,\n                    columnNumber: 17\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 954,\n                  columnNumber: 15\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 951,\n                columnNumber: 13\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 950,\n              columnNumber: 11\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 893,\n            columnNumber: 9\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 7\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 885,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 875,\n    columnNumber: 5\n  }, _this);\n};\n\n_s3(EditBuilding, \"wxT9BOFqefgcLxrd3Y5JFbMQnZg=\", false, function () {\n  return [useLeaflet];\n});\n\n_c = EditBuilding;\nexport default EditBuilding;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditBuilding\");","map":{"version":3,"sources":["/Users/likhitha/Documents/cms/client/src/components/dashboard/EditBuilding.js"],"names":["React","useRef","useEffect","useState","useMap","service","EditControl","LayersControl2","ControlledLayerItem","Map","TileLayer","FeatureGroup","useLeaflet","LayersControl","Marker","Polygon","Popup","LayerGroup","Circle","GeoJSON","Control","L","circleMarker","CardBody","Card","Breadcrumb","BreadcrumbItem","ButtonGroup","ButtonToolbar","Form","FormGroup","Label","Input","ModalHeader","Modal","ModalBody","ModalFooter","makeStyles","Button","set","Tooltip","addFloorCounter","useStyles","theme","map","height","width","zIndex","buttonWrapper","position","bottom","spacing","marginLeft","marginBottom","transform","headerWrapper","marginTop","modalStyles","EditBuilding","props","editRef","drawing","setDrawing","markers","setMarkers","details","setDetails","boundary","setBoundary","newPosition","setNewPosition","mapLayers","setMapLayers","customLayer","setCustomLayer","activeFloorPolygons","setActiveFloorPolygons","activeFloorBoundary","setActiveFloorBoundary","activeFloor","setActiveFloor","newDesc","setNewDesc","isEdit","setIsEdit","boundaryid","setBoundaryid","selectedFloorGeoData","setselectedFloorGeoData","blockDescription","setBlockDescription","draftBlock","setDraftBlock","mapRef","fgRef","refno","window","location","pathname","replace","leaflet","blockName","setBlockName","FloorIdx","setFloorIdx","polygon","center","rectangle","selectedLayerIndex","setSelectedLayerIndex","Boundary","detailLcl","undefined","boundaries","length","EditableLayer","editLayerRef","drawControlRef","showDrawControl","removeControl","current","addControl","leafletElement","clearLayers","addLayer","layer","on","e","onLayerClicked","onMounted","ctl","onEditPath","layerObj","layers","_layers","Object","keys","_bounds","getCenter","label","bindTooltip","feature","properties","text","permanent","direction","openTooltip","hasOwnProperty","polygonId","id","floorIndex","ground","latlngs","getLatLngs","crupdateLayer2ActiveFloor","onPolygonDeleted","console","log","values","_leaflet_id","onPolygonCreated","toggleBlockDescription","onDeleted","circle","polyline","marker","circlemarker","EditableGroup","handleLayerClick","drawControl","target","editLayerId","dataLayer","data","i","eachLayer","push","updateFloor","description","color","Math","random","toString","substr","blocks","addFloor","setAddFloor","_onFeatureGroupReady","ref","leafletFG","handleDrawPolygonClick","activeFloorLcl","polygonType","value","layerType","_toolbars","draw","_modes","handler","enable","completeShape","disable","onShapeDrawn","mar","k","boundary_id","className","sticky","drawingLcl","coordinates","latlngsIdx","latlng","coor1","lat","lng","activeFloor4crup","blockId","Date","getTime","bounds","centre","flindex","block","updateBuildingFromActiveFloor","detailsLocal","markerLcl","floors","reverseCoordinate","coor","retCoor","coorIdx","bound","row","ondetailChange","property","getAttribute","handleSaveFloor","markersLocal","updateBuilding","reload","block2Layer","iBlock","floorColor","onChangeIndex","preventDefault","onChangeName","onFloorSelect","index","selectedFloorPolygonLayers","activeFloorSel","blockIdx","blockPolygon","geoJsonObj","featureCollection","addressCardStyle","backgroundImage","require","backgroundSize","floor","refTemp","getBuilding","then","selBuilding","flyTo","latitude","longitude","ml","toggle","moveActiveFloor","markersLcl","_onCreate","_onEdited","_onDeleted","filter","l","deleteActiveFloor","activeFloorLocal","markersL","markersAfterDeletion","j","createBlockWithDesc","draftBlockLocal","markersL1","x","handleAddFloor","newFloor","splice","changeHandlerDesc","event","updateIsEdit","handleEditPolygonClick","drawingLocal","name","margin","street","Apartment","doornum","region","country","mLr","didx"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState, useMap } from \"react\";\nimport service from './services';\nimport { EditControl } from \"react-leaflet-draw\";\nimport LayersControl2, { ControlledLayerItem } from \"./LayerControl2\";\n// import \"./assets/leaflet.css\"\n// import \"./assets/leaflet.draw.css\"\nimport {\n  Map, TileLayer, FeatureGroup, useLeaflet, LayersControl, Marker, Polygon,\n  Popup, LayerGroup, Circle, GeoJSON\n} from \"react-leaflet\";\nimport Control from 'react-leaflet-control';\n\nimport L, { circleMarker } from \"leaflet\";\n\nimport { CardBody, Card, Breadcrumb, BreadcrumbItem, ButtonGroup, ButtonToolbar, Form, FormGroup, Label, Input, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap';\n// Material components\nimport { makeStyles, Button } from \"@material-ui/core\";\nimport { set } from \"mongoose\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nlet addFloorCounter = 0;\n\n\nconst useStyles = makeStyles(theme => ({\n  map: ({\n    height: `calc(90vh - 90px)`,\n    width: '60%',\n    zIndex: 0\n  }),\n  buttonWrapper: {\n    zIndex: 1,\n    position: \"absolute\",\n    bottom: theme.spacing(2),\n    marginLeft: \"30%\",\n    marginBottom: \"8%\",\n    transform: \"translateX(-50%)\",\n  },\n  headerWrapper: {\n    zIndex: 1,\n    marginLeft: theme.spacing(3),\n    marginTop: theme.spacing(1),\n  }\n}));\n\nconst modalStyles = {\n  width   :    500,\n  height  :    500\n}\n\n\n\n\nconst EditBuilding = (props) => {\n  const editRef = useRef();\n  const [drawing, setDrawing] = useState(false);\n  const [markers, setMarkers] = useState([])\n  const [details, setDetails] = useState('')\n  const [boundary, setBoundary] = useState([]);\n  const [newPosition, setNewPosition] = useState([])\n\n  const [mapLayers, setMapLayers] = useState('');\n  const [customLayer, setCustomLayer] = useState([]);\n\n  const [activeFloorPolygons, setActiveFloorPolygons] = useState([]);\n  const [activeFloorBoundary, setActiveFloorBoundary] = useState([]);\n  const [activeFloor, setActiveFloor] = useState('');\n  const [newDesc, setNewDesc] = useState('');\n  const [isEdit, setIsEdit] = useState('');\n  const [boundaryid, setBoundaryid] = useState(0);\n  const [selectedFloorGeoData, setselectedFloorGeoData] = useState('');\n  const [blockDescription, setBlockDescription] = useState(false);\n  const [draftBlock, setDraftBlock] = useState('');\n \n  // const [addCounter,setAddCounter] = React.useState(0);\n\n\n  //const purpleOptions = { color: 'purple' }\n  const mapRef = useRef();\n  const fgRef = useRef();\n  const refno = window.location.pathname.replace('/ViewBuilding/', '');\n  const leaflet = useLeaflet();\n  const [blockName, setBlockName] = useState('')\n  const [FloorIdx, setFloorIdx] = useState(0)\n\n\n\n  const polygon = [\n\n  ]\n  const center = [51.505, -0.09]\n  const rectangle = [\n    [51.49, -0.08],\n    [51.5, -0.06],\n  ]\n  const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n  function Boundary() {\n    const detailLcl = details;\n    if (details !== null && details !== undefined && details !== \"\") {\n      if (details.boundaries !== null && details.boundaries !== undefined\n        && details.boundaries !== \"\") {\n        if (details.boundaries.length > 0) {\n            return(<Polygon positions={details.boundaries}></Polygon>);\n        } else {\n          return (<div></div>)\n        }\n      } else {\n        return (<div></div>)\n      }\n\n    } else {\n      return (<div></div>)\n    }\n\n\n\n  }\n  function EditableLayer(props) {\n    const leaflet = useLeaflet();\n    const editLayerRef = React.useRef();\n    let drawControlRef = React.useRef();\n    let { map } = leaflet;\n\n\n    useEffect(() => {\n\n      if (!props.showDrawControl) {\n        map.removeControl(drawControlRef.current);\n      } else {\n        map.addControl(drawControlRef.current);\n      }\n\n      editLayerRef.current.leafletElement.clearLayers();\n\n      editLayerRef.current.leafletElement.addLayer(props.layer);\n      props.layer.on(\"click\", function (e) {\n        props.onLayerClicked(e, drawControlRef.current);\n      });\n    }, [props, map]);\n\n    function onMounted(ctl) {\n      drawControlRef.current = ctl;\n    }\n\n    function onEditPath(e) {\n\n\n      const layerObj = e.layers._layers;\n\n      const layer = layerObj[Object.keys(layerObj)[0]];\n      const center = [layer._bounds.getCenter()];\n      const label = [layer.bindTooltip(feature.properties.text, {permanent: true, direction: 'center'}).openTooltip()]\n      if (layer !== undefined && layer !== null) {\n        const props = layer.feature.properties;\n        if (props.hasOwnProperty('id') && props.hasOwnProperty('ground')) {\n          const polygonId = props.id;\n          const floorIndex = props.ground;\n          let latlngs = layer.getLatLngs();\n          latlngs = latlngs.length > 0 ? latlngs[0] : latlngs;\n          crupdateLayer2ActiveFloor(latlngs, polygonId, floorIndex,center,label)\n\n        }\n      }\n\n\n\n    }\n    function onPolygonDeleted(e) {\n      console.log(e);\n\n      const {\n        layers: { _layers },\n      } = e;\n\n      Object.values(_layers).map(({ _leaflet_id }) => {\n        //setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\n      });\n\n    }\n\n  \n  \n    \n   \n    \n    \n\n  \n    function onPolygonCreated(e) {\n      \n      // toggleBlockDescription();\n      debugger;\n\n      //addFloorCounter++;\n     \n      setDraftBlock(e.layer);\n      toggleBlockDescription();\n\n      // if (addFloorCounter === activeFloor.blocks.length) {\n        \n        debugger;\n      //}\n     \n\n    }\n\n    function onDeleted() {\n\n    }\n    \n\n\n    return (\n      <div>\n        <FeatureGroup ref={editLayerRef}>\n          <EditControl\n            position=\"topright\"\n            onMounted={onMounted}\n            onCreated={onPolygonCreated}\n            onEdited={onEditPath}\n            onDeleted={onPolygonDeleted}\n            draw={{\n              polygon: true,\n              circle: false,\n              polyline: false,\n              marker: false,\n              rectangle: false,\n              circlemarker: false\n            }}\n\n\n            {...props}\n          />\n          {/* <Polygon positions={activeFloorBoundary} onClick={handleLayerClick}> </Polygon> */}\n          <Marker \n                      position={[60.21846434365596, 24.811831922452843]}\n                      \n                    >\n                      {/* <renderPopup item={item}></renderPopup> */}\n\n                     \n\n                    </Marker>\n        </FeatureGroup>\n      </div>\n    );\n  }\n\n  function EditableGroup(props) {\n    const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n    function handleLayerClick(e, drawControl) {\n      setSelectedLayerIndex(e.target.feature.properties.editLayerId);\n    }\n    debugger;\n    let dataLayer = new L.GeoJSON(props.data);\n    let layers = [];\n    let i = 0;\n    dataLayer.eachLayer((layer) => {\n      layer.feature.properties.editLayerId = i;\n      layers.push(layer);\n      \n      i++;\n    });\n\n    return (\n      <div>\n<div>\n\n        {layers.map((layer, i) => {\n          return (\n            <EditableLayer\n              key={i}\n              layer={layer}\n              showDrawControl={i === selectedLayerIndex}\n              onLayerClicked={handleLayerClick}\n            >\n                  \n\n            </EditableLayer>\n          );\n          \n\n        })}\n        \n      </div>\n\n      <div>\n\n\n      </div>\n      </div>\n    );\n  }\n\n\n\n  const updateFloor = {\n    id:FloorIdx,\n\n    // floorno: markers.length + 1,\n    description: \"newDesc\",\n    color: '#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6),\n    blocks: [],\n    boundaries: []\n  }\n\n  //const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n  const [addFloor, setAddFloor] = useState(false);\n\n  const _onFeatureGroupReady = (ref) => {\n    if (ref !== undefined && ref !== null) {\n      let leafletFG = ref.leafletElement;\n      if (customLayer.length > 0) {\n        customLayer.eachLayer(layer => leafletFG.addLayer(layer));\n      }\n    }\n  }\n  const handleDrawPolygonClick = (e) => {\n    const activeFloorLcl = activeFloor;\n    const polygonType = e.target.value;\n\n    switch (polygonType) {\n      case \"BO\":\n\n        break;\n\n      case \"BL\":\n\n        break;\n\n      default:\n        break;\n    }\n    if (activeFloorLcl !== undefined && activeFloorLcl !== null) {\n      if (activeFloorLcl.boundaries.length > 3) {\n        const { layerType, layer } = e;\n        if (layerType === \"polygon\") {\n          const { _leaflet_id } = layer;\n          setMapLayers((layers) => [\n            ...layers,\n            { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n\n            // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n          ]);\n        }\n        //Edit this method to perform other actions\n\n        if (!drawing) {\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n        } else {\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n        }\n\n        setDrawing(!drawing)\n\n      }\n\n    }\n\n\n\n  }\n  //let dataLayer = new L.GeoJSON(props.data);\n\n\n\n  const onShapeDrawn = (e) => {\n\n    setDrawing(false)\n\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n\n    }\n\n    const mar = markers;\n\n    for (var k = 0; k < mar.length; k++) {\n\n      let boundary_id = boundaryid;\n\n      boundary_id = layer._leaflet_id;\n\n\n      setBoundaryid(boundary_id);\n      console.log(boundaryid);\n\n\n\n    }\n\n\n\n\n\n\n\n    // e.layer.on('click', () => {\n    //     \n    //     setDrawing(layer);\n    //     //setSelectedLayerIndex(e.target.boundaryid);\n    //     console.log(selectedLayerIndex);\n    //     \n    //   editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n    // })\n    e.layer.on('contextmenu', () => {\n      //do some contextmenu action here\n    })\n    e.layer.bindTooltip(\"Text\",\n      {\n        className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n        sticky: true,\n        direction: 'right'\n      }\n    );\n  }\n  function handleLayerClick(e, drawControl) {\n\n\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n\n    }\n\n    let drawingLcl = drawing;\n    drawingLcl = layer;\n    setDrawing(drawingLcl);\n    //   setSelectedLayerIndex(e.target.boundaryid);\n    //     console.log(selectedLayerIndex);\n\n\n\n\n\n\n    //editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n\n  }\n\n  //   e.layer.on('click', () => {\n  //     \n  //     setSelectedLayerIndex(e.target.boundaryid);\n  //     console.log(selectedLayerIndex);\n  //     \n  //   editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  // })\n  function crupdateLayer2ActiveFloor(latlngs, polygonId, floorIndex,center,label) {\n  \n\n    let coordinates = []\n    for (let latlngsIdx = 0; latlngsIdx < latlngs.length; latlngsIdx++) {\n\n      const latlng = latlngs[latlngsIdx];\n      let coor1 = []\n      const lat = latlng.hasOwnProperty('lat') ? latlng.lat : false;\n      const lng = latlng.hasOwnProperty('lng') ? latlng.lng : false;\n\n      if (!(lat === false || lng === false)) {\n\n        coor1.push(lat);\n        coor1.push(lng);\n        coordinates.push(coor1);\n\n      }\n    }\n    debugger;\n    let activeFloor4crup = activeFloor;\n    if (polygonId === null) {\n      toggleBlockDescription();\n      //console.log(blockName);\n      debugger;\n      \n\n      //  toggleBlockDescription()\n      //ask description\n      //const blName = blockName;\n\n      activeFloor4crup.blocks.push({  blockId: new Date().getTime().toString(), text: blockName, bounds: coordinates,centre: center });\n      debugger;\n\n    } else {\n      for (let flindex = 0; flindex < activeFloor4crup.blocks.length; flindex++) {\n        const block = activeFloor4crup.blocks[flindex];\n        if (block.blockId === polygonId) {\n\n          activeFloor4crup.blocks[flindex].bounds = coordinates\n          // toggleBlockDescription()\n        }\n\n      }\n    }\n    updateBuildingFromActiveFloor(floorIndex)\n\n\n  }\n  function updateBuildingFromActiveFloor(floorIndex) {\n\n    let detailsLocal = details;\n    let markerLcl = markers;\n    if (markerLcl !== undefined && markerLcl !== null) {\n      if (markers.length >= 1 && floorIndex >= 0) {\n        markerLcl[floorIndex] = activeFloor;\n        detailsLocal.floors = markerLcl;\n        setDetails(detailsLocal);\n      }\n    }\n\n  }\n  function reverseCoordinate(coor) {\n    let retCoor = [];\n    if (coor !== undefined && coor !== null) {\n      if (coor.length > 0) {\n        for (let coorIdx = 0; coorIdx < coor.length; coorIdx++) {\n          const bound = coor[coorIdx];\n          let row = [];\n          if (bound.length === 2) {\n            row.push(bound[1]);\n            row.push(bound[0]);\n            retCoor.push(row);\n          }\n        }\n\n      }\n    }\n    return retCoor;\n  }\n\n\n  const ondetailChange = (e) => {\n    debugger;\n    let detailLcl = details;\n    const value = e.target.value;\n    const property = e.target.getAttribute('property');\n    if (property !== undefined && property !== null && property !== '') {\n      detailLcl[property] = value;\n      setDetails(detailLcl);\n\n\n    }\n\n\n  }\n  const handleSaveFloor = (e, polygonId) => {\n    debugger;\n    let detailsLocal = details;\n    const markersLocal = markers;\n    details.floors = markersLocal\n\n    service\n      .updateBuilding(details.id, details)\n      window.location.reload();\n\n  }\n  \n  \n  function block2Layer(iBlock, floorIndex, floorColor) {\n\n\n    return {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"id\": iBlock.blockId,\n        \"text\": blockName,\n        \"ground\": floorIndex,\n\n      },\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"color\": floorColor,\n        \"coordinates\": [reverseCoordinate(iBlock.bounds)]\n      }\n    }\n\n\n\n  }\n\n\n  function toggleBlockDescription () {\n    setBlockDescription(!blockDescription)\n  }\n  const onChangeIndex = e => {\n    e.preventDefault();\n    setFloorIdx(e.target.value);\n    \n  };\n  const onChangeName = e => {\n    e.preventDefault();\n    setBlockName(e.target.value);\n    \n  };\n\n  function onFloorSelect(e, data) {\n    debugger;\n   \n    const index = e.target.value;\n    let selectedFloorPolygonLayers = [];\n    let activeFloorSel = markers[index];\n    const floorColor = '#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6);\n\n    for (let blockIdx = 0; blockIdx < activeFloorSel.blocks.length; blockIdx++) {\n      const blockPolygon = activeFloorSel.blocks[blockIdx];\n      //const center = [activeFloorSel.blocks.bounds.getCenter()];\n     \n      const geoJsonObj = block2Layer(blockPolygon, index, floorColor);\n     \n      // blockPolygon.push({centre: center});\n      selectedFloorPolygonLayers.push(geoJsonObj);\n      // create layer for marker \n\n    }\n\n    const featureCollection = {\n      \"type\": \"FeatureCollection\",\n      \"name\": \"\",\n      \"crs\": {\n        \"type\": \"name\",\n        \"properties\": {\n          \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\"\n        }\n      },\n      \"features\": selectedFloorPolygonLayers\n    };\n    // const floorLayers = new L.GeoJSON(featureCollection);\n\n    // setActiveFloorPolygons(floorLayers.getLayers());\n    setselectedFloorGeoData(featureCollection);\n    setActiveFloorBoundary(activeFloorSel.boundaries);\n    setActiveFloor(activeFloorSel);\n\n  }\n\n\n\n  const addressCardStyle = {\n    backgroundImage: `url(${require('./33.png')})`,\n\n    backgroundSize: 'cover',\n\n    height: \"423px\",\n\n  }\n\n  let floor = {};\n  useEffect(() => {\n\n    var refTemp = refno.replace(\"/EditBuilding/\", \"\");\n    service\n      .getBuilding(refTemp)\n      .then(selBuilding => {\n        console.log(\"returning\", selBuilding)\n\n        setMarkers(selBuilding[0].floors);\n        if (selBuilding[0].floors.length > 0) {\n          setActiveFloor(selBuilding[0].floors[0]);\n        } else {\n          setActiveFloor(\n            {\n              \"id\":FloorIdx,\n              // \"floorno\": \"1\",\n              \"description\": \"\",\n              \"color\": \"#f18d00\",\n              \"blocks\": []\n            }\n\n          );\n        }\n\n\n\n        setDetails(selBuilding[0]);\n\n        mapRef.current.leafletElement.flyTo([selBuilding[0].latitude, selBuilding[0].longitude], 16)\n\n        // setBoundary(selBuilding[0].boundary.geometry.coordinates[0]);\n\n        let ml = mapLayers;\n\n\n\n\n      })\n\n  }, [])\n\n  function toggle() {\n    setAddFloor(!addFloor);\n  }\n  \n\n  const moveActiveFloor = () => {\n    const markersLcl = markers;\n\n    if (activeFloor !== undefined && activeFloor !== null) {\n      for (let i = 0; i < markersLcl.length; i++) {\n\n        if (activeFloor.id === markersLcl[i].id) {\n          markersLcl[i].description = activeFloor.description;\n          markersLcl[i].blocks = activeFloor.blocks;\n          markersLcl[i].boundaries = activeFloor.boundaries;\n\n        }\n      }\n      setMarkers(markersLcl);\n    }\n\n  }\n  const _onCreate = (e) => {\n    console.log(e);\n\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n\n      setMapLayers((layers) => [\n        ...layers,\n        { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n      ]);\n    }\n  };\n\n\n  const _onEdited = (e) => {\n\n    // console.log(e);\n    // const {\n    //   layers: { _layers },\n    // } = e;\n\n    // Object.values(_layers).map(({ _leaflet_id, editing }) => {\n    //   setMapLayers((layers) =>\n    //     layers.map((l) =>\n    //       l.id === _leaflet_id\n    //         ? { ...l, latlngs: { ...editing.latlngs[0] } }\n    //         : l\n    //     )\n    //   );\n    // });\n  };\n\n  const _onDeleted = (e) => {\n    console.log(e);\n    const {\n      layers: { _layers },\n    } = e;\n\n    Object.values(_layers).map(({ _leaflet_id }) => {\n      setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\n    });\n  };\n\n  // const deleteBuildingConfirm = (e) => {\n\n  //   debugger;\n  //   const bid = delBuildingId;\n  //   service.deletion(bid);\n  //   window.location.reload();\n\n\n  // }\n\n  const deleteActiveFloor = () => {\n    debugger;\n    const activeFloorLocal = activeFloor;\n    const markersL = markers;\n    const markersAfterDeletion = [];\n    for (let j = 0; j < markersL.length; j++) {\n      const marker = markersL[j];\n      if (marker.id !== activeFloorLocal.id) {\n        markersAfterDeletion.push(marker);\n      }\n\n    }\n\n    setMarkers(markersAfterDeletion);\n    // setActiveFloorPolygons(markersAfterDeletion[0].blocks);\n    // setActiveFloorBoundary(markersAfterDeletion[0].boundaries);\n    // setActiveFloor(markersAfterDeletion[0]);\n    // for (let y = 0; y < markersAfterDeletion.length; y++) {\n    if (markersAfterDeletion.length > 0) {\n      setActiveFloor(markersAfterDeletion);\n    } else {\n      setActiveFloor(\n        {\n          \"id\": FloorIdx,\n          // \"floorno\": \"1\",\n          \"description\": \"\",\n          \"color\": \"#f18d00\",\n          \"blocks\": []\n        }\n\n      );\n    }\n  //}\n  }\n\n  const createBlockWithDesc = () => {\n    \n    const draftBlockLocal = draftBlock;\n    const markersL1 =markers;\n    let floorIndex = null;\n    debugger;\n    for (var x=0; x<markersL1.length; x++){\n      if (activeFloor.id === markersL1[x].id){\n        floorIndex = x;\n        break;\n      }\n    }\n    \n    let latlngs =draftBlockLocal.getLatLngs();\n    let center = [draftBlockLocal._bounds.getCenter()];\n    const label = [draftBlockLocal.bindTooltip(feature.properties.text, {permanent: true, direction: 'center'}).openTooltip()]\n\n         latlngs = latlngs.length > 0 ? latlngs[0] : latlngs;\n      \n      \n\n\n       \n       debugger;\n        crupdateLayer2ActiveFloor(latlngs, null, floorIndex,center, label)\n\n        \n        \n        updateBuildingFromActiveFloor()\n\n    debugger;\n  }\n\n\n  const handleAddFloor = () => {\n    debugger;\n\n    const newFloor = {\n\"id\":FloorIdx,\n      // \"floorno\": markers.length + 1,\n      \"description\": newDesc,\n      \"color\": \"#f18d00\",\n      \"blocks\": [[0,0],[0,0],[0,0]]\n     \n    }\n    setActiveFloor(newFloor);\n    setActiveFloorBoundary(newFloor.boundaries);\n    setActiveFloorPolygons(newFloor.blocks);\n    const markersLocal = markers;\n    markersLocal.splice(FloorIdx, 0, newFloor )\n  //  markersLocal.push(newFloor);\n    setMarkers(markersLocal);\n\n    setNewDesc(\"\");\n    handleSaveFloor();\n    //window.location.reload();\n  }\n\n\n  const changeHandlerDesc = (event) => setNewDesc(event.target.value);\n  const updateIsEdit = (e, value) => setIsEdit(value);\n\n\n\n  const handleEditPolygonClick = (e) => {\n    const drawingLocal = drawing;\n\n\n  }\n\n\n\n  return (\n    <div>\n      <div class=\"row\">\n        <Breadcrumb class=\"mb-4\">\n          <BreadcrumbItem><a href=\"/map1\"><i\n            className=\"ri-home-4-line mr-1 float-left\" />Home</a></BreadcrumbItem>\n          <BreadcrumbItem active>{details.name}</BreadcrumbItem>\n        </Breadcrumb>\n\n      </div>\n\n      <Card className=\"iq-card\">\n          <CardBody className=\"iq-card-body\">\n\n      <div>\n        \n\n\n\n        <div className=\"row\" style={{ margin: \".6%\" }}>\n\n          <div className=\"col-lg-4\">\n            <div className=\"iq-card iq-card-block iq-card-stretch iq-card-height bg-transparent\">\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Building Id</Label>\n                <Input type=\"text\" className=\"form-control\"\n                  defaultValue={details.id} disabled />\n              </FormGroup>\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Building Name</Label>\n                <Input type=\"text\" className=\"form-control\"\n                  defaultValue={details.name} property=\"name\" onChange={ondetailChange} />\n              </FormGroup>\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Street</Label>\n                <Input type=\"text\" className=\"form-control\"\n                  defaultValue={details.street} property=\"street\" onChange={ondetailChange} />\n              </FormGroup>\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Apartment</Label>\n                <Input type=\"text\" className=\"form-control\" property=\"Apartment\" onChange={ondetailChange}\n                  defaultValue={details.Apartment} />\n              </FormGroup>\n\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Doornum</Label>\n                <Input type=\"text\" className=\"form-control\" property=\"doornum\" onChange={ondetailChange}\n                  defaultValue={details.doornum} />\n              </FormGroup>\n\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Region</Label>\n                <Input type=\"text\" className=\"form-control\" property=\"region\" onChange={ondetailChange}\n                  defaultValue={details.region} />\n              </FormGroup>\n\n              <FormGroup className=\"form-group\">\n                <Label htmlFor=\"exampleInputReadonly\">Country</Label>\n                <Input type=\"text\" className=\"form-control\" property=\"country\" onChange={ondetailChange}\n                  defaultValue={details.country} />\n\n              </FormGroup>\n\n              <Button className=\"btn btn-primary\"\n                style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\", \"margin-right\": \".05rem\" }} color=\"primary\" onClick={handleSaveFloor}> SaveBuilding </Button>\n\n            </div>\n          </div>\n\n\n          <div className=\"col-lg-8\">\n            <div className=\"iq-card overflow-hidden\">\n              <h1 className=\"display-4\">{activeFloor.description}</h1>\n\n              <div id=\"home-chart-02\">\n                <Map center={[60.21846434365596, 24.811831922452843]} zoom={19} ref={mapRef} >\n                  <Control position=\"topright\">\n                    {/* <button class=\"primary\" onClick={handleDrawPolygonClick} value=\"BO\"\n                    style={{ \"font-size\": \"1.5rem\", \"margin-left\": \".05rem\" ,\"margin-right\": \".05rem\" }}>\n                    Add Floor\n                        </button> */}\n\n\n\n                    <Button className=\"btn btn-primary\" color=\"primary\" onClick={() => toggle(\"addFloor\")}> AddFloor </Button>{' '}\n\n\n                    <Modal isOpen={addFloor} toggle={() => toggle(\"addFloor\")} className=\"modal-sm\">\n                      <ModalHeader className=\"btn btn-primary\" toggle={() => toggle(\"addFloor\")}>Add Floor</ModalHeader>\n                      <ModalBody>\n\n\n                        {/* <p>Floor: {markers.length + 1}</p> */}\n                        <p>Index:</p> <input\n            onChange={onChangeIndex}\n            value={FloorIdx}\n            type=\"number\"\n          \n          />\n\n                        <p>Enter Floor Description</p>\n                        <input type=\"text\" onChange={changeHandlerDesc} value={newDesc}\n                          lur={updateIsEdit} />\n\n                      </ModalBody>\n                      <ModalFooter>\n\n                        <Button color=\"btn btn-primary\" onClick={() => {\n                          toggle(\"addFloor\");\n                          // handleAddFloor(); \n                          handleAddFloor();\n\n                        }}>OK</Button>{' '}\n                        <Button color=\"btn btn-primary\" onClick={() => toggle(\"addFloor\")}>Cancel</Button>\n                      </ModalFooter>\n                    </Modal>\n\n                    <Button class=\"btn btn-primary\" onClick={deleteActiveFloor} value=\"BO\"\n                    >\n                      Delete Floor\n                        </Button>\n                    {/* <button class=\"btn btn-primary\" onClick={handleDrawPolygonClick} value=\"BO\"\n                    style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\", \"margin-right\": \".05rem\" }}>\n                    Manage Boundary\n                        </button> */}\n\n                    <button class=\"btn btn-primary\" onClick={handleDrawPolygonClick} value=\"BL\"\n                      style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\" }}>\n                      AddBlock\n                        </button>\n                    {/* \n                  <button class=\"btn btn-primary\" onClick={handleEditPolygonClick}\n                    style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\" }}>\n                    EditBlock\n                        </button> */}\n                  </Control>\n                  <LayersControl position=\"topright\">\n                    <LayersControl.BaseLayer\n                      checked={false}\n                      name=\"Esri WorldImagery\"\n                      group=\"BaseLayers\"\n                    >\n                      <TileLayer\n                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                        attribution='&copy; <a href=\"Esri &mdash\">Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community</a> contributors'\n                      />\n                    </LayersControl.BaseLayer >\n                    <LayersControl.BaseLayer\n                      checked={true}\n                      name=\"OpenStreetMap\"\n                      group=\"BaseLayers\"\n                    >\n                      <TileLayer\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                      />\n                    </LayersControl.BaseLayer >\n\n                  </LayersControl>\n\n                  <EditableGroup data={selectedFloorGeoData} >\n                    {/* {\n                      markers.map((marker, ind) => (\n                        marker.blocks.map((block, ind) => (\n\n                        \n\n                        <label position={block.center}>\n           <Tooltip permanent direction=\"center\" class=\"labelText\"> {block.text}</Tooltip> </label>\n\n)) ))\n                    } */}\n                  \n                  {/* <Tooltip\n                            style={{fontSize:\"20px\"}}\n                         title=   {<h3 style={{ color: \"lightblue\" }}>{mLr.description}</h3>}\n       \n        placement=\"left\"\n      >\n      </Tooltip> */}\n\n                  </EditableGroup>\n\n                  <div>\n                  <Modal isOpen={blockDescription} toggle={() => toggleBlockDescription(\"blockDescription\")} className=\"modal-sm\" style={modalStyles}>\n                  \n                  <ModalHeader className=\"btn btn-primary\" toggle={() => toggleBlockDescription(\"blockDescription\")}>Enter the block details</ModalHeader>\n                  <ModalBody>\n                  <Card className=\"iq-card\">\n              <CardBody className=\"iq-card-body\">\n              <form>\n             \n             \n                    Name: <input\n            onChange={onChangeName}\n            value={blockName}\n            type=\"text\"\n          \n          /><br/>\n                    {/* Description: <input\n            onChange={onChangeDesc}\n            value={blockDesc}\n            type=\"text\"\n          \n          /><br/>\n                    icon: <input\n            onChange={onChangeIcon}\n            value={icon}\n            type=\"url\"\n          \n          /><br/> */}\n                    </form>\n                   \n                    </CardBody>\n                    </Card>\n  \n                  </ModalBody>\n                  <ModalFooter>\n                 {/* <Button color=\"primary\" >submit</Button>  */}\n                  <Button color=\"secondary\" onClick={createBlockWithDesc}>Ok</Button>\n                  </ModalFooter>\n                  \n                  \n                  </Modal>\n                  </div>\n\n\n                  {/* <FeatureGroup>\n                  \n                  {activeFloorPolygons.map((polygonObjLayer,polyIdx)=>(\n                      <div>\n                      <EditControl\n                      layer={polygonObjLayer}\n                      position='topleft'\n                      onCreated={onShapeDrawn}\n                      onEdited = {_onEdited}\n                      onDeleted = {_onDeleted}\n                      \n                      \n                      \n                      //here you can specify your shape options and which handler you want to enable\n                      draw={{\n                        rectangle: false,\n                        polygon: true,\n                        circle: false,\n                        polyline: false,\n                        circlemarker: false,\n                        marker: false\n  \n                      }}\n\n                    >\n  \n  \n  \n  \n                    </EditControl>\n\n                    <Polygon positions={polygonObj.bounds} ></Polygon>\n                    </div>\n                    \n                  ))}*/}\n                  {/* <Polygon positions={activeFloorBoundary} onClick={handleLayerClick}> </Polygon> */}\n\n\n\n                  {/* </FeatureGroup>  */}\n                  {/* import React from \"react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport { Button, Popup } from \"semantic-ui-react\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Popup\n        trigger={<Button>Register</Button>}\n        position=\"top center\"\n      >\n        Tooltip for the register button\n      </Popup>\n    </div>\n  );\n} */}\n\n\n                  <Control position=\"topright\" >\n                    <div>\n                      {\n                        markers.map((mLr, didx) => (\n\n\n\n                          <div>\n                            {/* <Tooltip\n                            style={{fontSize:\"20px\"}}\n                         title=   {<h3 style={{ color: \"lightblue\" }}>{mLr.description}</h3>}\n       \n        placement=\"left\"\n      > */}\n\n                            <button variant=\"contained\" class=\"primary\" value={didx} onClick={onFloorSelect} style={{ \"font-size\": \"1.5rem\", \"margin-left\": \".05rem\" }}>\n                              {mLr.description}\n                            </button>\n                            {/* </Tooltip> */}\n                            {/* <ReactTooltip id=\"registerTip\" place=\"top\" effect=\"solid\">\n        {mLr.description}\n      </ReactTooltip> */}\n\n\n                          </div>\n                        ))\n\n                      }\n\n                    </div>\n                  </Control>\n                  {/* {if(details!==undefined&&details.boundaries.length>0)\n                    <Polygon positions={details.boundaries} ></Polygon>\n                  } */}\n\n                  <Boundary></Boundary>\n\n\n                </Map>\n              </div>\n            </div>\n          </div>\n          \n        </div>\n        \n\n\n\n\n      </div>\n      \n      </CardBody>\n      </Card>\n      \n    </div>\n  )\n}\n\n\nexport default EditBuilding;"]},"metadata":{},"sourceType":"module"}